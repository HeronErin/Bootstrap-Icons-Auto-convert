%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
144 240 m 144 201.809 159.172 165.184 186.176 138.176 c 213.184 111.172
 249.809 96 288 96 c 1248 96 l 1286.191 96 1322.816 111.172 1349.824 138.176
 c 1376.828 165.184 1392 201.809 1392 240 c 1392 582.047 l 1433.258 592.656
 1469.816 616.684 1495.918 650.348 c 1522.023 684.012 1536.188 725.402 1536.188
 768 c 1536.188 810.598 1522.023 851.988 1495.918 885.652 c 1469.816 919.316
 1433.258 943.344 1392 953.953 c 1392 1296 l 1392 1334.191 1376.828 1370.816
 1349.824 1397.824 c 1322.816 1424.828 1286.191 1440 1248 1440 c 288 1440
 l 249.809 1440 213.184 1424.828 186.176 1397.824 c 159.172 1370.816 144
 1334.191 144 1296 c 144 953.953 l 102.742 943.344 66.184 919.316 40.082
 885.652 c 13.977 851.988 -0.188 810.598 -0.188 768 c -0.188 725.402 13.977
 684.012 40.082 650.348 c 66.184 616.684 102.742 592.656 144 582.047 c h
240 582.047 m 281.258 592.656 317.816 616.684 343.918 650.348 c 370.023
 684.012 384.188 725.402 384.188 768 c 384.188 810.598 370.023 851.988 343.918
 885.652 c 317.816 919.316 281.258 943.344 240 953.953 c 240 1296 l 240 
1308.73 245.059 1320.938 254.059 1329.941 c 263.062 1338.941 275.27 1344
 288 1344 c 1248 1344 l 1260.73 1344 1272.938 1338.941 1281.941 1329.941
 c 1290.941 1320.938 1296 1308.73 1296 1296 c 1296 953.953 l 1254.742 943.344
 1218.184 919.316 1192.082 885.652 c 1165.977 851.988 1151.812 810.598 1151.812
 768 c 1151.812 725.402 1165.977 684.012 1192.082 650.348 c 1218.184 616.684
 1254.742 592.656 1296 582.047 c 1296 240 l 1296 227.27 1290.941 215.062
 1281.941 206.059 c 1272.938 197.059 1260.73 192 1248 192 c 288 192 l 275.27
 192 263.062 197.059 254.059 206.059 c 245.059 215.062 240 227.27 240 240
 c h
192 672 m 157.703 672 126.012 690.297 108.863 720 c 91.711 749.703 91.711
 786.297 108.863 816 c 126.012 845.703 157.703 864 192 864 c 226.297 864
 257.988 845.703 275.137 816 c 292.289 786.297 292.289 749.703 275.137 720
 c 257.988 690.297 226.297 672 192 672 c 1344 672 m 1309.703 672 1278.012
 690.297 1260.863 720 c 1243.711 749.703 1243.711 786.297 1260.863 816 c
 1278.012 845.703 1309.703 864 1344 864 c 1378.297 864 1409.988 845.703 
1427.137 816 c 1444.289 786.297 1444.289 749.703 1427.137 720 c 1409.988
 690.297 1378.297 672 1344 672 c f
1097.664 384 m 438.336 384 l 432 575.426 l 469.055 575.426 l 489.215 455.234
 527.809 436.609 677.664 431.906 c 710.594 430.852 l 710.594 1039.781 l 
710.594 1091.332 699.457 1103.621 609.891 1111.59 c 609.887 1152 l 926.109
 1152 l 926.109 1111.586 l 836.062 1103.617 824.926 1091.426 824.926 1039.777
 c 824.93 430.848 l 858.336 431.809 l 1008.098 436.609 1046.785 455.234 
1066.945 575.426 c 1104 575.426 l h
1097.664 384 m f
Q Q
showpage
%%Trailer
%%EOF
