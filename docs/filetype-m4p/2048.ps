%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1344 l 1344 1377.703 1335.129 1410.812 1318.277 1440 c 
1301.426 1469.188 1277.188 1493.426 1248 1510.277 c 1218.812 1527.129 1185.703
 1536 1152 1536 c 1152 1440 l 1177.461 1440 1201.879 1429.887 1219.883 1411.883
 c 1237.887 1393.879 1248 1369.461 1248 1344 c 1248 432 l 1056 432 l 1017.809
 432 981.184 416.828 954.176 389.824 c 927.172 362.816 912 326.191 912 288
 c 912 96 l 384 96 l 358.539 96 334.121 106.113 316.117 124.117 c 298.113
 142.121 288 166.539 288 192 c 288 1056 l 192 1056 l 192 192 l 192 141.078
 212.227 92.242 248.234 56.234 c 284.242 20.227 333.078 0 384 0 c 912 0 
l h
67.777 1521.504 m 67.777 1266.145 l 71.426 1266.145 l 162.816 1473.504 
l 212.352 1473.504 l 303.168 1266.145 l 306.816 1266.145 l 306.816 1521.504
 l 375.457 1521.504 l 375.457 1137.602 l 298.656 1137.602 l 189.215 1386.816
 l 186.719 1386.816 l 77.281 1137.602 l 0 1137.602 l 0 1521.504 l h
570.531 1137.602 m 545.379 1179.203 520.098 1220.801 494.691 1262.402 c
 469.285 1304.004 445.348 1345.922 422.883 1388.164 c 422.883 1450.371 l
 608.836 1450.371 l 608.836 1521.508 l 679.875 1521.508 l 679.875 1450.371
 l 726.914 1450.371 l 726.914 1389.027 l 679.875 1389.027 l 679.871 1137.602
 l h
491.812 1389.121 m 491.812 1387.105 l 509.094 1354.465 527.363 1321.922
 546.629 1289.473 c 566.086 1257.023 585.508 1225.535 604.902 1195.008 c
 608.742 1195.008 l 608.742 1389.023 l 491.902 1389.023 l h
769.539 1137.602 m 923.141 1137.602 l 950.918 1137.602 974.34 1143.328 
993.414 1154.785 c 1012.742 1165.984 1027.461 1181.25 1037.574 1200.578 
c 1047.688 1219.906 1052.742 1241.57 1052.742 1265.57 c 1052.742 1289.57
 1047.621 1311.234 1037.383 1330.562 c 1027.207 1349.633 1012.359 1364.801
 992.84 1376.066 c 992.832 1376.062 l 971.277 1387.684 947.035 1393.414 
922.559 1392.672 c 845.469 1392.672 l 845.469 1521.504 l 769.629 1521.504
 l h
967.301 1302.145 m 967.297 1302.145 l 972.996 1290.812 975.797 1278.246
 975.457 1265.566 c 975.457 1243.805 969.535 1227.133 957.695 1215.551 c
 945.918 1203.84 929.504 1198.016 908.449 1198.078 c 845.184 1198.078 l 
845.184 1333.055 l 908.543 1333.055 l 920.973 1333.375 933.293 1330.676 
944.449 1325.184 c 954.219 1319.992 962.184 1311.957 967.297 1302.145 c f*
Q Q
showpage
%%Trailer
%%EOF
