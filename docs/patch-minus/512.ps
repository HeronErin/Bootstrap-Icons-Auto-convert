%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
132 192 m 132 185.371 137.371 180 144 180 c 240 180 l 246.629 180 252 185.371
 252 192 c 252 198.629 246.629 204 240 204 c 144 204 l 137.371 204 132 198.629
 132 192 c f*
246.551 60.312 m 224.445 37.656 l 241.605 20.902 l 256.535 36.191 l 277.895
 35.926 l 277.895 35.93 l 296.574 35.707 314.555 43.031 327.762 56.238 c
 340.969 69.445 348.293 87.426 348.07 106.105 c 347.832 127.465 l 363.098
 142.395 l 363.098 142.391 l 376.453 155.441 383.98 173.328 383.98 192 c
 383.98 210.672 376.453 228.559 363.098 241.609 c 347.809 256.539 l 348.074
 277.898 l 348.07 277.895 l 348.293 296.574 340.969 314.555 327.762 327.762
 c 314.555 340.969 296.574 348.293 277.895 348.07 c 256.535 347.832 l 241.605
 363.098 l 241.609 363.098 l 228.559 376.453 210.672 383.98 192 383.98 c
 173.328 383.98 155.441 376.453 142.391 363.098 c 127.461 347.809 l 106.102
 348.074 l 106.105 348.07 l 87.426 348.293 69.445 340.969 56.238 327.762
 c 43.031 314.555 35.707 296.574 35.93 277.895 c 36.168 256.535 l 20.902
 241.605 l 20.902 241.609 l 7.547 228.559 0.02 210.672 0.02 192 c 0.02 173.328
 7.547 155.441 20.902 142.391 c 36.191 127.461 l 35.926 106.102 l 35.93 
106.105 l 35.707 87.426 43.031 69.445 56.238 56.238 c 69.445 43.031 87.426
 35.707 106.105 35.93 c 127.465 36.168 l 142.395 20.902 l 142.391 20.902
 l 155.441 7.547 173.328 0.02 192 0.02 c 210.672 0.02 228.559 7.547 241.609
 20.902 c 224.449 37.656 l 215.914 28.918 204.215 23.992 192 23.992 c 179.785
 23.992 168.086 28.918 159.551 37.656 c 137.473 60.312 l 105.793 59.93 l
 93.582 59.793 81.832 64.582 73.203 73.219 c 64.57 81.855 59.785 93.605 
59.93 105.816 c 60.312 137.449 l 37.656 159.555 l 37.656 159.551 l 28.918
 168.086 23.992 179.785 23.992 192 c 23.992 204.215 28.918 215.914 37.656
 224.449 c 60.312 246.527 l 59.93 278.207 l 59.793 290.418 64.582 302.168
 73.219 310.797 c 81.855 319.43 93.605 324.215 105.816 324.07 c 137.449 
323.688 l 159.555 346.344 l 159.551 346.344 l 168.086 355.082 179.785 360.008
 192 360.008 c 204.215 360.008 215.914 355.082 224.449 346.344 c 246.527
 323.688 l 278.207 324.07 l 290.418 324.207 302.168 319.418 310.797 310.781
 c 319.43 302.145 324.215 290.395 324.07 278.184 c 323.688 246.551 l 346.344
 224.445 l 346.344 224.449 l 355.082 215.914 360.008 204.215 360.008 192
 c 360.008 179.785 355.082 168.086 346.344 159.551 c 323.688 137.473 l 324.07
 105.793 l 324.207 93.582 319.418 81.832 310.781 73.203 c 302.145 64.57 
290.395 59.785 278.184 59.93 c h
246.551 60.312 m f
Q Q
showpage
%%Trailer
%%EOF
