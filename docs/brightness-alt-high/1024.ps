%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:19 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 216 768 624
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 216 768 624
768 768 cairo_set_page_size
%%EndPageSetup
q 0 216 768 408 rectclip
1 0 0 -1 0 768 cm q
0 g
384 144 m 390.363 144 396.469 146.527 400.969 151.031 c 405.473 155.531
 408 161.637 408 168 c 408 264 l 408 272.574 403.426 280.496 396 284.785
 c 388.574 289.07 379.426 289.07 372 284.785 c 364.574 280.496 360 272.574
 360 264 c 360 168 l 360 161.637 362.527 155.531 367.031 151.031 c 371.531
 146.527 377.637 144 384 144 c 768 528 m 768 534.363 765.473 540.469 760.969
 544.969 c 756.469 549.473 750.363 552 744 552 c 648 552 l 639.426 552 631.504
 547.426 627.215 540 c 622.93 532.574 622.93 523.426 627.215 516 c 631.504
 508.574 639.426 504 648 504 c 744 504 l 750.363 504 756.469 506.527 760.969
 511.031 c 765.473 515.531 768 521.637 768 528 c 120 552 m 128.574 552 136.496
 547.426 140.785 540 c 145.07 532.574 145.07 523.426 140.785 516 c 136.496
 508.574 128.574 504 120 504 c 24 504 l 15.426 504 7.504 508.574 3.215 516
 c -1.07 523.426 -1.07 532.574 3.215 540 c 7.504 547.426 15.426 552 24 552
 c h
655.535 256.465 m 660.035 260.965 662.562 267.066 662.562 273.434 c 662.562
 279.797 660.035 285.898 655.535 290.398 c 587.664 358.27 l 587.664 358.273
 l 583.191 362.902 577.047 365.543 570.609 365.598 c 564.172 365.652 557.984
 363.121 553.43 358.57 c 548.879 354.016 546.348 347.828 546.402 341.391
 c 546.457 334.953 549.098 328.809 553.727 324.336 c 621.598 256.465 l 621.602
 256.465 l 626.102 251.965 632.203 249.438 638.566 249.438 c 644.934 249.438
 651.035 251.965 655.535 256.465 c 180.336 358.273 m 186.434 364.16 195.18
 366.395 203.355 364.156 c 211.527 361.914 217.914 355.527 220.156 347.355
 c 222.395 339.18 220.16 330.434 214.273 324.336 c 146.398 256.465 l 141.93
 251.832 135.781 249.195 129.344 249.137 c 122.91 249.082 116.719 251.613
 112.168 256.168 c 107.613 260.719 105.082 266.91 105.137 273.344 c 105.195
 279.781 107.832 285.93 112.465 290.398 c h
384 336 m 333.078 336 284.242 356.227 248.234 392.234 c 212.227 428.242
 192 477.078 192 528 c 192 534.363 194.527 540.469 199.031 544.969 c 203.531
 549.473 209.637 552 216 552 c 552 552 l 558.363 552 564.469 549.473 568.969
 544.969 c 573.473 540.469 576 534.363 576 528 c 576 494.297 567.129 461.188
 550.277 432 c 533.426 402.812 509.188 378.574 480 361.723 c 450.812 344.871
 417.703 336 384 336 c 384 384 m 418.039 383.988 450.98 396.035 476.98 418.004
 c 502.98 439.969 520.359 470.438 526.031 504 c 241.922 504 l 247.594 470.43
 264.98 439.957 290.992 417.988 c 317 396.02 349.953 383.977 384 384 c f
Q Q
showpage
%%Trailer
%%EOF
