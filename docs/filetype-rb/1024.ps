%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 384 768 l 384 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
0 568.801 m 76.656 568.801 l 90.93 568.801 103.055 571.328 113.039 576.387
 c 123.117 581.348 130.766 588.387 135.984 597.508 c 141.328 606.598 144
 617.285 144 629.57 c 144 629.566 l 144.312 641.02 141.145 652.301 134.914
 661.914 c 128.684 671.531 119.684 679.031 109.105 683.426 c 147.648 760.754
 l 105.168 760.754 l 71.566 689.188 l 37.535 689.184 l 37.535 760.75 l 0
 760.754 l h
37.535 598.609 m 37.535 660.625 l 70.605 660.625 l 81.07 660.625 89.359
 658.098 95.469 653.039 c 101.707 647.949 104.812 640.352 104.781 630.238
 c 104.781 620 101.676 612.176 95.469 606.766 c 95.473 606.77 l 88.66 601.109
 79.98 598.199 71.137 598.609 c h
249.984 760.754 m 170.113 760.754 l 170.113 568.801 l 250.273 568.801 l
 267.426 568.801 281.152 572.961 291.457 581.281 c 301.762 589.664 306.914
 601.25 306.914 616.035 c 306.91 616.031 l 307.062 623.027 305.582 629.961
 302.594 636.289 c 299.879 641.852 295.859 646.676 290.879 650.352 c 285.82
 654 280.098 656.625 274.031 658.078 c 274.031 659.758 l 281.809 660.527
 288.926 662.781 295.391 666.527 c 301.871 670.219 307.219 675.613 310.848
 682.129 c 314.961 689.617 316.996 698.066 316.754 706.609 c 316.754 718.035
 313.906 727.793 308.211 735.891 c 302.449 743.891 294.578 750.066 284.594
 754.418 c 284.594 754.414 l 273.578 758.754 261.82 760.906 249.984 760.754
 c 241.391 597.363 m 207.789 597.363 l 207.789 648.723 l 232.797 648.723
 l 241.34 648.723 248.285 647.684 253.629 645.602 c 253.633 645.602 l 258.457
 643.98 262.641 640.871 265.586 636.719 c 268.355 632.516 269.73 627.543
 269.52 622.512 c 269.887 615.57 267.16 608.824 262.078 604.078 c 257.184
 599.598 250.301 597.359 241.438 597.359 c h
243.789 675.125 m 207.789 675.125 l 207.789 732.246 l 236.062 732.246 l
 250.973 732.246 261.695 729.895 268.223 725.191 c 268.223 725.184 l 274.859
 720.383 278.586 712.527 278.113 704.352 c 278.309 698.883 276.941 693.473
 274.176 688.754 c 271.539 684.227 267.492 680.684 262.656 678.672 c 256.691
 676.164 250.262 674.953 243.793 675.121 c f*
Q Q
showpage
%%Trailer
%%EOF
