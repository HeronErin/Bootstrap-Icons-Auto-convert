%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 14 96 1522 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 14 96 1522 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 14 96 1508 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
439.68 96 m 422.758 96.004 406.141 100.484 391.508 108.98 c 376.871 117.477
 364.746 129.691 356.352 144.383 c 27.262 720.383 l 27.266 720.383 l 10.41
 749.891 10.41 786.109 27.266 815.617 c 356.355 1391.617 l 356.352 1391.617
 l 364.746 1406.309 376.871 1418.523 391.508 1427.02 c 406.141 1435.516 
422.758 1439.996 439.68 1440 c 1096.32 1440 l 1113.242 1439.996 1129.859
 1435.516 1144.492 1427.02 c 1159.129 1418.523 1171.254 1406.309 1179.648
 1391.617 c 1508.832 815.617 l 1525.688 786.109 1525.688 749.891 1508.832
 720.383 c 1179.648 144.383 l 1171.254 129.691 1159.129 117.477 1144.492
 108.98 c 1129.859 100.484 1113.242 96.004 1096.32 96 c h
921.406 1026.816 m 877.609 1052.492 827.801 1066.137 777.031 1066.359 c
 726.262 1066.586 676.332 1053.387 632.309 1028.098 c 588.285 1002.812 551.727
 966.336 526.34 922.367 c 500.953 878.398 487.645 828.5 487.754 777.73 c
 487.867 726.961 501.398 677.121 526.977 633.266 c 552.555 589.41 589.273
 553.094 633.406 528 c 699.52 490.41 777.816 480.5 851.211 500.426 c 924.605
 520.352 987.141 568.5 1025.168 634.359 c 1063.195 700.223 1073.625 778.453
 1054.188 851.977 c 1034.746 925.5 987.016 988.352 921.406 1026.816 c f
Q Q
showpage
%%Trailer
%%EOF
