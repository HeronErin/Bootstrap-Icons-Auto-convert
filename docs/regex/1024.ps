%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:57 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 105 768 663
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 105 768 663
768 768 cairo_set_page_size
%%EndPageSetup
q 0 105 768 558 rectclip
1 0 0 -1 0 768 cm q
0 g
146.398 146.398 m 104.691 188.105 74.695 240.059 59.426 297.031 c 44.16
 354.004 44.16 413.996 59.426 470.969 c 74.695 527.941 104.691 579.895 146.398
 621.602 c 152.289 627.695 154.523 636.445 152.281 644.617 c 150.043 652.793
 143.656 659.18 135.484 661.418 c 127.309 663.66 118.559 661.422 112.465
 655.535 c 64.797 607.871 30.52 548.5 13.07 483.391 c -4.375 418.277 -4.375
 349.723 13.07 284.609 c 30.52 219.5 64.797 160.129 112.465 112.465 c 116.938
 107.832 123.082 105.195 129.52 105.137 c 135.957 105.082 142.145 107.613
 146.699 112.168 c 151.25 116.719 153.781 122.91 153.727 129.344 c 153.672
 135.781 151.031 141.93 146.398 146.398 c 621.598 112.461 m 621.602 112.465
 l 626.102 107.965 632.203 105.438 638.566 105.438 c 644.934 105.438 651.035
 107.965 655.535 112.465 c 703.203 160.129 737.48 219.5 754.93 284.609 c
 772.375 349.723 772.375 418.277 754.93 483.391 c 737.48 548.5 703.203 607.871
 655.535 655.535 c 649.441 661.422 640.691 663.66 632.516 661.418 c 624.344
 659.18 617.957 652.793 615.719 644.617 c 613.477 636.445 615.711 627.695
 621.602 621.602 c 663.309 579.895 693.305 527.941 708.574 470.969 c 723.84
 413.996 723.84 354.004 708.574 297.031 c 693.305 240.059 663.309 188.105
 621.602 146.398 c 617.102 141.898 614.574 135.797 614.574 129.434 c 614.574
 123.066 617.102 116.965 621.602 112.465 c 288 528 m 288 545.148 278.852
 560.996 264 569.57 c 249.148 578.145 230.852 578.145 216 569.57 c 201.148
 560.996 192 545.148 192 528 c 192 510.852 201.148 495.004 216 486.43 c 
230.852 477.855 249.148 477.855 264 486.43 c 278.852 495.004 288 510.852
 288 528 c 528 216 m 528 207.426 523.426 199.504 516 195.215 c 508.574 190.93
 499.426 190.93 492 195.215 c 484.574 199.504 480 207.426 480 216 c 480 
317.617 l 396.336 267.359 l 388.98 262.953 379.828 262.805 372.336 266.973
 c 364.84 271.141 360.137 278.988 360 287.566 c 359.859 296.141 364.309 
304.137 371.664 308.543 c 457.344 360 l 371.664 411.406 l 364.309 415.816
 359.859 423.812 360 432.387 c 360.137 440.961 364.84 448.812 372.336 452.98
 c 379.828 457.148 388.98 457 396.336 452.594 c 480 402.383 l 480 504 l 
480 512.574 484.574 520.496 492 524.785 c 499.426 529.07 508.574 529.07 
516 524.785 c 523.426 520.496 528 512.574 528 504 c 528 402.383 l 611.664
 452.59 l 611.664 452.594 l 619.02 457 628.172 457.148 635.664 452.98 c 
643.16 448.812 647.863 440.961 648 432.387 c 648.141 423.812 643.691 415.816
 636.336 411.406 c 550.656 360 l 636.336 308.594 l 643.691 304.184 648.141
 296.188 648 287.613 c 647.863 279.039 643.16 271.188 635.664 267.02 c 628.172
 262.852 619.02 263 611.664 267.406 c 528 317.617 l h
528 216 m f*
Q Q
showpage
%%Trailer
%%EOF
