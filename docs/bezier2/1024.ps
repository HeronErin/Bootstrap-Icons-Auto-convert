%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 48 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 48 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 48 48 672 672 rectclip
1 0 0 -1 0 768 cm q
0 g
48 120 m 48 100.906 55.586 82.59 69.09 69.09 c 82.59 55.586 100.906 48 
120 48 c 168 48 l 187.094 48 205.41 55.586 218.91 69.09 c 232.414 82.59 
240 100.906 240 120 c 438.434 120 l 445.527 107.711 457.691 99.191 471.668
 96.73 c 485.641 94.266 499.984 98.109 510.855 107.23 c 521.723 116.352 
528 129.812 528 144 c 528 158.188 521.723 171.648 510.855 180.77 c 499.984
 189.891 485.641 193.734 471.668 191.27 c 457.691 188.809 445.527 180.289
 438.434 168 c 341.953 168 l 350.562 176.641 358.305 186.32 365.184 197.039
 c 395.809 244.656 408 310.031 408 384 c 408 479.664 420.336 532.414 442.223
 561.602 c 459.312 584.449 485.184 596.211 528 599.234 c 528 599.23 l 528.203
 580.27 535.879 562.152 549.359 548.816 c 562.84 535.48 581.035 528 600 
528 c 648 528 l 667.094 528 685.41 535.586 698.91 549.09 c 712.414 562.59
 720 580.906 720 600 c 720 648 l 720 667.094 712.414 685.41 698.91 698.91
 c 685.41 712.414 667.094 720 648 720 c 600 720 l 580.906 720 562.59 712.414
 549.09 698.91 c 535.586 685.41 528 667.094 528 648 c 329.566 648 l 322.473
 660.289 310.309 668.809 296.332 671.27 c 282.359 673.734 268.016 669.891
 257.145 660.77 c 246.277 651.648 240 638.188 240 624 c 240 609.812 246.277
 596.352 257.145 587.23 c 268.016 578.109 282.359 574.266 296.332 576.73
 c 310.309 579.191 322.473 587.711 329.566 600 c 411.695 600 l 408.918 596.914
 406.277 593.711 403.777 590.398 c 371.664 547.535 360 480.336 360 384 c
 360 313.922 348.191 259.344 324.816 222.961 c 306.098 193.922 279.121 174.961
 240 169.586 c 239.586 188.402 231.816 206.312 218.359 219.477 c 204.902
 232.637 186.824 240.004 168 240 c 120 240 l 100.906 240 82.59 232.414 69.09
 218.91 c 55.586 205.41 48 187.094 48 168 c h
120 96 m 113.637 96 107.531 98.527 103.031 103.031 c 98.527 107.531 96 
113.637 96 120 c 96 168 l 96 174.363 98.527 180.469 103.031 184.969 c 107.531
 189.473 113.637 192 120 192 c 168 192 l 174.363 192 180.469 189.473 184.969
 184.969 c 189.473 180.469 192 174.363 192 168 c 192 120 l 192 113.637 189.473
 107.531 184.969 103.031 c 180.469 98.527 174.363 96 168 96 c h
600 576 m 593.637 576 587.531 578.527 583.031 583.031 c 578.527 587.531
 576 593.637 576 600 c 576 648 l 576 654.363 578.527 660.469 583.031 664.969
 c 587.531 669.473 593.637 672 600 672 c 648 672 l 654.363 672 660.469 669.473
 664.969 664.969 c 669.473 660.469 672 654.363 672 648 c 672 600 l 672 593.637
 669.473 587.531 664.969 583.031 c 660.469 578.527 654.363 576 648 576 c
 h
600 576 m f*
Q Q
showpage
%%Trailer
%%EOF
