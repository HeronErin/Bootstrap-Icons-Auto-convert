%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
350.785 127.488 m 339.32 112.742 322.07 103.629 303.43 102.473 c 284.785
 101.316 266.543 108.223 253.344 121.441 c 154.078 220.801 l 107.711 267.266
 90.621 333.023 110.879 390.723 c 110.879 390.719 l 195.047 629.48 331.789
 846.277 511.008 1025.09 c 689.816 1204.305 906.613 1341.051 1145.375 1425.215
 c 1203.07 1445.473 1268.832 1428.383 1315.297 1382.016 c 1414.562 1282.75
 l 1414.559 1282.754 l 1427.777 1269.551 1434.684 1251.309 1433.527 1232.668
 c 1432.371 1214.023 1423.258 1196.777 1408.512 1185.312 c 1187.039 1013.09
 l 1171.246 1000.875 1150.734 996.562 1131.359 1001.375 c 921.121 1053.887
 l 893.055 1060.855 863.668 1060.457 835.801 1052.738 c 807.934 1045.02 
782.527 1030.238 762.047 1009.824 c 526.273 773.953 l 505.84 753.48 491.043
 728.082 483.305 700.215 c 475.57 672.348 475.156 642.953 482.113 614.879
 c 534.723 404.641 l 534.719 404.641 l 539.535 385.266 535.219 364.754 523.008
 348.961 c h
180.863 49.055 m 203.328 26.582 231.723 10.965 262.73 4.02 c 293.738 -2.922
 326.082 -0.906 355.984 9.84 c 385.887 20.586 412.117 39.613 431.617 64.703
 c 603.84 286.078 l 635.426 326.688 646.559 379.582 634.078 429.504 c 581.566
 639.742 l 576.086 661.891 582.562 685.297 598.656 701.473 c 834.527 937.344
 l 850.723 953.469 874.172 959.949 896.352 954.434 c 1106.496 901.922 l 
1131.133 895.797 1156.84 895.336 1181.68 900.574 c 1206.52 905.812 1229.852
 916.609 1249.922 932.16 c 1471.297 1104.383 l 1550.883 1166.305 1558.176
 1283.902 1486.945 1355.039 c 1387.68 1454.305 l 1316.641 1525.344 1210.465
 1556.543 1111.488 1521.695 c 858.113 1432.664 628.082 1287.625 438.527 
1097.375 c 248.293 907.848 103.254 677.852 14.207 424.512 c -20.547 325.633
 10.656 219.359 81.695 148.32 c h
180.863 49.055 m f
1070.016 158.016 m 1079.02 148.988 1091.25 143.914 1104 143.914 c 1116.75
 143.914 1128.98 148.988 1137.984 158.016 c 1248 268.129 l 1358.016 158.016
 l 1370.156 145.875 1387.855 141.133 1404.438 145.578 c 1421.023 150.02 
1433.98 162.977 1438.422 179.562 c 1442.867 196.145 1438.125 213.844 1425.984
 225.984 c 1315.871 336 l 1425.984 446.016 l 1438.125 458.156 1442.867 475.855
 1438.422 492.438 c 1433.98 509.023 1421.023 521.98 1404.438 526.422 c 1387.855
 530.867 1370.156 526.125 1358.016 513.984 c 1248 403.871 l 1137.984 513.984
 l 1125.844 526.125 1108.145 530.867 1091.562 526.422 c 1074.977 521.98 
1062.02 509.023 1057.578 492.438 c 1053.133 475.855 1057.875 458.156 1070.016
 446.016 c 1180.129 336 l 1070.016 225.984 l 1060.988 216.98 1055.914 204.75
 1055.914 192 c 1055.914 179.25 1060.988 167.02 1070.016 158.016 c f*
Q Q
showpage
%%Trailer
%%EOF
