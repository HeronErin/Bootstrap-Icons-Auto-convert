%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:30 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 48 m 294.887 48 209.426 83.398 146.414 146.414 c 83.398 209.426 48 
294.887 48 384 c 48 473.113 83.398 558.574 146.414 621.586 c 209.426 684.602
 294.887 720 384 720 c 473.113 720 558.574 684.602 621.586 621.586 c 684.602
 558.574 720 473.113 720 384 c 720 294.887 684.602 209.426 621.586 146.414
 c 558.574 83.398 473.113 48 384 48 c 0 384 m 0 282.156 40.457 184.484 112.473
 112.473 c 184.484 40.457 282.156 0 384 0 c 485.844 0 583.516 40.457 655.527
 112.473 c 727.543 184.484 768 282.156 768 384 c 768 485.844 727.543 583.516
 655.527 655.527 c 583.516 727.543 485.844 768 384 768 c 282.156 768 184.484
 727.543 112.473 655.527 c 40.457 583.516 0 485.844 0 384 c f
408 216 m 408 224.574 403.426 232.496 396 236.785 c 388.574 241.07 379.426
 241.07 372 236.785 c 364.574 232.496 360 224.574 360 216 c 360 207.426 
364.574 199.504 372 195.215 c 379.426 190.93 388.574 190.93 396 195.215 
c 403.426 199.504 408 207.426 408 216 c 408 552 m 408 560.574 403.426 568.496
 396 572.785 c 388.574 577.07 379.426 577.07 372 572.785 c 364.574 568.496
 360 560.574 360 552 c 360 543.426 364.574 535.504 372 531.215 c 379.426
 526.93 388.574 526.93 396 531.215 c 403.426 535.504 408 543.426 408 552
 c 488.785 250.512 m 485.625 256.07 480.379 260.137 474.207 261.812 c 468.039
 263.488 461.457 262.629 455.922 259.434 c 450.383 256.238 446.352 250.965
 444.719 244.785 c 443.082 238.605 443.984 232.027 447.215 226.512 c 451.535
 219.148 459.438 214.633 467.973 214.648 c 476.512 214.668 484.395 219.223
 488.68 226.605 c 492.965 233.988 493.004 243.09 488.785 250.512 c 320.785
 541.488 m 317.625 547.047 312.379 551.113 306.207 552.789 c 300.039 554.461
 293.457 553.605 287.922 550.41 c 282.383 547.215 278.352 541.941 276.719
 535.762 c 275.082 529.578 275.984 523.004 279.215 517.488 c 283.535 510.125
 291.438 505.605 299.973 505.625 c 308.512 505.645 316.395 510.195 320.68
 517.582 c 324.965 524.965 325.004 534.066 320.785 541.488 c 541.488 320.785
 m 535.973 324.016 529.395 324.918 523.215 323.281 c 517.035 321.648 511.762
 317.617 508.566 312.078 c 505.371 306.543 504.512 299.961 506.188 293.793
 c 507.863 287.621 511.93 282.375 517.488 279.215 c 524.91 274.996 534.012
 275.035 541.395 279.32 c 548.777 283.605 553.332 291.488 553.352 300.027
 c 553.367 308.562 548.852 316.465 541.488 320.785 c 250.512 488.785 m 244.996
 492.016 238.422 492.918 232.238 491.281 c 226.059 489.648 220.785 485.617
 217.59 480.078 c 214.395 474.543 213.539 467.961 215.211 461.793 c 216.887
 455.621 220.953 450.375 226.512 447.215 c 233.934 442.996 243.035 443.035
 250.418 447.32 c 257.805 451.605 262.355 459.488 262.375 468.027 c 262.395
 476.562 257.875 484.465 250.512 488.785 c 552 408 m 543.426 408 535.504
 403.426 531.215 396 c 526.93 388.574 526.93 379.426 531.215 372 c 535.504
 364.574 543.426 360 552 360 c 560.574 360 568.496 364.574 572.785 372 c
 577.07 379.426 577.07 388.574 572.785 396 c 568.496 403.426 560.574 408
 552 408 c 216 408 m 207.426 408 199.504 403.426 195.215 396 c 190.93 388.574
 190.93 379.426 195.215 372 c 199.504 364.574 207.426 360 216 360 c 224.574
 360 232.496 364.574 236.785 372 c 241.07 379.426 241.07 388.574 236.785
 396 c 232.496 403.426 224.574 408 216 408 c 517.488 488.785 m 511.93 485.625
 507.863 480.379 506.188 474.207 c 504.512 468.039 505.371 461.457 508.566
 455.922 c 511.762 450.383 517.035 446.352 523.215 444.719 c 529.395 443.082
 535.973 443.984 541.488 447.215 c 548.852 451.535 553.367 459.438 553.352
 467.973 c 553.332 476.512 548.777 484.395 541.395 488.68 c 534.012 492.965
 524.91 493.004 517.488 488.785 c 226.512 320.785 m 220.953 317.625 216.887
 312.379 215.211 306.207 c 213.539 300.039 214.395 293.457 217.59 287.922
 c 220.785 282.383 226.059 278.352 232.238 276.719 c 238.422 275.082 244.996
 275.984 250.512 279.215 c 257.875 283.535 262.395 291.438 262.375 299.973
 c 262.355 308.512 257.805 316.395 250.418 320.68 c 243.035 324.965 233.934
 325.004 226.512 320.785 c 447.215 541.488 m 443.984 535.973 443.082 529.395
 444.719 523.215 c 446.352 517.035 450.383 511.762 455.922 508.566 c 461.457
 505.371 468.039 504.512 474.207 506.188 c 480.379 507.863 485.625 511.93
 488.785 517.488 c 493.004 524.91 492.965 534.012 488.68 541.395 c 484.395
 548.777 476.512 553.332 467.973 553.352 c 459.438 553.367 451.535 548.852
 447.215 541.488 c 279.215 250.512 m 275.984 244.996 275.082 238.422 276.719
 232.238 c 278.352 226.059 282.383 220.785 287.922 217.59 c 293.457 214.395
 300.039 213.539 306.207 215.211 c 312.379 216.887 317.625 220.953 320.785
 226.512 c 325.004 233.934 324.965 243.035 320.68 250.418 c 316.395 257.805
 308.512 262.355 299.973 262.375 c 291.438 262.395 283.535 257.875 279.215
 250.512 c f
Q Q
showpage
%%Trailer
%%EOF
