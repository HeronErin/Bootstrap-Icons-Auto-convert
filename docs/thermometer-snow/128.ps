%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:30 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 0 0 83 96
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 0 0 83 96
96 96 cairo_set_page_size
%%EndPageSetup
q 0 0 83 96 rectclip
1 0 0 -1 0 96 cm q
0 g
30 75 m 30 78.363 28.121 81.445 25.133 82.988 c 22.148 84.535 18.547 84.285
 15.801 82.344 c 13.055 80.398 11.621 77.09 12.086 73.758 c 12.547 70.426
 14.828 67.633 18 66.512 c 18 57 l 18 55.344 19.344 54 21 54 c 22.656 54
 24 55.344 24 57 c 24 66.512 l 27.598 67.781 30.004 71.184 30 75 c f
6 15 m 6 9.641 8.859 4.688 13.5 2.008 c 18.141 -0.668 23.859 -0.668 28.5
 2.008 c 33.141 4.688 36 9.641 36 15 c 36 60.301 l 39.879 64.262 42.039 
69.594 42 75.141 c 41.961 80.684 39.734 85.988 35.797 89.898 c 31.863 93.805
 26.543 95.996 21 95.996 c 15.457 95.996 10.137 93.805 6.203 89.898 c 2.266
 85.988 0.039 80.684 0 75.141 c -0.039 69.594 2.121 64.262 6 60.301 c h
21 6 m 16.031 6 12 10.031 12 15 c 12 62.922 l 10.996 63.82 l 7.961 66.539
 6.16 70.375 6.008 74.445 c 5.855 78.52 7.367 82.477 10.195 85.41 c 13.023
 88.344 16.922 90.004 20.996 90.004 c 25.07 90.004 28.973 88.344 31.801 
85.41 c 34.625 82.477 36.137 78.52 35.988 74.445 c 35.836 70.375 34.035 
66.539 30.996 63.82 c 30 62.914 l 30 15 l 30 10.031 25.969 6 21 6 c 51 12
 m 51.797 12 52.559 12.316 53.121 12.879 c 53.684 13.441 54 14.203 54 15
 c 54 22.758 l 57.875 18.875 l 59.051 17.703 60.949 17.703 62.125 18.875
 c 63.297 20.051 63.297 21.949 62.125 23.125 c 54 31.242 l 54 42.805 l 64.016
 37.027 l 66.984 25.926 l 67.414 24.324 69.062 23.379 70.66 23.809 c 72.262
 24.238 73.211 25.887 72.781 27.484 c 71.359 32.777 l 78.078 28.902 l 79.512
 28.086 81.336 28.582 82.16 30.012 c 82.984 31.438 82.5 33.266 81.078 34.098
 c 74.359 37.973 l 79.664 39.395 l 79.66 39.395 l 81.262 39.828 82.211 41.473
 81.781 43.074 c 81.348 44.676 79.703 45.621 78.102 45.191 c 67.012 42.223
 l 57 48 l 67.016 53.777 l 78.109 50.809 l 78.883 50.586 79.711 50.688 80.41
 51.082 c 81.109 51.48 81.621 52.141 81.828 52.918 c 82.035 53.695 81.922
 54.523 81.516 55.219 c 81.105 55.91 80.438 56.41 79.656 56.605 c 74.359
 58.027 l 81.078 61.902 l 82.5 62.734 82.984 64.562 82.16 65.988 c 81.336
 67.418 79.512 67.914 78.078 67.098 c 71.359 63.223 l 72.781 68.52 l 73 
69.293 72.902 70.125 72.504 70.824 c 72.105 71.523 71.445 72.035 70.668 
72.242 c 69.891 72.449 69.062 72.336 68.371 71.926 c 67.68 71.52 67.18 70.848
 66.984 70.066 c 64.02 58.98 l 54 53.195 l 54 64.758 l 62.125 72.875 l 63.297
 74.051 63.297 75.949 62.125 77.125 c 60.949 78.297 59.051 78.297 57.875
 77.125 c 54 73.242 l 54 81 l 54 82.656 52.656 84 51 84 c 49.344 84 48 82.656
 48 81 c 48 15 l 48 13.344 49.344 12 51 12 c f
Q Q
showpage
%%Trailer
%%EOF
