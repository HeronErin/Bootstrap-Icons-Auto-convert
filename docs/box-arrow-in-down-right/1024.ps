%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 47 48 720 721
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 47 48 720 721
768 768 cairo_set_page_size
%%EndPageSetup
q 47 48 673 673 rectclip
1 0 0 -1 0 768 cm q
0 g
305.473 120 m 305.473 113.637 308 107.531 312.5 103.031 c 317.004 98.527
 323.105 96 329.473 96 c 648 96 l 667.094 96 685.41 103.586 698.91 117.09
 c 712.414 130.59 720 148.906 720 168 c 720 648 l 720 667.094 712.414 685.41
 698.91 698.91 c 685.41 712.414 667.094 720 648 720 c 168 720 l 148.906 
720 130.59 712.414 117.09 698.91 c 103.586 685.41 96 667.094 96 648 c 96
 329.473 l 96 320.898 100.574 312.973 108 308.688 c 115.426 304.398 124.574
 304.398 132 308.688 c 139.426 312.973 144 320.898 144 329.473 c 144 648
 l 144 654.363 146.527 660.469 151.031 664.969 c 155.531 669.473 161.637
 672 168 672 c 648 672 l 654.363 672 660.469 669.473 664.969 664.969 c 669.473
 660.469 672 654.363 672 648 c 672 168 l 672 161.637 669.473 155.531 664.969
 151.031 c 660.469 146.527 654.363 144 648 144 c 329.473 144 l 323.105 144
 317.004 141.473 312.5 136.969 c 308 132.469 305.473 126.363 305.473 120
 c f*
528 504 m 528 510.363 525.473 516.469 520.969 520.969 c 516.469 525.473
 510.363 528 504 528 c 264 528 l 255.426 528 247.504 523.426 243.215 516
 c 238.93 508.574 238.93 499.426 243.215 492 c 247.504 484.574 255.426 480
 264 480 c 446.062 480 l 55.008 88.992 l 48.938 82.922 46.566 74.074 48.789
 65.781 c 51.012 57.488 57.488 51.012 65.781 48.789 c 74.074 46.566 82.922
 48.938 88.992 55.008 c 480 446.062 l 480 264 l 480 255.426 484.574 247.504
 492 243.215 c 499.426 238.93 508.574 238.93 516 243.215 c 523.426 247.504
 528 255.426 528 264 c h
528 504 m f*
Q Q
showpage
%%Trailer
%%EOF
