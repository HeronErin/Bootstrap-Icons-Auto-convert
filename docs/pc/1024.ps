%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:46 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 192 0 576 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 192 0 576 768
768 768 cairo_set_page_size
%%EndPageSetup
q 192 0 384 768 rectclip
1 0 0 -1 0 768 cm q
0 g
240 0 m 227.27 0 215.062 5.059 206.059 14.059 c 197.059 23.062 192 35.27
 192 48 c 192 720 l 192 732.73 197.059 744.938 206.059 753.941 c 215.062
 762.941 227.27 768 240 768 c 528 768 l 540.73 768 552.938 762.941 561.941
 753.941 c 570.941 744.938 576 732.73 576 720 c 576 48 l 576 35.27 570.941
 23.062 561.941 14.059 c 552.938 5.059 540.73 0 528 0 c h
264 672 m 272.574 672 280.496 676.574 284.785 684 c 289.07 691.426 289.07
 700.574 284.785 708 c 280.496 715.426 272.574 720 264 720 c 255.426 720
 247.504 715.426 243.215 708 c 238.93 700.574 238.93 691.426 243.215 684
 c 247.504 676.574 255.426 672 264 672 c 360 672 m 368.574 672 376.496 676.574
 380.785 684 c 385.07 691.426 385.07 700.574 380.785 708 c 376.496 715.426
 368.574 720 360 720 c 351.426 720 343.504 715.426 339.215 708 c 334.93 
700.574 334.93 691.426 339.215 684 c 343.504 676.574 351.426 672 360 672
 c 240 72 m 240 65.637 242.527 59.531 247.031 55.031 c 251.531 50.527 257.637
 48 264 48 c 504 48 l 512.574 48 520.496 52.574 524.785 60 c 529.07 67.426
 529.07 76.574 524.785 84 c 520.496 91.426 512.574 96 504 96 c 264 96 l 
257.637 96 251.531 93.473 247.031 88.969 c 242.527 84.469 240 78.363 240
 72 c 264 144 m 504 144 l 512.574 144 520.496 148.574 524.785 156 c 529.07
 163.426 529.07 172.574 524.785 180 c 520.496 187.426 512.574 192 504 192
 c 264 192 l 255.426 192 247.504 187.426 243.215 180 c 238.93 172.574 238.93
 163.426 243.215 156 c 247.504 148.574 255.426 144 264 144 c f
Q Q
showpage
%%Trailer
%%EOF
