%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:07 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 0 720 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 0 720 768
768 768 cairo_set_page_size
%%EndPageSetup
q 48 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
240 528 m 240 545.148 230.852 560.996 216 569.57 c 201.148 578.145 182.852
 578.145 168 569.57 c 153.148 560.996 144 545.148 144 528 c 144 510.852 
153.148 495.004 168 486.43 c 182.852 477.855 201.148 477.855 216 486.43 
c 230.852 495.004 240 510.852 240 528 c 624 528 m 624 545.148 614.852 560.996
 600 569.57 c 585.148 578.145 566.852 578.145 552 569.57 c 537.148 560.996
 528 545.148 528 528 c 528 510.852 537.148 495.004 552 486.43 c 566.852 
477.855 585.148 477.855 600 486.43 c 614.852 495.004 624 510.852 624 528
 c 336 480 m 318.852 480 303.004 489.148 294.43 504 c 285.855 518.852 285.855
 537.148 294.43 552 c 303.004 566.852 318.852 576 336 576 c 432 576 l 449.148
 576 464.996 566.852 473.57 552 c 482.145 537.148 482.145 518.852 473.57
 504 c 464.996 489.148 449.148 480 432 480 c h
192 96 m 179.27 96 167.062 101.059 158.059 110.059 c 149.059 119.062 144
 131.27 144 144 c 144 331.199 l 144 361.199 170.977 383.613 200.16 378.91
 c 243.602 371.855 326.016 360 384 360 c 441.984 360 524.398 371.855 567.84
 378.91 c 581.84 381.191 596.133 377.215 606.941 368.031 c 617.75 358.848
 623.988 345.383 624 331.199 c 624 144 l 624 131.27 618.941 119.062 609.941
 110.059 c 600.938 101.059 588.73 96 576 96 c h
192 144 m 576 144 l 576 331.199 l 576 331.262 576 331.262 576 331.199 c
 575.902 331.391 l 575.664 331.488 l 575.473 331.488 l 532.223 324.527 446.352
 312 384 312 c 321.648 312 235.777 324.48 192.48 331.488 c 192.336 331.488
 l 192.098 331.391 l 192 331.199 l 192 331.262 192 331.262 192 331.199 c
 h
192 144 m f
48 120 m 48 88.176 60.645 57.652 83.148 35.148 c 105.652 12.645 136.176
 0 168 0 c 600 0 l 631.824 0 662.348 12.645 684.852 35.148 c 707.355 57.652
 720 88.176 720 120 c 720 552 l 720 591.266 701.137 626.113 672 648 c 672
 744 l 672 750.363 669.473 756.469 664.969 760.969 c 660.469 765.473 654.363
 768 648 768 c 552 768 l 545.637 768 539.531 765.473 535.031 760.969 c 530.527
 756.469 528 750.363 528 744 c 528 672 l 240 672 l 240 744 l 240 750.363
 237.473 756.469 232.969 760.969 c 228.469 765.473 222.363 768 216 768 c
 120 768 l 113.637 768 107.531 765.473 103.031 760.969 c 98.527 756.469 
96 750.363 96 744 c 96 648 l 65.785 625.336 48 589.77 48 552 c h
168 48 m 148.906 48 130.59 55.586 117.09 69.09 c 103.586 82.59 96 100.906
 96 120 c 96 552 l 96 571.094 103.586 589.41 117.09 602.91 c 130.59 616.414
 148.906 624 168 624 c 600 624 l 619.094 624 637.41 616.414 650.91 602.91
 c 664.414 589.41 672 571.094 672 552 c 672 120 l 672 100.906 664.414 82.59
 650.91 69.09 c 637.41 55.586 619.094 48 600 48 c h
168 48 m f
Q Q
showpage
%%Trailer
%%EOF
