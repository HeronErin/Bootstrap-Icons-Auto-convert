%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 24 0 360 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 24 0 360 384
384 384 cairo_set_page_size
%%EndPageSetup
q 24 0 336 384 rectclip
1 0 0 -1 0 384 cm q
0 g
120 264 m 120 272.574 115.426 280.496 108 284.785 c 100.574 289.07 91.426
 289.07 84 284.785 c 76.574 280.496 72 272.574 72 264 c 72 255.426 76.574
 247.504 84 243.215 c 91.426 238.93 100.574 238.93 108 243.215 c 115.426
 247.504 120 255.426 120 264 c 312 264 m 312 272.574 307.426 280.496 300
 284.785 c 292.574 289.07 283.426 289.07 276 284.785 c 268.574 280.496 264
 272.574 264 264 c 264 255.426 268.574 247.504 276 243.215 c 283.426 238.93
 292.574 238.93 300 243.215 c 307.426 247.504 312 255.426 312 264 c 168 
240 m 159.426 240 151.504 244.574 147.215 252 c 142.93 259.426 142.93 268.574
 147.215 276 c 151.504 283.426 159.426 288 168 288 c 216 288 l 224.574 288
 232.496 283.426 236.785 276 c 241.07 268.574 241.07 259.426 236.785 252
 c 232.496 244.574 224.574 240 216 240 c h
96 48 m 89.637 48 83.531 50.527 79.031 55.031 c 74.527 59.531 72 65.637
 72 72 c 72 165.602 l 72 180.602 85.488 191.809 100.078 189.457 c 121.801
 185.93 163.008 180 192 180 c 220.992 180 262.199 185.93 283.922 189.457
 c 290.918 190.598 298.066 188.605 303.473 184.016 c 308.875 179.422 311.992
 172.691 312 165.602 c 312 72 l 312 65.637 309.473 59.531 304.969 55.031
 c 300.469 50.527 294.363 48 288 48 c h
96 72 m 288 72 l 288 165.602 l 288 165.633 288 165.633 288 165.602 c 287.953
 165.699 l 287.832 165.746 l 287.734 165.746 l 266.113 162.266 223.176 156
 192 156 c 160.824 156 117.887 162.238 96.238 165.742 c 96.168 165.742 l
 96.047 165.695 l 96 165.602 l 96 165.633 96 165.633 96 165.602 c h
96 72 m f
24 60 m 24 44.086 30.32 28.824 41.574 17.574 c 52.824 6.32 68.086 0 84 
0 c 300 0 l 315.914 0 331.176 6.32 342.426 17.574 c 353.68 28.824 360 44.086
 360 60 c 360 276 l 360 295.633 350.566 313.055 336 324 c 336 372 l 336 
375.184 334.734 378.234 332.484 380.484 c 330.234 382.734 327.184 384 324
 384 c 276 384 l 269.371 384 264 378.629 264 372 c 264 336 l 120 336 l 120
 372 l 120 375.184 118.734 378.234 116.484 380.484 c 114.234 382.734 111.184
 384 108 384 c 60 384 l 53.371 384 48 378.629 48 372 c 48 324 l 32.891 312.668
 24 294.887 24 276 c h
84 24 m 74.453 24 65.297 27.793 58.543 34.543 c 51.793 41.297 48 50.453
 48 60 c 48 276 l 48 285.547 51.793 294.703 58.543 301.457 c 65.297 308.207
 74.453 312 84 312 c 300 312 l 309.547 312 318.703 308.207 325.457 301.457
 c 332.207 294.703 336 285.547 336 276 c 336 60 l 336 50.453 332.207 41.297
 325.457 34.543 c 318.703 27.793 309.547 24 300 24 c h
84 24 m f
Q Q
showpage
%%Trailer
%%EOF
