%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:31 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 47 167 720 673
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 47 167 720 673
768 768 cairo_set_page_size
%%EndPageSetup
q 47 167 673 506 rectclip
1 0 0 -1 0 768 cm q
0 g
240 552 m 240 545.637 242.527 539.531 247.031 535.031 c 251.531 530.527
 257.637 528 264 528 c 696 528 l 704.574 528 712.496 532.574 716.785 540
 c 721.07 547.426 721.07 556.574 716.785 564 c 712.496 571.426 704.574 576
 696 576 c 264 576 l 257.637 576 251.531 573.473 247.031 568.969 c 242.527
 564.469 240 558.363 240 552 c 240 360 m 240 353.637 242.527 347.531 247.031
 343.031 c 251.531 338.527 257.637 336 264 336 c 696 336 l 704.574 336 712.496
 340.574 716.785 348 c 721.07 355.426 721.07 364.574 716.785 372 c 712.496
 379.426 704.574 384 696 384 c 264 384 l 257.637 384 251.531 381.473 247.031
 376.969 c 242.527 372.469 240 366.363 240 360 c 240 168 m 240 161.637 242.527
 155.531 247.031 151.031 c 251.531 146.527 257.637 144 264 144 c 696 144
 l 704.574 144 712.496 148.574 716.785 156 c 721.07 163.426 721.07 172.574
 716.785 180 c 712.496 187.426 704.574 192 696 192 c 264 192 l 257.637 192
 251.531 189.473 247.031 184.969 c 242.527 180.469 240 174.363 240 168 c
 184.992 103.008 m 189.508 107.512 192.043 113.625 192.043 120 c 192.043
 126.375 189.508 132.488 184.992 136.992 c 112.992 208.992 l 108.488 213.508
 102.375 216.043 96 216.043 c 89.625 216.043 83.512 213.508 79.008 208.992
 c 55.008 184.992 l 48.938 178.922 46.566 170.074 48.789 161.781 c 51.012
 153.488 57.488 147.012 65.781 144.789 c 74.074 142.566 82.922 144.938 88.992
 151.008 c 96 158.062 l 151.008 103.008 l 155.512 98.492 161.625 95.957 
168 95.957 c 174.375 95.957 180.488 98.492 184.992 103.008 c 184.992 295.008
 m 189.508 299.512 192.043 305.625 192.043 312 c 192.043 318.375 189.508
 324.488 184.992 328.992 c 112.992 400.992 l 108.488 405.508 102.375 408.043
 96 408.043 c 89.625 408.043 83.512 405.508 79.008 400.992 c 55.008 376.992
 l 48.938 370.922 46.566 362.074 48.789 353.781 c 51.012 345.488 57.488 
339.012 65.781 336.789 c 74.074 334.566 82.922 336.938 88.992 343.008 c 
96 350.062 l 151.008 295.008 l 155.512 290.492 161.625 287.957 168 287.957
 c 174.375 287.957 180.488 290.492 184.992 295.008 c 184.992 487.008 m 189.508
 491.512 192.043 497.625 192.043 504 c 192.043 510.375 189.508 516.488 184.992
 520.992 c 112.992 592.992 l 108.488 597.508 102.375 600.043 96 600.043 
c 89.625 600.043 83.512 597.508 79.008 592.992 c 55.008 568.992 l 48.938
 562.922 46.566 554.074 48.789 545.781 c 51.012 537.488 57.488 531.012 65.781
 528.789 c 74.074 526.566 82.922 528.938 88.992 535.008 c 96 542.062 l 151.008
 487.008 l 155.512 482.492 161.625 479.957 168 479.957 c 174.375 479.957
 180.488 482.492 184.992 487.008 c f*
Q Q
showpage
%%Trailer
%%EOF
