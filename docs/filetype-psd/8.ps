%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 2x2mm 6 6 0 () ()
%%BoundingBox: 0 0 6 6
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 2x2mm
%%PageBoundingBox: 0 0 6 6
6 6 cairo_set_page_size
%%EndPageSetup
q 0 0 6 6 rectclip
1 0 0 -1 0 6 cm q
0 g
5.25 1.688 m 5.25 5.25 l 5.25 5.449 5.172 5.641 5.031 5.781 c 4.891 5.922
 4.699 6 4.5 6 c 4.312 6 l 4.312 5.625 l 4.5 5.625 l 4.598 5.625 4.695 5.586
 4.766 5.516 c 4.836 5.445 4.875 5.348 4.875 5.25 c 4.875 1.688 l 4.125 
1.688 l 3.812 1.688 3.562 1.438 3.562 1.125 c 3.562 0.375 l 1.5 0.375 l 
1.293 0.375 1.125 0.543 1.125 0.75 c 1.125 4.125 l 0.75 4.125 l 0.75 0.75
 l 0.75 0.336 1.086 0 1.5 0 c 3.562 0 l h
1.168 5.566 m 1.172 5.684 1.227 5.797 1.32 5.875 c 1.367 5.914 1.43 5.945
 1.5 5.969 c 1.57 5.992 1.652 6.004 1.75 6.004 c 1.875 6.004 1.984 5.984
 2.07 5.945 c 2.16 5.906 2.227 5.852 2.273 5.781 c 2.273 5.777 l 2.32 5.707
 2.344 5.621 2.344 5.531 c 2.344 5.445 2.328 5.379 2.293 5.32 c 2.293 5.324
 l 2.258 5.266 2.207 5.219 2.152 5.188 c 2.086 5.152 2.012 5.125 1.938 5.109
 c 1.703 5.055 l 1.707 5.055 l 1.652 5.047 1.598 5.023 1.555 4.988 c 1.52
 4.965 1.5 4.922 1.5 4.879 c 1.5 4.82 1.523 4.773 1.57 4.734 c 1.617 4.695
 1.68 4.676 1.762 4.676 c 1.816 4.676 1.863 4.684 1.902 4.703 c 1.938 4.715
 1.969 4.738 1.992 4.77 c 2.016 4.797 2.031 4.832 2.039 4.867 c 2.32 4.867
 l 2.312 4.789 2.289 4.719 2.242 4.656 c 2.195 4.586 2.133 4.535 2.055 4.5
 c 1.965 4.461 1.863 4.441 1.766 4.445 c 1.656 4.445 1.559 4.465 1.477 4.5
 c 1.391 4.539 1.328 4.59 1.277 4.656 c 1.23 4.723 1.207 4.805 1.207 4.895
 c 1.207 4.969 1.223 5.035 1.254 5.09 c 1.285 5.145 1.328 5.191 1.387 5.227
 c 1.445 5.262 1.512 5.289 1.59 5.305 c 1.82 5.359 l 1.898 5.379 1.957 5.402
 1.992 5.434 c 1.988 5.438 l 2.027 5.469 2.047 5.512 2.047 5.559 c 2.047
 5.598 2.035 5.637 2.016 5.668 c 1.992 5.703 1.957 5.727 1.918 5.742 c 1.875
 5.758 1.824 5.77 1.762 5.77 c 1.719 5.77 1.676 5.766 1.641 5.754 c 1.645
 5.754 l 1.609 5.742 1.578 5.73 1.551 5.711 c 1.5 5.676 1.465 5.625 1.457
 5.566 c h
0.602 4.473 m 0 4.473 l 0 5.973 l 0.297 5.973 l 0.297 5.469 l 0.598 5.469
 l 0.707 5.469 0.797 5.445 0.871 5.402 c 0.949 5.359 1.004 5.301 1.043 5.223
 c 1.047 5.227 l 1.086 5.148 1.109 5.062 1.105 4.973 c 1.105 4.879 1.086
 4.793 1.047 4.719 c 1.008 4.645 0.949 4.582 0.875 4.543 c 0.801 4.496 0.707
 4.477 0.602 4.477 c 0.805 4.977 m 0.805 4.973 l 0.805 5.023 0.793 5.074
 0.773 5.117 c 0.754 5.156 0.723 5.188 0.684 5.207 c 0.641 5.23 0.59 5.238
 0.543 5.238 c 0.297 5.238 l 0.297 4.711 l 0.543 4.711 l 0.625 4.711 0.688
 4.734 0.734 4.777 c 0.781 4.824 0.805 4.887 0.805 4.973 c 2.531 5.973 m
 2.531 4.473 l 3.078 4.473 l 3.23 4.473 3.355 4.5 3.453 4.559 c 3.551 4.617
 3.625 4.703 3.676 4.812 c 3.723 4.922 3.75 5.059 3.75 5.215 c 3.75 5.375
 3.727 5.508 3.676 5.621 c 3.625 5.734 3.551 5.82 3.453 5.879 c 3.355 5.938
 3.23 5.969 3.078 5.969 c h
3.039 4.715 m 2.828 4.715 l 2.828 5.73 l 3.039 5.73 l 3.109 5.73 3.168 
5.719 3.219 5.699 c 3.223 5.699 l 3.27 5.68 3.312 5.648 3.348 5.605 c 3.383
 5.559 3.406 5.504 3.422 5.449 c 3.438 5.387 3.445 5.312 3.445 5.227 c 3.449
 5.129 3.434 5.035 3.402 4.945 c 3.379 4.875 3.332 4.812 3.27 4.773 c 3.211
 4.734 3.133 4.715 3.043 4.715 c f*
Q Q
showpage
%%Trailer
%%EOF
