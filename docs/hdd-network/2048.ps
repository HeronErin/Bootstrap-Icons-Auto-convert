%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:19 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
432 480 m 449.148 480 464.996 470.852 473.57 456 c 482.145 441.148 482.145
 422.852 473.57 408 c 464.996 393.148 449.148 384 432 384 c 414.852 384 
399.004 393.148 390.43 408 c 381.855 422.852 381.855 441.148 390.43 456 
c 399.004 470.852 414.852 480 432 480 c 288 432 m 288 449.148 278.852 464.996
 264 473.57 c 249.148 482.145 230.852 482.145 216 473.57 c 201.148 464.996
 192 449.148 192 432 c 192 414.852 201.148 399.004 216 390.43 c 230.852 
381.855 249.148 381.855 264 390.43 c 278.852 399.004 288 414.852 288 432
 c f
0 384 m 0 333.078 20.227 284.242 56.234 248.234 c 92.242 212.227 141.078
 192 192 192 c 1344 192 l 1377.703 192 1410.812 200.871 1440 217.723 c 1469.188
 234.574 1493.426 258.812 1510.277 288 c 1527.129 317.188 1536 350.297 1536
 384 c 1536 480 l 1536 513.703 1527.129 546.812 1510.277 576 c 1493.426 
605.188 1469.188 629.426 1440 646.277 c 1410.812 663.129 1377.703 672 1344
 672 c 816 672 l 816 960 l 854.191 960 890.816 975.172 917.824 1002.176 
c 944.828 1029.184 960 1065.809 960 1104 c 1488 1104 l 1505.148 1104 1520.996
 1113.148 1529.57 1128 c 1538.145 1142.852 1538.145 1161.148 1529.57 1176
 c 1520.996 1190.852 1505.148 1200 1488 1200 c 960 1200 l 960 1238.191 944.828
 1274.816 917.824 1301.824 c 890.816 1328.828 854.191 1344 816 1344 c 720
 1344 l 681.809 1344 645.184 1328.828 618.176 1301.824 c 591.172 1274.816
 576 1238.191 576 1200 c 48 1200 l 30.852 1200 15.004 1190.852 6.43 1176
 c -2.145 1161.148 -2.145 1142.852 6.43 1128 c 15.004 1113.148 30.852 1104
 48 1104 c 576 1104 l 576 1065.809 591.172 1029.184 618.176 1002.176 c 645.184
 975.172 681.809 960 720 960 c 720 672 l 192 672 l 141.078 672 92.242 651.773
 56.234 615.766 c 20.227 579.758 0 530.922 0 480 c h
96 384 m 96 480 l 96 505.461 106.113 529.879 124.117 547.883 c 142.121 
565.887 166.539 576 192 576 c 1344 576 l 1369.461 576 1393.879 565.887 1411.883
 547.883 c 1429.887 529.879 1440 505.461 1440 480 c 1440 384 l 1440 358.539
 1429.887 334.121 1411.883 316.117 c 1393.879 298.113 1369.461 288 1344 
288 c 192 288 l 166.539 288 142.121 298.113 124.117 316.117 c 106.113 334.121
 96 358.539 96 384 c 672 1104 m 672 1200 l 672 1212.73 677.059 1224.938 
686.059 1233.941 c 695.062 1242.941 707.27 1248 720 1248 c 816 1248 l 828.73
 1248 840.938 1242.941 849.941 1233.941 c 858.941 1224.938 864 1212.73 864
 1200 c 864 1104 l 864 1091.27 858.941 1079.062 849.941 1070.059 c 840.938
 1061.059 828.73 1056 816 1056 c 720 1056 l 707.27 1056 695.062 1061.059
 686.059 1070.059 c 677.059 1079.062 672 1091.27 672 1104 c f
Q Q
showpage
%%Trailer
%%EOF
