%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:17 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
216 240 m 224.574 240 232.496 235.426 236.785 228 c 241.07 220.574 241.07
 211.426 236.785 204 c 232.496 196.574 224.574 192 216 192 c 207.426 192
 199.504 196.574 195.215 204 c 190.93 211.426 190.93 220.574 195.215 228
 c 199.504 235.426 207.426 240 216 240 c 144 216 m 144 224.574 139.426 232.496
 132 236.785 c 124.574 241.07 115.426 241.07 108 236.785 c 100.574 232.496
 96 224.574 96 216 c 96 207.426 100.574 199.504 108 195.215 c 115.426 190.93
 124.574 190.93 132 195.215 c 139.426 199.504 144 207.426 144 216 c f
0 192 m 0 166.539 10.113 142.121 28.117 124.117 c 46.121 106.113 70.539
 96 96 96 c 672 96 l 697.461 96 721.879 106.113 739.883 124.117 c 757.887
 142.121 768 166.539 768 192 c 768 240 l 768 265.461 757.887 289.879 739.883
 307.883 c 721.879 325.887 697.461 336 672 336 c 408 336 l 408 480 l 427.094
 480 445.41 487.586 458.91 501.09 c 472.414 514.59 480 532.906 480 552 c
 744 552 l 752.574 552 760.496 556.574 764.785 564 c 769.07 571.426 769.07
 580.574 764.785 588 c 760.496 595.426 752.574 600 744 600 c 480 600 l 480
 619.094 472.414 637.41 458.91 650.91 c 445.41 664.414 427.094 672 408 672
 c 360 672 l 340.906 672 322.59 664.414 309.09 650.91 c 295.586 637.41 288
 619.094 288 600 c 24 600 l 15.426 600 7.504 595.426 3.215 588 c -1.07 580.574
 -1.07 571.426 3.215 564 c 7.504 556.574 15.426 552 24 552 c 288 552 l 288
 532.906 295.586 514.59 309.09 501.09 c 322.59 487.586 340.906 480 360 480
 c 360 336 l 96 336 l 70.539 336 46.121 325.887 28.117 307.883 c 10.113 
289.879 0 265.461 0 240 c h
48 192 m 48 240 l 48 252.73 53.059 264.938 62.059 273.941 c 71.062 282.941
 83.27 288 96 288 c 672 288 l 684.73 288 696.938 282.941 705.941 273.941
 c 714.941 264.938 720 252.73 720 240 c 720 192 l 720 179.27 714.941 167.062
 705.941 158.059 c 696.938 149.059 684.73 144 672 144 c 96 144 l 83.27 144
 71.062 149.059 62.059 158.059 c 53.059 167.062 48 179.27 48 192 c 336 552
 m 336 600 l 336 606.363 338.527 612.469 343.031 616.969 c 347.531 621.473
 353.637 624 360 624 c 408 624 l 414.363 624 420.469 621.473 424.969 616.969
 c 429.473 612.469 432 606.363 432 600 c 432 552 l 432 545.637 429.473 539.531
 424.969 535.031 c 420.469 530.527 414.363 528 408 528 c 360 528 l 353.637
 528 347.531 530.527 343.031 535.031 c 338.527 539.531 336 545.637 336 552
 c f
Q Q
showpage
%%Trailer
%%EOF
