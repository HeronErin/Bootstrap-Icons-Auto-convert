%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 144 720 624
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 144 720 624
768 768 cairo_set_page_size
%%EndPageSetup
q 48 144 672 480 rectclip
1 0 0 -1 0 768 cm q
0 g
48 168 m 48 161.637 50.527 155.531 55.031 151.031 c 59.531 146.527 65.637
 144 72 144 c 696 144 l 702.363 144 708.469 146.527 712.969 151.031 c 717.473
 155.531 720 161.637 720 168 c 720 216 l 720 222.363 717.473 228.469 712.969
 232.969 c 708.469 237.473 702.363 240 696 240 c 72 240 l 65.637 240 59.531
 237.473 55.031 232.969 c 50.527 228.469 48 222.363 48 216 c h
48 360 m 48 353.637 50.527 347.531 55.031 343.031 c 59.531 338.527 65.637
 336 72 336 c 312 336 l 318.363 336 324.469 338.527 328.969 343.031 c 333.473
 347.531 336 353.637 336 360 c 336 408 l 336 414.363 333.473 420.469 328.969
 424.969 c 324.469 429.473 318.363 432 312 432 c 72 432 l 65.637 432 59.531
 429.473 55.031 424.969 c 50.527 420.469 48 414.363 48 408 c h
48 552 m 48 545.637 50.527 539.531 55.031 535.031 c 59.531 530.527 65.637
 528 72 528 c 120 528 l 126.363 528 132.469 530.527 136.969 535.031 c 141.473
 539.531 144 545.637 144 552 c 144 600 l 144 606.363 141.473 612.469 136.969
 616.969 c 132.469 621.473 126.363 624 120 624 c 72 624 l 65.637 624 59.531
 621.473 55.031 616.969 c 50.527 612.469 48 606.363 48 600 c h
432 552 m 432 545.637 434.527 539.531 439.031 535.031 c 443.531 530.527
 449.637 528 456 528 c 504 528 l 510.363 528 516.469 530.527 520.969 535.031
 c 525.473 539.531 528 545.637 528 552 c 528 600 l 528 606.363 525.473 612.469
 520.969 616.969 c 516.469 621.473 510.363 624 504 624 c 456 624 l 449.637
 624 443.531 621.473 439.031 616.969 c 434.527 612.469 432 606.363 432 600
 c h
240 552 m 240 545.637 242.527 539.531 247.031 535.031 c 251.531 530.527
 257.637 528 264 528 c 312 528 l 318.363 528 324.469 530.527 328.969 535.031
 c 333.473 539.531 336 545.637 336 552 c 336 600 l 336 606.363 333.473 612.469
 328.969 616.969 c 324.469 621.473 318.363 624 312 624 c 264 624 l 257.637
 624 251.531 621.473 247.031 616.969 c 242.527 612.469 240 606.363 240 600
 c h
624 552 m 624 545.637 626.527 539.531 631.031 535.031 c 635.531 530.527
 641.637 528 648 528 c 696 528 l 702.363 528 708.469 530.527 712.969 535.031
 c 717.473 539.531 720 545.637 720 552 c 720 600 l 720 606.363 717.473 612.469
 712.969 616.969 c 708.469 621.473 702.363 624 696 624 c 648 624 l 641.637
 624 635.531 621.473 631.031 616.969 c 626.527 612.469 624 606.363 624 600
 c h
432 360 m 432 353.637 434.527 347.531 439.031 343.031 c 443.531 338.527
 449.637 336 456 336 c 696 336 l 702.363 336 708.469 338.527 712.969 343.031
 c 717.473 347.531 720 353.637 720 360 c 720 408 l 720 414.363 717.473 420.469
 712.969 424.969 c 708.469 429.473 702.363 432 696 432 c 456 432 l 449.637
 432 443.531 429.473 439.031 424.969 c 434.527 420.469 432 414.363 432 408
 c h
432 360 m f
Q Q
showpage
%%Trailer
%%EOF
