%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:04 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 768 m 417.703 768 450.812 759.129 480 742.277 c 509.188 725.426 533.426
 701.188 550.277 672 c 567.129 642.812 576 609.703 576 576 c 626.922 576
 675.758 555.773 711.766 519.766 c 747.773 483.758 768 434.922 768 384 c
 768 333.078 747.773 284.242 711.766 248.234 c 675.758 212.227 626.922 192
 576 192 c 576 141.078 555.773 92.242 519.766 56.234 c 483.758 20.227 434.922
 0 384 0 c 333.078 0 284.242 20.227 248.234 56.234 c 212.227 92.242 192 
141.078 192 192 c 141.078 192 92.242 212.227 56.234 248.234 c 20.227 284.242
 0 333.078 0 384 c 0 434.922 20.227 483.758 56.234 519.766 c 92.242 555.773
 141.078 576 192 576 c 192 609.703 200.871 642.812 217.723 672 c 234.574
 701.188 258.812 725.426 288 742.277 c 317.188 759.129 350.297 768 384 768
 c 528 192 m 528 195.52 527.52 199.473 526.559 203.855 c 500.445 215.422
 474.191 234.48 449.855 255.887 c 429.48 245.43 406.902 239.984 384 240 
c 360.289 240 337.922 245.762 318.145 255.887 c 293.809 234.48 267.551 215.422
 241.488 203.855 c 240.5 199.98 240 196 240 192 c 240 140.555 267.445 93.016
 312 67.293 c 356.555 41.57 411.445 41.57 456 67.293 c 500.555 93.016 528
 140.555 528 192 c 489.023 482.496 m 514.059 455.809 527.996 420.59 528 
384 c 527.996 347.41 514.059 312.191 489.023 285.504 c 499.344 276.863 509.758
 268.895 520.078 262.129 c 544.32 246.289 563.137 240 576 240 c 627.445 
240 674.984 267.445 700.707 312 c 726.43 356.555 726.43 411.445 700.707 
456 c 674.984 500.555 627.445 528 576 528 c 563.137 528 544.32 521.762 520.078
 505.871 c 509.285 498.688 498.918 490.879 489.023 482.496 c 318.145 512.113
 m 359.477 533.367 408.523 533.367 449.855 512.113 c 474.191 533.52 500.449
 552.527 526.559 564.145 c 527.52 568.527 528 572.48 528 576 c 528 627.445
 500.555 674.984 456 700.707 c 411.445 726.43 356.555 726.43 312 700.707
 c 267.445 674.984 240 627.445 240 576 c 240 572.48 240.48 568.527 241.441
 564.145 c 267.555 552.527 293.809 533.52 318.145 512.113 c 278.977 285.504
 m 253.941 312.191 240.004 347.41 240 384 c 240 422.113 254.785 456.77 278.977
 482.496 c 269.082 490.879 258.715 498.688 247.922 505.871 c 223.68 521.711
 204.863 528 192 528 c 140.555 528 93.016 500.555 67.293 456 c 41.57 411.445
 41.57 356.555 67.293 312 c 93.016 267.445 140.555 240 192 240 c 204.863
 240 223.68 246.238 247.922 262.129 c 258.242 268.898 268.656 276.816 278.977
 285.504 c 384 432 m 366.852 432 351.004 422.852 342.43 408 c 333.855 393.148
 333.855 374.852 342.43 360 c 351.004 345.148 366.852 336 384 336 c 401.148
 336 416.996 345.148 425.57 360 c 434.145 374.852 434.145 393.148 425.57
 408 c 416.996 422.852 401.148 432 384 432 c f
Q Q
showpage
%%Trailer
%%EOF
