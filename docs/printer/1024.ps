%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
120 384 m 128.574 384 136.496 379.426 140.785 372 c 145.07 364.574 145.07
 355.426 140.785 348 c 136.496 340.574 128.574 336 120 336 c 111.426 336
 103.504 340.574 99.215 348 c 94.93 355.426 94.93 364.574 99.215 372 c 103.504
 379.426 111.426 384 120 384 c f
240 48 m 214.539 48 190.121 58.113 172.117 76.117 c 154.113 94.121 144 
118.539 144 144 c 144 240 l 96 240 l 70.539 240 46.121 250.113 28.117 268.117
 c 10.113 286.121 0 310.539 0 336 c 0 480 l 0 505.461 10.113 529.879 28.117
 547.883 c 46.121 565.887 70.539 576 96 576 c 144 576 l 144 624 l 144 649.461
 154.113 673.879 172.117 691.883 c 190.121 709.887 214.539 720 240 720 c
 528 720 l 553.461 720 577.879 709.887 595.883 691.883 c 613.887 673.879
 624 649.461 624 624 c 624 576 l 672 576 l 697.461 576 721.879 565.887 739.883
 547.883 c 757.887 529.879 768 505.461 768 480 c 768 336 l 768 310.539 757.887
 286.121 739.883 268.117 c 721.879 250.113 697.461 240 672 240 c 624 240
 l 624 144 l 624 118.539 613.887 94.121 595.883 76.117 c 577.879 58.113 
553.461 48 528 48 c h
192 144 m 192 131.27 197.059 119.062 206.059 110.059 c 215.062 101.059 
227.27 96 240 96 c 528 96 l 540.73 96 552.938 101.059 561.941 110.059 c 
570.941 119.062 576 131.27 576 144 c 576 240 l 192 240 l h
240 384 m 214.539 384 190.121 394.113 172.117 412.117 c 154.113 430.121
 144 454.539 144 480 c 144 528 l 96 528 l 83.27 528 71.062 522.941 62.059
 513.941 c 53.059 504.938 48 492.73 48 480 c 48 336 l 48 323.27 53.059 311.062
 62.059 302.059 c 71.062 293.059 83.27 288 96 288 c 672 288 l 684.73 288
 696.938 293.059 705.941 302.059 c 714.941 311.062 720 323.27 720 336 c 
720 480 l 720 492.73 714.941 504.938 705.941 513.941 c 696.938 522.941 684.73
 528 672 528 c 624 528 l 624 480 l 624 454.539 613.887 430.121 595.883 412.117
 c 577.879 394.113 553.461 384 528 384 c h
576 480 m 576 624 l 576 636.73 570.941 648.938 561.941 657.941 c 552.938
 666.941 540.73 672 528 672 c 240 672 l 227.27 672 215.062 666.941 206.059
 657.941 c 197.059 648.938 192 636.73 192 624 c 192 480 l 192 467.27 197.059
 455.062 206.059 446.059 c 215.062 437.059 227.27 432 240 432 c 528 432 
l 540.73 432 552.938 437.059 561.941 446.059 c 570.941 455.062 576 467.27
 576 480 c f
Q Q
showpage
%%Trailer
%%EOF
