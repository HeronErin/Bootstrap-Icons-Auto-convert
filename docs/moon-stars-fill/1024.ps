%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:10 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
288 13.344 m 292.672 19.043 295.535 26.012 296.219 33.348 c 296.906 40.688
 295.379 48.062 291.84 54.527 c 264.074 105.473 249.582 162.59 249.695 220.609
 c 249.695 413.617 407.039 569.906 600.961 569.906 c 626.305 569.875 650.832
 567.312 674.547 562.227 c 674.543 562.223 l 681.797 560.672 689.348 561.281
 696.258 563.977 c 703.168 566.676 709.137 571.34 713.426 577.391 c 717.961
 583.691 720.273 591.32 720.004 599.078 c 719.734 606.836 716.898 614.285
 711.938 620.258 c 674.285 666.5 626.793 703.758 572.918 729.316 c 519.043
 754.875 460.145 768.09 400.512 768 c 179.23 768 0 589.727 0 370.078 c 0
 204.77 101.473 62.977 245.953 2.879 c 253.145 -0.176 261.141 -0.809 268.727
 1.078 c 276.312 2.965 283.078 7.27 288 13.344 c f
518.113 151.105 m 519.523 146.84 523.508 143.961 528 143.961 c 532.492 
143.961 536.477 146.84 537.887 151.105 c 556.461 206.883 l 564.766 231.746
 584.254 251.234 609.117 259.539 c 664.895 278.113 l 669.16 279.523 672.039
 283.508 672.039 288 c 672.039 292.492 669.16 296.477 664.895 297.887 c 
609.117 316.461 l 609.121 316.465 l 584.242 324.723 564.723 344.242 556.465
 369.121 c 537.891 424.898 l 537.887 424.895 l 536.477 429.16 532.492 432.039
 528 432.039 c 523.508 432.039 519.523 429.16 518.113 424.895 c 499.539 
369.117 l 499.535 369.121 l 491.277 344.242 471.758 324.723 446.879 316.465
 c 391.102 297.891 l 391.105 297.887 l 386.84 296.477 383.961 292.492 383.961
 288 c 383.961 283.508 386.84 279.523 391.105 278.113 c 446.883 259.539 
l 446.879 259.535 l 471.758 251.277 491.277 231.758 499.535 206.879 c h
665.426 4.754 m 666.395 1.949 669.035 0.07 672 0.07 c 674.965 0.07 677.605
 1.949 678.574 4.754 c 690.957 41.906 l 696.477 58.516 709.484 71.523 726.094
 77.043 c 763.246 89.426 l 766.051 90.395 767.93 93.035 767.93 96 c 767.93
 98.965 766.051 101.605 763.246 102.574 c 726.094 114.957 l 726.098 114.961
 l 709.52 120.508 696.508 133.52 690.961 150.098 c 678.578 187.25 l 678.574
 187.246 l 677.605 190.051 674.965 191.93 672 191.93 c 669.035 191.93 666.395
 190.051 665.426 187.246 c 653.043 150.094 l 653.039 150.098 l 647.492 133.52
 634.48 120.508 617.902 114.961 c 580.75 102.578 l 580.754 102.574 l 577.949
 101.605 576.07 98.965 576.07 96 c 576.07 93.035 577.949 90.395 580.754 
89.426 c 617.906 77.043 l 634.516 71.523 647.523 58.516 653.043 41.906 c
 h
665.426 4.754 m f
Q Q
showpage
%%Trailer
%%EOF
