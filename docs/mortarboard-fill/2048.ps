%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
788.258 196.512 m 775.414 190.535 760.586 190.535 747.742 196.512 c 27.742
 532.512 l 16.375 537.816 7.539 547.363 3.121 559.105 c -1.297 570.844 -0.941
 583.852 4.109 595.332 c 9.16 606.816 18.504 615.867 30.145 620.543 c 750.145
 908.543 l 761.605 913.137 774.395 913.137 785.855 908.543 c 1344 685.441
 l 1344 1248 l 1318.539 1248 1294.121 1258.113 1276.117 1276.117 c 1258.113
 1294.121 1248 1318.539 1248 1344 c 1248 1536 l 1536 1536 l 1536 1344 l 
1536 1318.539 1525.887 1294.121 1507.883 1276.117 c 1489.879 1258.113 1465.461
 1248 1440 1248 c 1440 646.945 l 1505.855 620.547 l 1505.855 620.543 l 1517.496
 615.867 1526.84 606.816 1531.891 595.332 c 1536.941 583.852 1537.297 570.844
 1532.879 559.105 c 1528.461 547.363 1519.625 537.816 1508.258 532.512 c
 h
788.258 196.512 m f
400.895 867.07 m 388.402 862.363 374.512 863.074 362.562 869.031 c 350.609
 874.988 341.684 885.652 337.922 898.465 c 289.922 1061.664 l 286.559 1073.121
 287.586 1085.422 292.805 1096.16 c 298.023 1106.898 307.059 1115.309 318.145
 1119.742 c 750.145 1292.543 l 761.605 1297.137 774.395 1297.137 785.855
 1292.543 c 1217.855 1119.742 l 1228.941 1115.309 1237.977 1106.898 1243.195
 1096.16 c 1248.414 1085.422 1249.441 1073.121 1246.078 1061.664 c 1198.078
 898.465 l 1194.316 885.652 1185.391 874.988 1173.438 869.031 c 1161.488
 863.074 1147.598 862.363 1135.105 867.07 c 768 1004.734 l h
400.895 867.07 m f
Q Q
showpage
%%Trailer
%%EOF
