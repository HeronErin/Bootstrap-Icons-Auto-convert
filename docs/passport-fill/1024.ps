%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 754
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 754
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 754 rectclip
1 0 0 -1 0 768 cm q
0 g
384 288 m 349.703 288 318.012 306.297 300.863 336 c 283.711 365.703 283.711
 402.297 300.863 432 c 318.012 461.703 349.703 480 384 480 c 418.297 480
 449.988 461.703 467.137 432 c 484.289 402.297 484.289 365.703 467.137 336
 c 449.988 306.297 418.297 288 384 288 c f
96 156.098 m 96 139.23 101.918 122.898 112.727 109.953 c 123.531 97.004
 138.543 88.262 155.137 85.246 c 539.137 15.453 l 539.137 15.457 l 560.133
 11.645 581.738 17.34 598.125 31.012 c 614.512 44.68 623.988 64.918 624 
86.258 c 624 108.816 l 638.602 117.246 650.723 129.371 659.148 143.973 c
 667.574 158.578 672.008 175.141 672 192 c 672 672 l 672 697.461 661.887
 721.879 643.883 739.883 c 625.879 757.887 601.461 768 576 768 c 192 768
 l 164.199 768.008 137.758 755.961 119.52 734.977 c 104.527 721.32 95.988
 701.977 96 681.695 c h
240 384 m 240 435.445 267.445 482.984 312 508.707 c 356.555 534.43 411.445
 534.43 456 508.707 c 500.555 482.984 528 435.445 528 384 c 528 332.555 
500.555 285.016 456 259.293 c 411.445 233.57 356.555 233.57 312 259.293 
c 267.445 285.016 240 332.555 240 384 c 240 600 m 240 606.363 242.527 612.469
 247.031 616.969 c 251.531 621.473 257.637 624 264 624 c 504 624 l 512.574
 624 520.496 619.426 524.785 612 c 529.07 604.574 529.07 595.426 524.785
 588 c 520.496 580.574 512.574 576 504 576 c 264 576 l 257.637 576 251.531
 578.527 247.031 583.031 c 242.527 587.531 240 593.637 240 600 c f
Q Q
showpage
%%Trailer
%%EOF
