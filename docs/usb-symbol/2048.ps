%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 288 0 1248 1517
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 288 0 1248 1517
1536 1536 cairo_set_page_size
%%EndPageSetup
q 288 0 960 1517 rectclip
1 0 0 -1 0 1536 cm q
0 g
748.031 29.953 m 600.863 250.754 l 597.66 255.594 596.316 261.434 597.09
 267.188 c 597.859 272.941 600.691 278.219 605.055 282.047 c 609.422 285.875
 615.027 287.988 620.832 288 c 720 288 l 720 990.625 l 704.719 979.152 688.121
 969.551 670.559 962.016 c 567.266 917.762 l 541.344 906.648 519.258 888.172
 503.742 864.621 c 488.23 841.07 479.977 813.48 480 785.281 c 480 759.742
 l 523.051 744.523 556.328 709.789 569.695 666.129 c 583.059 622.465 574.922
 575.055 547.77 538.344 c 520.617 501.637 477.66 479.98 432 479.98 c 386.34
 479.98 343.383 501.637 316.23 538.344 c 289.078 575.055 280.941 622.465
 294.305 666.129 c 307.672 709.789 340.949 744.523 384 759.742 c 384 785.281
 l 383.996 832.25 397.773 878.188 423.625 917.402 c 449.48 956.617 486.27
 987.383 529.441 1005.887 c 632.738 1050.145 l 632.734 1050.145 l 677.727
 1069.434 709.836 1110.258 717.984 1158.527 c 672.934 1170.699 633.852 1198.855
 608.039 1237.734 c 582.23 1276.613 571.457 1323.562 577.73 1369.805 c 584.008
 1416.047 606.902 1458.426 642.137 1489.023 c 677.375 1519.621 722.547 1536.344
 769.211 1536.07 c 815.879 1535.793 860.852 1518.543 895.727 1487.531 c 
930.602 1456.523 952.996 1413.879 958.727 1367.566 c 964.457 1321.25 953.133
 1274.434 926.867 1235.859 c 900.602 1197.285 861.191 1169.594 816 1157.953
 c 816 1071.359 l 815.992 1045.961 822.699 1021.012 835.445 999.043 c 848.191
 977.074 866.523 958.871 888.574 946.273 c 1031.039 864.867 l 1031.039 864.863
 l 1065.504 845.184 1094.547 817.266 1115.57 783.605 c 1136.598 749.949 
1148.949 711.602 1151.52 672 c 1224 672 l 1230.363 672 1236.469 669.473 
1240.969 664.969 c 1245.473 660.469 1248 654.363 1248 648 c 1248 408 l 1248
 401.637 1245.473 395.531 1240.969 391.031 c 1236.469 386.527 1230.363 384
 1224 384 c 984 384 l 977.637 384 971.531 386.527 967.031 391.031 c 962.527
 395.531 960 401.637 960 408 c 960 648 l 960 661.246 970.754 672 984 672
 c 1055.137 672 l 1050.199 717.93 1023.531 758.707 983.426 781.633 c 840.961
 863.039 l 832.363 868.047 824.031 873.492 816 879.359 c 816 288 l 915.168
 288 l 920.996 288.004 926.625 285.891 931.004 282.051 c 935.387 278.211
 938.223 272.906 938.984 267.133 c 939.742 261.355 938.375 255.5 935.137
 250.656 c 787.969 29.953 l 783.516 23.277 776.023 19.266 768 19.266 c 759.977
 19.266 752.484 23.277 748.031 29.953 c f
Q Q
showpage
%%Trailer
%%EOF
