%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:44 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
768 360 m 768.004 382.957 761.422 405.438 749.035 424.766 c 736.645 444.098
 718.973 459.469 698.113 469.055 c 689.758 454.379 679.242 441.047 666.91
 429.504 c 691.742 422.738 711.078 403.238 717.637 378.352 c 724.191 353.465
 716.977 326.973 698.699 308.848 c 680.426 290.727 653.871 283.73 629.039
 290.496 c 622.328 292.316 615.156 291.133 609.383 287.258 c 603.609 283.379
 599.801 277.191 598.945 270.289 c 594.395 233.438 575.785 199.77 547.004
 176.312 c 518.223 152.855 481.496 141.422 444.484 144.398 c 407.477 147.375
 373.047 164.531 348.383 192.289 c 327.875 191.352 307.324 192.77 287.137
 196.512 c 305.543 162.613 333.73 135.043 368.023 117.391 c 402.32 99.734
 441.137 92.812 479.418 97.527 c 517.703 102.238 553.68 118.367 582.668 
143.812 c 611.656 169.258 632.316 202.844 641.953 240.191 c 674.777 238.535
 706.848 250.418 730.672 273.062 c 754.496 295.707 767.988 327.133 768 360
 c f
336 240 m 389.137 239.988 440.414 259.566 480.027 294.988 c 519.637 330.41
 544.801 379.191 550.703 432 c 552 432 l 594.871 432 634.488 454.871 655.922
 492 c 677.359 529.129 677.359 574.871 655.922 612 c 634.488 649.129 594.871
 672 552 672 c 144 672 l 93.938 672.039 47.449 646.074 21.227 603.43 c -4.996
 560.785 -7.188 507.582 15.434 462.926 c 38.059 418.27 82.25 388.562 132.145
 384.48 c 146.965 342.242 174.543 305.656 211.062 279.773 c 247.582 253.891
 291.238 239.992 336 240 c 504 456 m 504.027 415.082 489.121 375.559 462.078
 344.852 c 435.035 314.141 397.711 294.359 357.117 289.215 c 316.523 284.074
 275.445 293.922 241.598 316.914 c 207.75 339.906 183.457 374.465 173.281
 414.098 c 171.902 419.461 168.715 424.184 164.25 427.465 c 159.789 430.742
 154.332 432.379 148.801 432.098 c 123.043 430.953 97.906 440.219 79.055
 457.805 c 60.203 475.395 49.219 499.828 48.57 525.602 c 47.926 551.375 
57.68 576.328 75.629 594.836 c 93.578 613.344 118.219 623.855 144 624 c 
552 624 l 572.652 623.953 592.289 615.039 605.918 599.527 c 619.551 584.012
 625.867 563.391 623.258 542.906 c 620.648 522.418 609.367 504.039 592.285
 492.438 c 575.199 480.836 553.957 477.129 533.953 482.258 c 526.707 484.113
 519.012 482.484 513.137 477.852 c 507.266 473.223 503.887 466.117 504 458.641
 c h
504 456 m f
Q Q
showpage
%%Trailer
%%EOF
