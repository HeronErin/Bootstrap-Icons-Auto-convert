%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:45 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
1536 720 m 1536.008 765.918 1522.844 810.875 1498.066 849.535 c 1473.293
 888.195 1437.945 918.938 1396.223 938.113 c 1379.52 908.758 1358.48 882.09
 1333.824 859.008 c 1383.488 845.477 1422.16 806.48 1435.273 756.707 c 1448.387
 706.93 1433.949 653.941 1397.402 617.699 c 1360.852 581.453 1307.742 567.461
 1258.078 580.992 c 1244.656 584.629 1230.312 582.266 1218.766 574.516 c
 1207.219 566.762 1199.602 554.379 1197.887 540.574 c 1188.789 466.879 1151.57
 399.543 1094.012 352.629 c 1036.449 305.711 962.988 282.844 888.973 288.797
 c 814.953 294.75 746.094 329.066 696.77 384.574 c 655.746 382.703 614.648
 385.539 574.273 393.023 c 611.086 325.23 667.457 270.09 736.047 234.781
 c 804.637 199.469 882.27 185.625 958.836 195.055 c 1035.402 204.48 1107.359
 236.738 1165.34 287.629 c 1223.316 338.52 1264.633 405.684 1283.902 480.383
 c 1327.336 478.191 1370.551 487.844 1408.922 508.305 c 1447.297 528.766
 1479.391 559.27 1501.773 596.559 c 1524.156 633.844 1535.984 676.512 1536
 720 c f
672 480 m 778.277 479.98 880.832 519.137 960.051 589.98 c 1039.273 660.82
 1089.598 758.383 1101.406 864 c 1104 864 l 1167.652 864 1228.695 889.285
 1273.707 934.293 c 1318.715 979.305 1344 1040.348 1344 1104 c 1344 1167.652
 1318.715 1228.695 1273.707 1273.707 c 1228.695 1318.715 1167.652 1344 1104
 1344 c 288 1344 l 213.633 1344.055 142.129 1315.344 88.453 1263.875 c 34.777
 1212.406 3.09 1142.168 0.027 1067.867 c -3.035 993.562 22.758 920.957 72.016
 865.242 c 121.273 809.527 190.172 775.027 264.289 768.961 c 293.93 684.488
 349.082 611.309 422.121 559.543 c 495.16 507.777 582.477 479.984 672 480
 c 1008 912 m 1008.059 830.16 978.242 751.117 924.156 689.699 c 870.066 
628.285 795.426 588.719 714.234 578.434 c 633.047 568.145 550.895 587.844
 483.199 633.828 c 415.5 679.812 366.914 748.926 346.559 828.191 c 343.805
 838.922 337.426 848.367 328.504 854.926 c 319.578 861.488 308.66 864.762
 297.602 864.191 c 263.512 862.68 229.633 870.277 199.457 886.207 c 169.277
 902.137 143.891 925.82 125.91 954.82 c 107.926 983.82 97.996 1017.09 97.145
 1051.203 c 96.293 1085.316 104.543 1119.039 121.055 1148.902 c 137.566 
1178.766 161.734 1203.688 191.078 1221.105 c 220.422 1238.523 253.879 1247.809
 288 1248 c 1104 1248 l 1145.305 1247.906 1184.578 1230.078 1211.84 1199.051
 c 1239.102 1168.023 1251.73 1126.785 1246.516 1085.812 c 1241.297 1044.84
 1218.738 1008.078 1184.57 984.875 c 1150.402 961.672 1107.914 954.254 1067.902
 964.512 c 1053.414 968.223 1038.02 964.969 1026.273 955.707 c 1014.527 
946.445 1007.773 932.238 1008 917.281 c h
1008 912 m f
Q Q
showpage
%%Trailer
%%EOF
