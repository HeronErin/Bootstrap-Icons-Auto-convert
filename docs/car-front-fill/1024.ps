%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
120.961 168.719 m 130.219 147.121 145.617 128.715 165.242 115.785 c 184.871
 102.859 207.859 95.98 231.359 96 c 536.734 96 l 584.734 96 628.125 124.609
 647.039 168.719 c 685.055 257.422 l 688.656 265.82 695.133 272.734 703.293
 276.812 c 727.293 288.812 744.332 311.133 749.613 337.387 c 765.691 417.98
 l 767.293 425.723 768.074 433.566 768.043 441.5 c 768.043 461.324 l 768.043
 500.395 749.324 535.387 720.043 557.18 c 720.047 648 l 720.047 654.363 
717.52 660.469 713.02 664.969 c 708.52 669.473 702.414 672 696.047 672 c
 600.047 672 l 593.684 672 587.578 669.473 583.078 664.969 c 578.578 660.469
 576.047 654.363 576.047 648 c 576.047 583.777 l 514.031 586.082 444.285
 588 384.047 588 c 323.809 588 254.062 586.078 192.047 583.777 c 192.047
 648 l 192.047 654.363 189.52 660.469 185.02 664.969 c 180.52 669.473 174.414
 672 168.047 672 c 72.047 672 l 65.684 672 59.578 669.473 55.078 664.969
 c 50.578 660.469 48.047 654.363 48.047 648 c 48.047 557.184 l 18.766 535.391
 0.047 500.398 0.047 461.328 c 0.047 441.504 l 0.055 433.605 0.844 425.727
 2.398 417.984 c 18.477 337.344 l 23.758 311.137 40.797 288.77 64.75 276.816
 c 64.754 276.816 l 72.969 272.742 79.453 265.863 83.039 257.426 c 121.055
 168.723 l h
144 480 m 161.148 480 176.996 470.852 185.57 456 c 194.145 441.148 194.145
 422.852 185.57 408 c 176.996 393.148 161.148 384 144 384 c 126.852 384 
111.004 393.148 102.43 408 c 93.855 422.852 93.855 441.148 102.43 456 c 
111.004 470.852 126.852 480 144 480 c 624 480 m 641.148 480 656.996 470.852
 665.57 456 c 674.145 441.148 674.145 422.852 665.57 408 c 656.996 393.148
 641.148 384 624 384 c 606.852 384 591.004 393.148 582.43 408 c 573.855 
422.852 573.855 441.148 582.43 456 c 591.004 470.852 606.852 480 624 480
 c 288 384 m 270.852 384 255.004 393.148 246.43 408 c 237.855 422.852 237.855
 441.148 246.43 456 c 255.004 470.852 270.852 480 288 480 c 480 480 l 497.148
 480 512.996 470.852 521.57 456 c 530.145 441.148 530.145 422.852 521.57
 408 c 512.996 393.148 497.148 384 480 384 c h
139.488 249.07 m 136.977 254.258 136.371 260.164 137.785 265.75 c 139.195
 271.336 142.535 276.242 147.211 279.613 c 151.883 282.98 157.598 284.59
 163.344 284.16 c 207.023 280.656 324.145 276 384 276 c 443.855 276 561.023
 280.656 604.656 284.16 c 610.402 284.59 616.117 282.98 620.789 279.613 
c 625.465 276.242 628.805 271.336 630.215 265.75 c 631.629 260.164 631.023
 254.258 628.512 249.07 c 582.625 157.246 l 580.629 153.266 577.566 149.918
 573.777 147.578 c 569.988 145.238 565.621 144 561.168 144 c 206.832 144
 l 202.379 144 198.012 145.238 194.223 147.578 c 190.434 149.918 187.371
 153.266 185.375 157.246 c 139.488 249.121 l h
139.488 249.07 m f
Q Q
showpage
%%Trailer
%%EOF
