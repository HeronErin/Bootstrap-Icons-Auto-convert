%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 336
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 288 rectclip
1 0 0 -1 0 384 cm q
0 g
60.48 84.359 m 65.109 73.559 72.809 64.355 82.621 57.895 c 92.434 51.43
 103.93 47.988 115.68 48 c 268.367 48 l 292.367 48 314.062 62.305 323.52
 84.359 c 342.527 128.711 l 344.328 132.91 347.566 136.367 351.648 138.406
 c 363.648 144.406 372.168 155.566 374.809 168.695 c 382.848 208.992 l 383.648
 212.863 384.039 216.785 384.023 220.754 c 384.023 230.664 l 384.023 250.199
 374.664 267.695 360.023 278.594 c 360.023 324 l 360.023 327.184 358.758
 330.234 356.508 332.484 c 354.258 334.734 351.207 336 348.023 336 c 300.023
 336 l 293.398 336 288.023 330.629 288.023 324 c 288.023 291.887 l 257.016
 293.039 222.145 294 192.023 294 c 161.902 294 127.031 293.039 96.023 291.887
 c 96.023 324 l 96.023 327.184 94.758 330.234 92.508 332.484 c 90.258 334.734
 87.207 336 84.023 336 c 36.023 336 l 29.398 336 24.023 330.629 24.023 324
 c 24.023 278.594 l 9.383 267.699 0.023 250.203 0.023 230.664 c 0.023 220.754
 l 0.027 216.805 0.422 212.863 1.199 208.992 c 9.238 168.672 l 11.879 155.566
 20.398 144.383 32.375 138.406 c 36.484 136.371 39.727 132.934 41.52 128.711
 c 60.527 84.359 l h
72 240 m 80.574 240 88.496 235.426 92.785 228 c 97.07 220.574 97.07 211.426
 92.785 204 c 88.496 196.574 80.574 192 72 192 c 63.426 192 55.504 196.574
 51.215 204 c 46.93 211.426 46.93 220.574 51.215 228 c 55.504 235.426 63.426
 240 72 240 c 312 240 m 320.574 240 328.496 235.426 332.785 228 c 337.07
 220.574 337.07 211.426 332.785 204 c 328.496 196.574 320.574 192 312 192
 c 303.426 192 295.504 196.574 291.215 204 c 286.93 211.426 286.93 220.574
 291.215 228 c 295.504 235.426 303.426 240 312 240 c 144 192 m 135.426 192
 127.504 196.574 123.215 204 c 118.93 211.426 118.93 220.574 123.215 228
 c 127.504 235.426 135.426 240 144 240 c 240 240 l 248.574 240 256.496 235.426
 260.785 228 c 265.07 220.574 265.07 211.426 260.785 204 c 256.496 196.574
 248.574 192 240 192 c h
69.742 124.535 m 67.836 128.477 68.176 133.137 70.637 136.758 c 73.098 
140.375 77.305 142.406 81.672 142.078 c 103.512 140.324 162.07 138 192 138
 c 221.93 138 280.512 140.328 302.328 142.078 c 306.695 142.406 310.902 
140.375 313.363 136.758 c 315.824 133.137 316.164 128.477 314.258 124.535
 c 291.312 78.625 l 289.277 74.562 285.125 72 280.586 72 c 103.414 72 l 
98.875 72 94.723 74.562 92.688 78.625 c 69.742 124.559 l h
69.742 124.535 m f
Q Q
showpage
%%Trailer
%%EOF
