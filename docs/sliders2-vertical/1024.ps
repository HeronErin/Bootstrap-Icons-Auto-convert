%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
0 504 m 0 510.363 2.527 516.469 7.031 520.969 c 11.531 525.473 17.637 528
 24 528 c 216 528 l 224.574 528 232.496 523.426 236.785 516 c 241.07 508.574
 241.07 499.426 236.785 492 c 232.496 484.574 224.574 480 216 480 c 144 
480 l 144 72 l 144 63.426 139.426 55.504 132 51.215 c 124.574 46.93 115.426
 46.93 108 51.215 c 100.574 55.504 96 63.426 96 72 c 96 480 l 24 480 l 17.637
 480 11.531 482.527 7.031 487.031 c 2.527 491.531 0 497.637 0 504 c 120 
576 m 113.637 576 107.531 578.527 103.031 583.031 c 98.527 587.531 96 593.637
 96 600 c 96 696 l 96 704.574 100.574 712.496 108 716.785 c 115.426 721.07
 124.574 721.07 132 716.785 c 139.426 712.496 144 704.574 144 696 c 144 
600 l 144 593.637 141.473 587.531 136.969 583.031 c 132.469 578.527 126.363
 576 120 576 c 264 264 m 264 270.363 266.527 276.469 271.031 280.969 c 275.531
 285.473 281.637 288 288 288 c 360 288 l 360 696 l 360 704.574 364.574 712.496
 372 716.785 c 379.426 721.07 388.574 721.07 396 716.785 c 403.426 712.496
 408 704.574 408 696 c 408 288 l 480 288 l 488.574 288 496.496 283.426 500.785
 276 c 505.07 268.574 505.07 259.426 500.785 252 c 496.496 244.574 488.574
 240 480 240 c 288 240 l 281.637 240 275.531 242.527 271.031 247.031 c 266.527
 251.531 264 257.637 264 264 c 384 48 m 377.637 48 371.531 50.527 367.031
 55.031 c 362.527 59.531 360 65.637 360 72 c 360 168 l 360 176.574 364.574
 184.496 372 188.785 c 379.426 193.07 388.574 193.07 396 188.785 c 403.426
 184.496 408 176.574 408 168 c 408 72 l 408 65.637 405.473 59.531 400.969
 55.031 c 396.469 50.527 390.363 48 384 48 c 528 504 m 528 510.363 530.527
 516.469 535.031 520.969 c 539.531 525.473 545.637 528 552 528 c 744 528
 l 752.574 528 760.496 523.426 764.785 516 c 769.07 508.574 769.07 499.426
 764.785 492 c 760.496 484.574 752.574 480 744 480 c 672 480 l 672 72 l 
672 63.426 667.426 55.504 660 51.215 c 652.574 46.93 643.426 46.93 636 51.215
 c 628.574 55.504 624 63.426 624 72 c 624 480 l 552 480 l 545.637 480 539.531
 482.527 535.031 487.031 c 530.527 491.531 528 497.637 528 504 c 648 576
 m 641.637 576 635.531 578.527 631.031 583.031 c 626.527 587.531 624 593.637
 624 600 c 624 696 l 624 704.574 628.574 712.496 636 716.785 c 643.426 721.07
 652.574 721.07 660 716.785 c 667.426 712.496 672 704.574 672 696 c 672 
600 l 672 593.637 669.473 587.531 664.969 583.031 c 660.469 578.527 654.363
 576 648 576 c f*
Q Q
showpage
%%Trailer
%%EOF
