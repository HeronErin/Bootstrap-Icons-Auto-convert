%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:39 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 1008 m 0 1020.73 5.059 1032.938 14.059 1041.941 c 23.062 1050.941 35.27
 1056 48 1056 c 432 1056 l 449.148 1056 464.996 1046.852 473.57 1032 c 482.145
 1017.148 482.145 998.852 473.57 984 c 464.996 969.148 449.148 960 432 960
 c 288 960 l 288 144 l 288 126.852 278.852 111.004 264 102.43 c 249.148 
93.855 230.852 93.855 216 102.43 c 201.148 111.004 192 126.852 192 144 c
 192 960 l 48 960 l 35.27 960 23.062 965.059 14.059 974.059 c 5.059 983.062
 0 995.27 0 1008 c 240 1152 m 227.27 1152 215.062 1157.059 206.059 1166.059
 c 197.059 1175.062 192 1187.27 192 1200 c 192 1392 l 192 1409.148 201.148
 1424.996 216 1433.57 c 230.852 1442.145 249.148 1442.145 264 1433.57 c 
278.852 1424.996 288 1409.148 288 1392 c 288 1200 l 288 1187.27 282.941 
1175.062 273.941 1166.059 c 264.938 1157.059 252.73 1152 240 1152 c 528 
528 m 528 540.73 533.059 552.938 542.059 561.941 c 551.062 570.941 563.27
 576 576 576 c 720 576 l 720 1392 l 720 1409.148 729.148 1424.996 744 1433.57
 c 758.852 1442.145 777.148 1442.145 792 1433.57 c 806.852 1424.996 816 
1409.148 816 1392 c 816 576 l 960 576 l 977.148 576 992.996 566.852 1001.57
 552 c 1010.145 537.148 1010.145 518.852 1001.57 504 c 992.996 489.148 977.148
 480 960 480 c 576 480 l 563.27 480 551.062 485.059 542.059 494.059 c 533.059
 503.062 528 515.27 528 528 c 768 96 m 755.27 96 743.062 101.059 734.059
 110.059 c 725.059 119.062 720 131.27 720 144 c 720 336 l 720 353.148 729.148
 368.996 744 377.57 c 758.852 386.145 777.148 386.145 792 377.57 c 806.852
 368.996 816 353.148 816 336 c 816 144 l 816 131.27 810.941 119.062 801.941
 110.059 c 792.938 101.059 780.73 96 768 96 c 1056 1008 m 1056 1020.73 1061.059
 1032.938 1070.059 1041.941 c 1079.062 1050.941 1091.27 1056 1104 1056 c
 1488 1056 l 1505.148 1056 1520.996 1046.852 1529.57 1032 c 1538.145 1017.148
 1538.145 998.852 1529.57 984 c 1520.996 969.148 1505.148 960 1488 960 c
 1344 960 l 1344 144 l 1344 126.852 1334.852 111.004 1320 102.43 c 1305.148
 93.855 1286.852 93.855 1272 102.43 c 1257.148 111.004 1248 126.852 1248
 144 c 1248 960 l 1104 960 l 1091.27 960 1079.062 965.059 1070.059 974.059
 c 1061.059 983.062 1056 995.27 1056 1008 c 1296 1152 m 1283.27 1152 1271.062
 1157.059 1262.059 1166.059 c 1253.059 1175.062 1248 1187.27 1248 1200 c
 1248 1392 l 1248 1409.148 1257.148 1424.996 1272 1433.57 c 1286.852 1442.145
 1305.148 1442.145 1320 1433.57 c 1334.852 1424.996 1344 1409.148 1344 1392
 c 1344 1200 l 1344 1187.27 1338.941 1175.062 1329.941 1166.059 c 1320.938
 1157.059 1308.73 1152 1296 1152 c f*
Q Q
showpage
%%Trailer
%%EOF
