%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 201 1536 1491
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 201 1536 1491
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 201 1536 1290 rectclip
1 0 0 -1 0 1536 cm q
0 g
480.672 393.312 m 481.375 383.969 482.238 374.434 483.266 364.703 c 488.066
 320.16 496.801 270.719 513.312 225.504 c 529.535 180.863 554.785 135.938
 595.199 105.602 c 702.238 25.344 833.758 25.344 940.801 105.602 c 981.121
 135.938 1006.465 180.867 1022.688 225.602 c 1039.102 270.723 1047.934 320.16
 1052.734 364.707 c 1053.758 374.309 1054.621 383.844 1055.328 393.316 c
 1189.824 411.941 1309.727 444.293 1393.727 490.469 c 1597.824 602.691 1532.543
 1075.59 1498.27 1260.195 c 1498.273 1260.191 l 1494.176 1281.281 1482.797
 1300.258 1466.125 1313.805 c 1449.453 1327.352 1428.551 1334.609 1407.07
 1334.305 c 128.93 1334.305 l 107.449 1334.609 86.547 1327.352 69.875 1313.805
 c 53.203 1300.258 41.824 1281.281 37.727 1260.191 c 3.453 1075.582 -61.824
 602.59 142.367 490.465 c 226.176 444.387 346.176 411.938 480.672 393.312
 c 388.801 540.77 m 338.324 550.203 288.211 561.473 238.559 574.559 c 229.824
 577.055 l 226.559 578.016 l 210.559 583.215 198.445 596.418 194.641 612.809
 c 190.832 629.199 195.887 646.387 207.961 658.105 c 220.031 669.828 237.359
 674.371 253.633 670.078 c 254.113 669.887 l 256.035 669.406 l 263.715 667.199
 l 263.711 667.199 l 310.859 654.789 358.445 644.094 406.367 635.137 c 525.609
 612.562 646.645 600.805 768 600 c 906.145 600 1034.977 617.566 1129.633
 635.23 c 1180.195 644.699 1230.375 656.102 1280.062 669.406 c 1281.984 
669.887 l 1282.367 669.984 l 1298.719 674.543 1316.262 670.121 1328.508 
658.363 c 1340.75 646.602 1345.867 629.25 1341.973 612.73 c 1338.074 596.207
 1325.742 582.973 1309.535 577.922 c 1309.246 577.922 l 1308.672 577.73 
l 1306.273 577.059 l 1306.273 577.055 l 1292.566 573.234 1278.805 569.621
 1264.992 566.207 c 1226.008 556.609 1186.762 548.129 1147.297 540.77 c 
1022.23 517.109 895.281 504.801 768 504 c 622.273 504 487.105 522.434 388.801
 540.77 c 652.801 182.398 m 633.312 197.086 616.609 222.719 603.555 258.336
 c 603.551 258.336 l 589.941 298.461 581.395 340.125 578.113 382.367 c 622.027
 379.07 666.004 376.641 710.016 375.07 c 793.152 372.957 877.246 375.359
 958.078 382.367 c 954.766 340.121 946.188 298.457 932.543 258.336 c 919.582
 222.625 902.879 197.09 883.297 182.398 c 810.336 127.68 725.855 127.68 
652.898 182.398 c h
652.801 182.398 m f
Q Q
showpage
%%Trailer
%%EOF
