%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
624 1152 m 764.035 1152 898.332 1096.371 997.352 997.352 c 1096.371 898.332
 1152 764.035 1152 624 c 1152 483.965 1096.371 349.668 997.352 250.648 c
 898.332 151.629 764.035 96 624 96 c 483.965 96 349.668 151.629 250.648 
250.648 c 151.629 349.668 96 483.965 96 624 c 96 764.035 151.629 898.332
 250.648 997.352 c 349.668 1096.371 483.965 1152 624 1152 c 1248 624 m 1248
 789.496 1182.258 948.211 1065.234 1065.234 c 948.211 1182.258 789.496 1248
 624 1248 c 458.504 1248 299.789 1182.258 182.766 1065.234 c 65.742 948.211
 0 789.496 0 624 c 0 458.504 65.742 299.789 182.766 182.766 c 299.789 65.742
 458.504 0 624 0 c 789.496 0 948.211 65.742 1065.234 182.766 c 1182.258 
299.789 1248 458.504 1248 624 c f*
993.023 1127.23 m 995.84 1131.07 998.977 1134.75 1002.43 1138.27 c 1372.031
 1507.871 l 1396.281 1532.137 1431.633 1541.625 1464.77 1532.758 c 1497.91
 1523.891 1523.801 1498.016 1532.691 1464.883 c 1541.582 1431.754 1532.121
 1396.395 1507.871 1372.129 c 1138.27 1002.527 l 1138.273 1002.527 l 1134.84
 999.051 1131.152 995.844 1127.23 992.93 c 1089.617 1044.312 1044.355 1089.641
 993.023 1127.328 c h
993.023 1127.23 m f
288 624 m 288 611.27 293.059 599.062 302.059 590.059 c 311.062 581.059 
323.27 576 336 576 c 912 576 l 929.148 576 944.996 585.148 953.57 600 c 
962.145 614.852 962.145 633.148 953.57 648 c 944.996 662.852 929.148 672
 912 672 c 336 672 l 323.27 672 311.062 666.941 302.059 657.941 c 293.059
 648.938 288 636.73 288 624 c f*
Q Q
showpage
%%Trailer
%%EOF
