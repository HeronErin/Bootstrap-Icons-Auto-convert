%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
240 192 288 192 re f
192 0 m 166.539 0 142.121 10.113 124.117 28.117 c 106.113 46.121 96 70.539
 96 96 c 96 672 l 96 697.461 106.113 721.879 124.117 739.883 c 142.121 757.887
 166.539 768 192 768 c 576 768 l 601.461 768 625.879 757.887 643.883 739.883
 c 661.887 721.879 672 697.461 672 672 c 672 96 l 672 70.539 661.887 46.121
 643.883 28.117 c 625.879 10.113 601.461 0 576 0 c h
192 72 m 192 80.574 187.426 88.496 180 92.785 c 172.574 97.07 163.426 97.07
 156 92.785 c 148.574 88.496 144 80.574 144 72 c 144 63.426 148.574 55.504
 156 51.215 c 163.426 46.93 172.574 46.93 180 51.215 c 187.426 55.504 192
 63.426 192 72 c 624 72 m 624 80.574 619.426 88.496 612 92.785 c 604.574
 97.07 595.426 97.07 588 92.785 c 580.574 88.496 576 80.574 576 72 c 576
 63.426 580.574 55.504 588 51.215 c 595.426 46.93 604.574 46.93 612 51.215
 c 619.426 55.504 624 63.426 624 72 c 168 528 m 176.574 528 184.496 523.426
 188.785 516 c 193.07 508.574 193.07 499.426 188.785 492 c 184.496 484.574
 176.574 480 168 480 c 159.426 480 151.504 484.574 147.215 492 c 142.93 
499.426 142.93 508.574 147.215 516 c 151.504 523.426 159.426 528 168 528
 c 624 504 m 624 512.574 619.426 520.496 612 524.785 c 604.574 529.07 595.426
 529.07 588 524.785 c 580.574 520.496 576 512.574 576 504 c 576 495.426 
580.574 487.504 588 483.215 c 595.426 478.93 604.574 478.93 612 483.215 
c 619.426 487.504 624 495.426 624 504 c 228 144 m 540 144 l 549.547 144 
558.703 147.793 565.457 154.543 c 572.207 161.297 576 170.453 576 180 c 
576 396 l 576 405.547 572.207 414.703 565.457 421.457 c 558.703 428.207 
549.547 432 540 432 c 228 432 l 218.453 432 209.297 428.207 202.543 421.457
 c 195.793 414.703 192 405.547 192 396 c 192 180 l 192 170.453 195.793 161.297
 202.543 154.543 c 209.297 147.793 218.453 144 228 144 c 240 576 m 528 576
 l 540.73 576 552.938 581.059 561.941 590.059 c 570.941 599.062 576 611.27
 576 624 c 576 720 l 528 720 l 528 624 l 492 624 l 492 720 l 444 720 l 444
 624 l 408 624 l 408 720 l 360 720 l 360 624 l 324 624 l 324 720 l 276 720
 l 276 624 l 240 624 l 240 720 l 192 720 l 192 624 l 192 611.27 197.059 
599.062 206.059 590.059 c 215.062 581.059 227.27 576 240 576 c f
Q Q
showpage
%%Trailer
%%EOF
