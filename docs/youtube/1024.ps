%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 132 768 673
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 132 768 673
768 768 cairo_set_page_size
%%EndPageSetup
q 0 132 768 541 rectclip
1 0 0 -1 0 768 cm q
0 g
386.449 95.953 m 390.723 95.953 l 430.18 96.098 630.098 97.539 684.004 
112.031 c 684 112.031 l 717.164 121.035 743.035 146.996 751.922 180.191 
c 756.77 198.43 760.18 222.574 762.48 247.488 c 762.961 252.48 l 764.016
 264.961 l 764.398 269.953 l 767.52 313.824 767.902 354.914 767.949 363.891
 c 767.949 367.492 l 767.902 376.805 767.469 420.676 764.012 466.371 c 763.629
 471.41 l 763.195 476.402 l 760.797 503.859 757.242 531.121 751.914 551.188
 c 751.922 551.184 l 743.035 584.379 717.164 610.34 684 619.344 c 628.32
 634.32 416.688 635.375 387.359 635.422 c 380.543 635.422 l 365.711 635.422
 304.367 635.133 240.047 632.926 c 231.887 632.637 l 227.711 632.445 l 211.297
 631.773 l 158.016 629.422 107.281 625.629 83.906 619.293 c 83.902 619.297
 l 50.754 610.301 24.887 584.359 15.984 551.184 c 10.656 531.168 7.105 503.855
 4.703 476.398 c 4.32 471.359 l 3.938 466.367 l 1.555 433.844 0.242 401.25
 0 368.641 c 0 362.738 l 0.098 352.418 0.48 316.754 3.07 277.395 c 3.406
 272.449 l 3.551 269.953 l 3.934 264.961 l 4.988 252.48 l 5.469 247.488 
l 7.773 222.578 11.18 198.383 16.027 180.191 c 16.031 180.191 l 24.918 146.996
 50.789 121.035 83.953 112.031 c 107.328 105.793 158.066 101.953 211.344
 99.551 c 219.504 99.215 l 231.891 98.781 l 240.098 98.445 l 240.098 98.449
 l 285.777 96.98 331.48 96.164 377.184 96 c h
307.199 250.031 m 307.199 481.297 l 506.734 365.711 l h
307.199 250.031 m f
Q Q
showpage
%%Trailer
%%EOF
