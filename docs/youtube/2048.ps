%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:27 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 265 1536 1345
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 265 1536 1345
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 265 1536 1080 rectclip
1 0 0 -1 0 1536 cm q
0 g
772.895 191.902 m 781.438 191.902 l 860.348 192.191 1260.191 195.07 1367.996
 224.062 c 1368 224.062 l 1400.59 232.914 1430.289 250.16 1454.129 274.082
 c 1477.965 298.004 1495.105 327.762 1503.84 360.383 c 1513.535 396.863 
1520.352 445.152 1524.961 494.977 c 1525.922 504.961 l 1528.035 529.922 
l 1528.805 539.906 l 1535.043 627.648 1535.812 709.828 1535.91 727.777 c
 1535.91 734.977 l 1535.812 753.602 1534.949 841.344 1528.039 932.738 c 
1527.27 942.816 l 1526.406 952.801 l 1521.605 1007.711 1514.504 1062.242
 1503.848 1102.367 c 1503.84 1102.367 l 1495.105 1134.992 1477.965 1164.75
 1454.129 1188.672 c 1430.289 1212.594 1400.59 1229.84 1368 1238.688 c 1256.641
 1268.641 833.375 1270.75 774.719 1270.848 c 761.086 1270.848 l 731.422 
1270.848 608.734 1270.273 480.094 1265.855 c 463.773 1265.281 l 455.422 
1264.898 l 422.594 1263.555 l 316.035 1258.852 214.562 1251.266 167.809 
1238.594 c 135.227 1229.754 105.539 1212.52 81.699 1188.617 c 57.863 1164.711
 40.715 1134.973 31.969 1102.367 c 21.312 1062.336 14.207 1007.711 9.41 
952.801 c 8.641 942.719 l 7.871 932.734 l 3.105 867.688 0.48 802.5 0 737.281
 c 0 725.473 l 0.191 704.832 0.961 633.504 6.145 554.785 c 6.816 544.898
 l 7.105 539.906 l 7.875 529.922 l 9.988 504.961 l 10.949 494.977 l 15.559
 445.152 22.375 396.77 32.07 360.383 c 32.062 360.383 l 40.797 327.762 57.938
 298.004 81.777 274.082 c 105.613 250.16 135.312 232.914 167.902 224.062
 c 214.656 211.582 316.125 203.902 422.688 199.102 c 439.008 198.43 l 455.52
 197.855 l 463.777 197.566 l 480.191 196.895 l 571.555 193.957 662.957 192.328
 754.367 192 c h
614.398 500.062 m 614.398 962.59 l 1013.469 731.422 l h
614.398 500.062 m f
Q Q
showpage
%%Trailer
%%EOF
