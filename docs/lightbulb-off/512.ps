%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 35 0 349 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 35 0 349 384
384 384 cairo_set_page_size
%%EndPageSetup
q 35 0 314 384 rectclip
1 0 0 -1 0 384 cm q
0 g
53.52 104.398 m 49.848 117.277 47.988 130.609 48 144 c 48 184.586 64.801
 221.281 91.824 247.441 c 96.695 252.145 100.441 257.043 102.695 262.297
 c 120.984 304.754 l 122.879 309.148 127.211 312 132 312 c 125.371 312 120
 317.371 120 324 c 120 330.629 125.371 336 132 336 c 125.371 336 120 341.371
 120 348 c 120 354.629 125.371 360 132 360 c 137.375 370.727 l 139.367 374.715
 142.43 378.066 146.219 380.41 c 150.008 382.754 154.375 383.996 158.832
 384 c 225.168 384 l 229.625 383.996 233.992 382.754 237.781 380.41 c 241.57
 378.066 244.633 374.715 246.625 370.727 c 252 360 l 258.629 360 264 354.629
 264 348 c 264 341.371 258.629 336 252 336 c 258.629 336 264 330.629 264
 324 c 264 317.371 258.629 312 252 312 c 254.473 312 256.887 311.238 258.91
 309.816 c 237.07 288 l 139.922 288 l 124.754 252.793 l 120.863 244.281 
115.352 236.609 108.527 230.207 c 80.184 202.871 67.121 163.328 73.609 124.488
 c h
91.633 40.727 m 108.625 57.695 l 139.105 28.258 182.852 17.078 223.719 
28.281 c 264.586 39.484 296.516 71.414 307.719 112.281 c 318.922 153.148
 307.742 196.895 278.305 227.375 c 295.273 244.344 l 330.598 207.77 344.016
 155.27 330.57 106.23 c 317.125 57.191 278.809 18.875 229.77 5.43 c 180.73
 -8.016 128.23 5.402 91.656 40.727 c h
39.504 39.504 m 41.754 37.246 44.812 35.98 48 35.98 c 51.188 35.98 54.246
 37.246 56.496 39.504 c 344.496 327.504 l 349.188 332.195 349.188 339.805
 344.496 344.496 c 339.805 349.188 332.195 349.188 327.504 344.496 c 39.504
 56.496 l 37.246 54.246 35.98 51.188 35.98 48 c 35.98 44.812 37.246 41.754
 39.504 39.504 c f*
Q Q
showpage
%%Trailer
%%EOF
