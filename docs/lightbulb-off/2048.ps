%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 143 0 1393 1535
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 143 0 1393 1535
1536 1536 cairo_set_page_size
%%EndPageSetup
q 143 0 1250 1535 rectclip
1 0 0 -1 0 1536 cm q
0 g
214.078 417.602 m 199.391 469.117 191.957 522.43 192 576 c 192 738.336 
259.199 885.121 367.297 989.762 c 386.785 1008.578 401.762 1028.16 410.785
 1049.188 c 483.938 1219.012 l 483.938 1219.008 l 487.648 1227.613 493.797
 1234.945 501.629 1240.098 c 509.461 1245.25 518.625 1247.996 528 1248 c
 510.852 1248 495.004 1257.148 486.43 1272 c 477.855 1286.852 477.855 1305.148
 486.43 1320 c 495.004 1334.852 510.852 1344 528 1344 c 510.852 1344 495.004
 1353.148 486.43 1368 c 477.855 1382.852 477.855 1401.148 486.43 1416 c 
495.004 1430.852 510.852 1440 528 1440 c 549.504 1482.91 l 557.473 1498.855
 569.719 1512.266 584.879 1521.645 c 600.035 1531.02 617.504 1535.992 635.328
 1536 c 900.672 1536 l 918.496 1535.992 935.965 1531.02 951.121 1521.645
 c 966.281 1512.266 978.527 1498.855 986.496 1482.91 c 1008 1440 l 1025.148
 1440 1040.996 1430.852 1049.57 1416 c 1058.145 1401.148 1058.145 1382.852
 1049.57 1368 c 1040.996 1353.148 1025.148 1344 1008 1344 c 1025.148 1344
 1040.996 1334.852 1049.57 1320 c 1058.145 1305.148 1058.145 1286.852 1049.57
 1272 c 1040.996 1257.148 1025.148 1248 1008 1248 c 1017.895 1248.008 1027.555
 1244.957 1035.648 1239.266 c 948.289 1152 l 559.68 1152 l 499.008 1011.168
 l 483.453 977.125 461.41 946.441 434.113 920.832 c 378.262 866.973 336.359
 800.324 312.023 726.648 c 287.688 652.973 281.652 574.484 294.434 497.953
 c h
366.527 162.914 m 434.496 230.785 l 525.023 143.348 646.273 94.969 772.129
 96.059 c 897.984 97.152 1018.371 147.637 1107.367 236.633 c 1196.363 325.629
 1246.848 446.016 1247.941 571.871 c 1249.031 697.727 1200.652 818.977 1113.215
 909.504 c 1181.086 977.375 l 1181.09 977.375 l 1286.012 868.742 1344.07
 723.242 1342.758 572.219 c 1341.445 421.191 1280.867 276.723 1174.07 169.93
 c 1067.277 63.133 922.809 2.555 771.781 1.242 c 620.758 -0.07 475.258 57.988
 366.625 162.91 c h
158.016 158.02 m 158.016 158.016 l 167.02 148.988 179.25 143.914 192 143.914
 c 204.75 143.914 216.98 148.988 225.984 158.016 c 1377.984 1310.016 l 1390.125
 1322.156 1394.867 1339.855 1390.422 1356.438 c 1385.98 1373.023 1373.023
 1385.98 1356.438 1390.422 c 1339.855 1394.867 1322.156 1390.125 1310.016
 1377.984 c 158.016 225.984 l 148.988 216.98 143.914 204.75 143.914 192 
c 143.914 179.25 148.988 167.02 158.016 158.016 c f*
Q Q
showpage
%%Trailer
%%EOF
