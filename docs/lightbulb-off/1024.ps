%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 71 0 697 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 71 0 697 768
768 768 cairo_set_page_size
%%EndPageSetup
q 71 0 626 768 rectclip
1 0 0 -1 0 768 cm q
0 g
107.039 208.801 m 99.695 234.559 95.98 261.215 96 288 c 96 369.168 129.602
 442.559 183.648 494.879 c 193.391 504.285 200.879 514.078 205.391 524.59
 c 241.965 609.5 l 241.969 609.504 l 243.824 613.809 246.898 617.473 250.812
 620.051 c 254.73 622.625 259.312 624 264 624 c 255.426 624 247.504 628.574
 243.215 636 c 238.93 643.426 238.93 652.574 243.215 660 c 247.504 667.426
 255.426 672 264 672 c 255.426 672 247.504 676.574 243.215 684 c 238.93 
691.426 238.93 700.574 243.215 708 c 247.504 715.426 255.426 720 264 720
 c 274.754 741.457 l 278.734 749.43 284.859 756.133 292.438 760.82 c 300.02
 765.508 308.754 767.996 317.664 768 c 450.336 768 l 459.246 767.996 467.98
 765.508 475.562 760.82 c 483.141 756.133 489.266 749.43 493.246 741.457
 c 504 720 l 512.574 720 520.496 715.426 524.785 708 c 529.07 700.574 529.07
 691.426 524.785 684 c 520.496 676.574 512.574 672 504 672 c 512.574 672
 520.496 667.426 524.785 660 c 529.07 652.574 529.07 643.426 524.785 636
 c 520.496 628.574 512.574 624 504 624 c 508.949 624.004 513.777 622.477
 517.824 619.633 c 474.145 576 l 279.84 576 l 249.504 505.586 l 241.727 
488.562 230.703 473.219 217.055 460.414 c 189.129 433.484 168.18 400.164
 156.012 363.324 c 143.844 326.488 140.824 287.242 147.215 248.977 c h
183.262 81.457 m 217.246 115.395 l 217.246 115.391 l 262.512 71.676 323.137
 47.484 386.062 48.031 c 448.992 48.578 509.188 73.816 553.684 118.316 c
 598.184 162.812 623.422 223.008 623.969 285.938 c 624.516 348.863 600.324
 409.488 556.609 454.754 c 590.547 488.691 l 590.543 488.688 l 643.004 434.371
 672.035 361.621 671.379 286.109 c 670.723 210.598 640.434 138.363 587.035
 84.965 c 533.637 31.566 461.402 1.277 385.891 0.621 c 310.379 -0.035 237.629
 28.996 183.312 81.457 c h
79.004 79.008 m 79.008 79.008 l 83.512 74.492 89.625 71.957 96 71.957 c
 102.375 71.957 108.488 74.492 112.992 79.008 c 688.992 655.008 l 695.062
 661.078 697.434 669.926 695.211 678.219 c 692.988 686.512 686.512 692.988
 678.219 695.211 c 669.926 697.434 661.078 695.062 655.008 688.992 c 79.008
 112.992 l 74.492 108.488 71.957 102.375 71.957 96 c 71.957 89.625 74.492
 83.512 79.008 79.008 c f*
Q Q
showpage
%%Trailer
%%EOF
