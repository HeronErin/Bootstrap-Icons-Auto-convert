%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
216.098 432 m 241.82 432 265.59 418.277 278.449 396 c 291.312 373.723 291.312
 346.277 278.449 324 c 265.59 301.723 241.82 288 216.098 288 c 190.371 288
 166.605 301.723 153.742 324 c 140.879 346.277 140.879 373.723 153.742 396
 c 166.605 418.277 190.371 432 216.098 432 c f
672.098 624 m 672.098 649.461 661.98 673.879 643.977 691.883 c 625.977 
709.887 601.559 720 576.098 720 c 96.098 720 l 70.637 720 46.219 709.887
 28.215 691.883 c 10.211 673.879 0.098 649.461 0.098 624 c 0.098 240 l 0.098
 214.555 10.195 190.152 28.18 172.152 c 46.164 154.152 70.555 144.027 96
 144 c 96 118.539 106.113 94.121 124.117 76.117 c 142.121 58.113 166.539
 48 192 48 c 672 48 l 697.461 48 721.879 58.113 739.883 76.117 c 757.887
 94.121 768 118.539 768 144 c 768 528 l 768 553.445 757.898 577.848 739.918
 595.848 c 721.934 613.848 697.539 623.973 672.098 624 c 672 96 m 192 96
 l 179.27 96 167.062 101.059 158.059 110.059 c 149.059 119.062 144 131.27
 144 144 c 576.098 144 l 601.559 144 625.977 154.113 643.977 172.117 c 661.98
 190.121 672.098 214.539 672.098 240 c 672.098 576 l 684.809 575.973 696.992
 570.906 705.977 561.906 c 714.957 552.91 720 540.715 720 528 c 720 144 
l 720 131.27 714.941 119.062 705.941 110.059 c 696.938 101.059 684.73 96
 672 96 c 96.098 192 m 83.367 192 71.156 197.059 62.156 206.059 c 53.152
 215.062 48.098 227.27 48.098 240 c 48.098 624 l 175.105 511.008 l 179.027
 507.098 184.18 504.668 189.691 504.125 c 195.203 503.582 200.734 504.961
 205.344 508.031 c 333.023 593.137 l 511.105 415.055 l 514.664 411.492 519.254
 409.141 524.223 408.332 c 529.195 407.52 534.293 408.297 538.801 410.543
 c 624.098 504 l 624.098 240 l 624.098 227.27 619.039 215.062 610.039 206.059
 c 601.035 197.059 588.828 192 576.098 192 c h
96.098 192 m f
Q Q
showpage
%%Trailer
%%EOF
