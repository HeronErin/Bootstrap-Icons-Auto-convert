%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:15 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
528 913.055 m 535.297 1004.641 607.68 1075.965 737.473 1084.414 c 737.473
 1152 l 795.074 1152 l 795.074 1083.938 l 929.473 1074.531 1008.004 1002.723
 1008.004 898.465 c 1008.004 803.711 947.906 754.848 840.484 729.504 c 795.078
 718.75 l 795.07 534.719 l 852.672 541.246 889.344 572.734 898.176 616.32
 c 999.168 616.32 l 991.871 528.098 916.223 459.074 795.07 451.586 c 795.07
 384 l 737.469 384 l 737.469 453.023 l 622.75 464.254 544.508 533.281 544.508
 630.91 c 544.508 717.309 602.684 772.223 699.355 794.781 c 737.469 804.188
 l 737.469 999.453 l 678.43 990.523 639.355 958.172 630.523 913.055 c h
736.992 705.117 m 680.352 691.965 649.633 665.18 649.633 624.859 c 649.633
 579.738 682.754 545.949 737.473 536.059 c 737.473 705.02 l 736.992 705.02
 l h
803.426 819.645 m 872.258 835.582 904.035 861.406 904.035 907.004 c 904.035
 959.035 864.484 994.746 795.074 1001.277 c 795.07 817.727 l h
803.426 819.645 m f
768 1440 m 589.773 1440 418.848 1369.199 292.824 1243.176 c 166.801 1117.152
 96 946.227 96 768 c 96 589.773 166.801 418.848 292.824 292.824 c 418.848
 166.801 589.773 96 768 96 c 946.227 96 1117.152 166.801 1243.176 292.824
 c 1369.199 418.848 1440 589.773 1440 768 c 1440 946.227 1369.199 1117.152
 1243.176 1243.176 c 1117.152 1369.199 946.227 1440 768 1440 c 768 1536 
m 971.688 1536 1167.031 1455.086 1311.059 1311.059 c 1455.086 1167.031 1536
 971.688 1536 768 c 1536 564.312 1455.086 368.969 1311.059 224.941 c 1167.031
 80.914 971.688 0 768 0 c 564.312 0 368.969 80.914 224.941 224.941 c 80.914
 368.969 0 564.312 0 768 c 0 971.688 80.914 1167.031 224.941 1311.059 c 
368.969 1455.086 564.312 1536 768 1536 c f
768 1296 m 627.965 1296 493.668 1240.371 394.648 1141.352 c 295.629 1042.332
 240 908.035 240 768 c 240 627.965 295.629 493.668 394.648 394.648 c 493.668
 295.629 627.965 240 768 240 c 908.035 240 1042.332 295.629 1141.352 394.648
 c 1240.371 493.668 1296 627.965 1296 768 c 1296 908.035 1240.371 1042.332
 1141.352 1141.352 c 1042.332 1240.371 908.035 1296 768 1296 c 768 1344 
m 920.766 1344 1067.273 1283.316 1175.293 1175.293 c 1283.316 1067.273 1344
 920.766 1344 768 c 1344 615.234 1283.316 468.727 1175.293 360.707 c 1067.273
 252.684 920.766 192 768 192 c 615.234 192 468.727 252.684 360.707 360.707
 c 252.684 468.727 192 615.234 192 768 c 192 920.766 252.684 1067.273 360.707
 1175.293 c 468.727 1283.316 615.234 1344 768 1344 c f
Q Q
showpage
%%Trailer
%%EOF
