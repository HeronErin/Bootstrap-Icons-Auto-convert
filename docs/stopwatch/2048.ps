%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 95 0 1440 1488
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 95 0 1440 1488
1536 1536 cairo_set_page_size
%%EndPageSetup
q 95 0 1345 1488 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 537.602 m 816 520.453 806.852 504.605 792 496.031 c 777.148 487.457
 758.852 487.457 744 496.031 c 729.148 504.605 720 520.453 720 537.602 c
 720 816 l 432 816 l 414.852 816 399.004 825.148 390.43 840 c 381.855 854.852
 381.855 873.148 390.43 888 c 399.004 902.852 414.852 912 432 912 c 768 
912 l 780.73 912 792.938 906.941 801.941 897.941 c 810.941 888.938 816 876.73
 816 864 c h
816 537.602 m f
624 96 m 624 83.27 629.059 71.062 638.059 62.059 c 647.062 53.059 659.27
 48 672 48 c 864 48 l 881.148 48 896.996 57.148 905.57 72 c 914.145 86.852
 914.145 105.148 905.57 120 c 896.996 134.852 881.148 144 864 144 c 864 
198.719 l 994.559 217.535 1113.023 273.598 1208.062 356.16 c 1209.215 354.914
 l 1243.199 320.93 l 1209.215 287.043 l 1209.215 287.039 l 1200.203 278.039
 1195.133 265.828 1195.125 253.09 c 1195.117 240.352 1200.168 228.133 1209.168
 219.121 c 1218.168 210.105 1230.379 205.039 1243.117 205.031 c 1255.855
 205.02 1268.074 210.07 1277.09 219.07 c 1412.832 354.91 l 1422.094 363.855
 1427.371 376.145 1427.484 389.02 c 1427.598 401.895 1422.531 414.273 1413.426
 423.379 c 1404.324 432.484 1391.941 437.547 1379.07 437.438 c 1366.195 
437.324 1353.906 432.043 1344.961 422.785 c 1311.074 388.801 l 1277.09 422.785
 l 1275.844 423.938 l 1275.84 423.938 l 1373.586 536.77 1430.977 678.938
 1438.957 828.008 c 1446.938 977.078 1405.055 1124.562 1319.914 1247.188
 c 1234.777 1369.812 1111.23 1460.598 968.77 1505.219 c 826.309 1549.836
 673.051 1545.75 533.172 1493.602 c 393.293 1441.449 274.758 1344.211 196.277
 1217.223 c 117.797 1090.23 83.832 940.727 99.746 792.293 c 115.664 643.859
 180.551 504.953 284.172 397.488 c 387.793 290.023 524.246 220.125 672 198.816
 c 672 144 l 659.27 144 647.062 138.941 638.059 129.941 c 629.059 120.938
 624 108.73 624 96 c 768 288 m 615.234 288.012 468.734 348.711 360.719 456.742
 c 252.707 564.77 192.035 711.285 192.047 864.047 c 192.062 1016.812 252.758
 1163.316 360.789 1271.328 c 468.82 1379.34 615.332 1440.012 768.098 1440
 c 920.859 1439.988 1067.363 1379.289 1175.375 1271.258 c 1283.387 1163.23
 1344.062 1016.715 1344.047 863.953 c 1344.035 711.188 1283.336 564.684 
1175.309 456.672 c 1067.277 348.66 920.766 287.988 768 288 c f
Q Q
showpage
%%Trailer
%%EOF
