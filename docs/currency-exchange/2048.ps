%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1535
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1535
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1535 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 480 m -0.012 591.102 38.516 698.766 109.012 784.637 c 179.512 870.504
 277.613 929.258 386.594 950.879 c 392.867 882.109 410.516 814.863 438.816
 751.871 c 354.719 723.457 300.672 658.945 288 567.359 c 240 567.359 l 240
 526.465 l 284.734 526.465 l 284.734 484.801 l 284.672 480.32 284.797 476
 285.117 471.84 c 240 471.84 l 240 430.848 l 289.055 430.848 l 310.656 311.039
 404.449 240 545.375 240 c 575.711 240 602.016 242.977 624 248.16 c 624 
318.527 l 598.316 312.852 572.059 310.207 545.762 310.656 c 457.539 310.656
 398.113 355.391 379.297 430.848 c 563.328 430.848 l 563.328 471.84 l 373.25
 471.84 l 372.992 476.32 372.898 481.023 372.961 485.953 c 372.961 526.465
 l 563.328 526.465 l 563.328 567.457 l 377.281 567.457 l 388.609 625.25 
422.211 666.336 473.762 685.441 c 524.309 601.723 593.824 531.062 676.703
 479.148 c 759.578 427.238 853.496 395.535 950.879 386.594 c 927.336 270
 861.359 166.297 765.727 95.57 c 670.098 24.84 551.617 -7.879 433.246 3.75
 c 314.871 15.379 205.023 70.527 124.984 158.512 c 44.945 246.496 0.406 
361.055 0 480 c 1536 1008 m 1536 1148.035 1480.371 1282.332 1381.352 1381.352
 c 1282.332 1480.371 1148.035 1536 1008 1536 c 867.965 1536 733.668 1480.371
 634.648 1381.352 c 535.629 1282.332 480 1148.035 480 1008 c 480 867.965
 535.629 733.668 634.648 634.648 c 733.668 535.629 867.965 480 1008 480 
c 1148.035 480 1282.332 535.629 1381.352 634.648 c 1480.371 733.668 1536
 867.965 1536 1008 c 792 1134.91 m 798.625 1215.07 863.617 1277.469 980.543
 1284.863 c 980.543 1344 l 1032.383 1344 l 1032.383 1284.48 l 1153.246 1276.223
 1224 1213.441 1224 1122.242 c 1224 1039.203 1169.953 996.48 1073.281 974.402
 c 1032.387 964.801 l 1032.383 803.902 l 1084.223 809.664 1117.246 837.215
 1125.117 875.422 c 1216.125 875.422 l 1209.406 798.238 1141.34 737.855 
1032.383 731.23 c 1032.383 672 l 980.543 672 l 980.543 732.383 l 877.246
 742.27 806.977 802.656 806.977 888.094 c 806.977 963.645 859.199 1011.742
 946.176 1031.422 c 980.543 1039.582 l 980.543 1210.461 l 927.359 1202.781
 892.223 1174.363 884.254 1134.91 c h
980.16 952.988 m 929.09 941.469 901.441 918.043 901.441 882.715 c 901.441
 843.355 931.297 813.691 980.547 805.051 c 980.547 952.891 l 980.066 952.891
 l h
1039.871 1053.211 m 1101.793 1067.133 1130.398 1089.691 1130.398 1129.625
 c 1130.398 1175.129 1094.879 1206.426 1032.477 1212.184 c 1032.477 1051.48
 l h
1039.871 1053.211 m f
Q Q
showpage
%%Trailer
%%EOF
