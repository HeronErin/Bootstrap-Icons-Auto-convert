%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:27 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 144 672 624
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 144 672 624
768 768 cairo_set_page_size
%%EndPageSetup
q 96 144 576 480 rectclip
1 0 0 -1 0 768 cm q
0 g
120 144 m 111.426 144 103.504 148.574 99.215 156 c 94.93 163.426 94.93 
172.574 99.215 180 c 103.504 187.426 111.426 192 120 192 c 648 192 l 656.574
 192 664.496 187.426 668.785 180 c 673.07 172.574 673.07 163.426 668.785
 156 c 664.496 148.574 656.574 144 648 144 c h
360 288 m 351.426 288 343.504 292.574 339.215 300 c 334.93 307.426 334.93
 316.574 339.215 324 c 343.504 331.426 351.426 336 360 336 c 648 336 l 656.574
 336 664.496 331.426 668.785 324 c 673.07 316.574 673.07 307.426 668.785
 300 c 664.496 292.574 656.574 288 648 288 c h
360 432 m 351.426 432 343.504 436.574 339.215 444 c 334.93 451.426 334.93
 460.574 339.215 468 c 343.504 475.426 351.426 480 360 480 c 648 480 l 656.574
 480 664.496 475.426 668.785 468 c 673.07 460.574 673.07 451.426 668.785
 444 c 664.496 436.574 656.574 432 648 432 c h
120 576 m 111.426 576 103.504 580.574 99.215 588 c 94.93 595.426 94.93 
604.574 99.215 612 c 103.504 619.426 111.426 624 120 624 c 648 624 l 656.574
 624 664.496 619.426 668.785 612 c 673.07 604.574 673.07 595.426 668.785
 588 c 664.496 580.574 656.574 576 648 576 c h
157.922 318.098 m 163.297 314.355 170.402 309.953 179.234 304.898 c 169.152
 288 l 163.297 291.551 156.062 296.145 147.457 301.777 c 138.816 307.41 
130.656 314.258 122.977 322.32 c 115.344 330.348 108.91 339.434 103.871 
349.297 c 98.625 359.215 96 370.289 96 382.512 c 96 399.793 99.473 413.758
 106.414 424.414 c 113.359 434.91 124.879 440.156 140.973 440.156 c 151.277
 440.156 159.34 436.781 165.164 430.027 c 165.168 430.031 l 170.809 423.988
 174.02 416.074 174.191 407.809 c 174.191 396.77 170.816 388.434 164.062
 382.801 c 157.504 376.977 148.414 374.066 136.797 374.066 c 123.262 374.066
 l 124.414 364.305 126.383 356.34 129.164 350.164 c 129.168 350.16 l 132.223
 343.629 136.305 337.633 141.266 332.398 c 146.234 327.012 151.809 322.215
 157.871 318.098 c h
261.938 318.098 m 267.379 314.355 274.496 309.953 283.297 304.898 c 273.215
 288 l 267.359 291.551 260.125 296.145 251.52 301.777 c 242.879 307.41 234.719
 314.258 227.039 322.32 c 219.41 330.348 212.973 339.434 207.938 349.297
 c 202.656 359.219 200.035 370.289 200.066 382.512 c 200.066 399.793 203.539
 413.758 210.48 424.414 c 217.426 434.91 228.945 440.156 245.039 440.156
 c 255.344 440.156 263.406 436.781 269.23 430.027 c 269.23 430.031 l 274.871
 423.988 278.086 416.074 278.258 407.809 c 278.258 396.77 274.883 388.434
 268.129 382.801 c 261.57 376.977 252.48 374.066 240.863 374.066 c 227.328
 374.066 l 227.328 374.062 l 228.094 365.965 230 358.016 232.992 350.449
 c 235.777 344.242 239.887 338.242 245.328 332.449 c 250.293 327.027 255.867
 322.195 261.938 318.047 c h
261.938 318.098 m f
Q Q
showpage
%%Trailer
%%EOF
