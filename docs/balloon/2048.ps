%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 288 23 1248 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 288 23 1248 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 288 23 960 1513 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 958.465 m 998.688 912.574 1152 718.078 1152 480 c 1152 378.156 1111.543
 280.484 1039.527 208.473 c 967.516 136.457 869.844 96 768 96 c 666.156 
96 568.484 136.457 496.473 208.473 c 424.457 280.484 384 378.156 384 480
 c 384 718.078 537.312 912.574 768 958.465 c 1248 480 m 1248 752.352 1076.258
 981.793 814.078 1046.496 c 837.504 1093.25 l 837.504 1093.246 l 841.344
 1100.93 840.797 1110.078 836.062 1117.246 c 831.332 1124.414 823.133 1128.512
 814.559 1128 c 805.984 1127.484 798.336 1122.434 794.496 1114.754 c 793.727
 1113.121 l 794.496 1123.68 795.648 1132.512 797.277 1140.961 c 802.461 
1166.883 812.734 1187.809 837.5 1237.25 c 865.148 1292.738 860.059 1347.648
 844.797 1393.633 c 829.727 1438.656 804.285 1476.863 788.348 1500.672 c
 787.965 1501.344 l 787.969 1501.344 l 783.199 1508.477 774.988 1512.527
 766.43 1511.965 c 757.867 1511.402 750.254 1506.316 746.461 1498.621 c 
742.664 1490.926 743.266 1481.789 748.031 1474.656 c 764.16 1450.465 786.43
 1417.055 799.199 1378.367 c 811.969 1340.352 814.848 1299.262 794.496 1258.75
 c 793.25 1256.062 l 770.211 1209.984 756.77 1183.293 750.242 1150.27 c 
750.238 1150.273 l 747.488 1136.02 745.82 1121.578 745.246 1107.07 c 741.406
 1114.75 l 741.406 1114.754 l 738.586 1120.492 733.59 1124.871 727.527 1126.91
 c 721.465 1128.953 714.836 1128.488 709.117 1125.621 c 703.398 1122.758
 699.059 1117.727 697.062 1111.648 c 695.07 1105.566 695.586 1098.945 698.496
 1093.246 c 721.922 1046.492 l 459.742 981.793 288 752.352 288 480 c 288
 352.695 338.57 230.605 428.59 140.59 c 518.605 50.57 640.695 0 768 0 c 
895.305 0 1017.395 50.57 1107.41 140.59 c 1197.43 230.605 1248 352.695 1248
 480 c 581.953 432.48 m 590.48 399.082 607.844 368.594 632.219 344.219 c
 656.594 319.844 687.082 302.48 720.48 293.953 c 746.207 287.426 768 266.496
 768 240 c 768 213.504 746.305 191.617 720.191 195.938 c 661.156 205.883
 606.684 233.984 564.359 276.328 c 522.035 318.668 493.957 373.152 484.031
 432.191 c 479.617 458.305 501.504 480 528 480 c 554.496 480 575.426 458.207
 581.953 432.48 c f*
Q Q
showpage
%%Trailer
%%EOF
