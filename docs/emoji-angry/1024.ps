%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 720 m 294.887 720 209.426 684.602 146.414 621.586 c 83.398 558.574 
48 473.113 48 384 c 48 294.887 83.398 209.426 146.414 146.414 c 209.426 
83.398 294.887 48 384 48 c 473.113 48 558.574 83.398 621.586 146.414 c 684.602
 209.426 720 294.887 720 384 c 720 473.113 684.602 558.574 621.586 621.586
 c 558.574 684.602 473.113 720 384 720 c 384 768 m 485.844 768 583.516 727.543
 655.527 655.527 c 727.543 583.516 768 485.844 768 384 c 768 282.156 727.543
 184.484 655.527 112.473 c 583.516 40.457 485.844 0 384 0 c 282.156 0 184.484
 40.457 112.473 112.473 c 40.457 184.484 0 282.156 0 384 c 0 485.844 40.457
 583.516 112.473 655.527 c 184.484 727.543 282.156 768 384 768 c f
205.68 596.785 m 211.191 599.965 217.742 600.828 223.891 599.18 c 230.039
 597.535 235.281 593.512 238.465 588 c 253.211 562.453 274.426 541.242 299.977
 526.496 c 325.523 511.75 354.504 503.992 384 504 c 446.16 504 500.449 537.742
 529.535 588 c 533.852 595.363 541.758 599.883 550.293 599.863 c 558.832
 599.844 566.715 595.293 571 587.906 c 575.281 580.523 575.324 571.422 571.105
 564 c 552.141 531.156 524.867 503.887 492.023 484.93 c 459.18 465.969 421.922
 455.992 384 456 c 346.078 455.992 308.82 465.969 275.977 484.93 c 243.133
 503.887 215.859 531.156 196.895 564 c 193.715 569.512 192.852 576.062 194.5
 582.211 c 196.145 588.359 200.168 593.602 205.68 596.785 c 541.246 194.547
 m 541.246 194.543 l 546.945 191.633 553.566 191.117 559.648 193.113 c 565.727
 195.105 570.758 199.445 573.621 205.164 c 576.488 210.883 576.953 217.512
 574.91 223.574 c 572.871 229.637 568.492 234.633 562.754 237.457 c 514.32
 261.648 l 522.77 274.609 528 292.367 528 312 c 528 351.742 506.496 384 
480 384 c 453.504 384 432 351.742 432 312 c 432 300.145 433.922 288.961 
437.281 279.07 c 432.758 273.402 431.031 266 432.578 258.914 c 434.121 251.828
 438.777 245.816 445.246 242.543 c h
226.75 194.547 m 226.754 194.543 l 219.098 190.781 210.02 191.367 202.91
 196.078 c 195.797 200.789 191.723 208.922 192.203 217.438 c 192.688 225.953
 197.652 233.574 205.246 237.457 c 253.68 261.648 l 244.414 276.785 239.668
 294.254 240 312 c 240 351.742 261.504 384 288 384 c 314.496 384 336 351.742
 336 312 c 336 300.145 334.078 288.961 330.719 279.07 c 335.242 273.402 
336.969 266 335.422 258.914 c 333.879 251.828 329.223 245.816 322.754 242.543
 c h
226.75 194.547 m f
Q Q
showpage
%%Trailer
%%EOF
