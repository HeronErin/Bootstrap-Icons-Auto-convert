%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:45 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 384 m 0 333.078 20.227 284.242 56.234 248.234 c 92.242 212.227 141.078
 192 192 192 c 1344 192 l 1377.703 192 1410.812 200.871 1440 217.723 c 1469.188
 234.574 1493.426 258.812 1510.277 288 c 1527.129 317.188 1536 350.297 1536
 384 c 1536 1152 l 1536 1185.703 1527.129 1218.812 1510.277 1248 c 1493.426
 1277.188 1469.188 1301.426 1440 1318.277 c 1410.812 1335.129 1377.703 1344
 1344 1344 c 192 1344 l 141.078 1344 92.242 1323.773 56.234 1287.766 c 20.227
 1251.758 0 1202.922 0 1152 c h
864 528 m 864 540.73 869.059 552.938 878.059 561.941 c 887.062 570.941 
899.27 576 912 576 c 1296 576 l 1313.148 576 1328.996 566.852 1337.57 552
 c 1346.145 537.148 1346.145 518.852 1337.57 504 c 1328.996 489.148 1313.148
 480 1296 480 c 912 480 l 899.27 480 887.062 485.059 878.059 494.059 c 869.059
 503.062 864 515.27 864 528 c 864 768 m 864 780.73 869.059 792.938 878.059
 801.941 c 887.062 810.941 899.27 816 912 816 c 1296 816 l 1313.148 816 
1328.996 806.852 1337.57 792 c 1346.145 777.148 1346.145 758.852 1337.57
 744 c 1328.996 729.148 1313.148 720 1296 720 c 912 720 l 899.27 720 887.062
 725.059 878.059 734.059 c 869.059 743.062 864 755.27 864 768 c 960 1008
 m 960 1020.73 965.059 1032.938 974.059 1041.941 c 983.062 1050.941 995.27
 1056 1008 1056 c 1296 1056 l 1313.148 1056 1328.996 1046.852 1337.57 1032
 c 1346.145 1017.148 1346.145 998.852 1337.57 984 c 1328.996 969.148 1313.148
 960 1296 960 c 1008 960 l 995.27 960 983.062 965.059 974.059 974.059 c 
965.059 983.062 960 995.27 960 1008 c 864 1200 m 864 1014.434 692.16 864
 480 864 c 279.742 864 115.199 998.207 97.535 1169.375 c 101.602 1191.461
 113.277 1211.422 130.535 1225.785 c 147.797 1240.152 169.543 1248.012 192
 1248 c 860.16 1248 l 862.719 1232.32 864 1216.32 864 1200 c 672 576 m 672
 525.078 651.773 476.242 615.766 440.234 c 579.758 404.227 530.922 384 480
 384 c 429.078 384 380.242 404.227 344.234 440.234 c 308.227 476.242 288
 525.078 288 576 c 288 626.922 308.227 675.758 344.234 711.766 c 380.242
 747.773 429.078 768 480 768 c 530.922 768 579.758 747.773 615.766 711.766
 c 651.773 675.758 672 626.922 672 576 c f
Q Q
showpage
%%Trailer
%%EOF
