%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 283 1440 1312
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 283 1440 1312
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 283 1344 1029 rectclip
1 0 0 -1 0 1536 cm q
0 g
480 1104 m 480 1091.27 485.059 1079.062 494.059 1070.059 c 503.062 1061.059
 515.27 1056 528 1056 c 1392 1056 l 1409.148 1056 1424.996 1065.148 1433.57
 1080 c 1442.145 1094.852 1442.145 1113.148 1433.57 1128 c 1424.996 1142.852
 1409.148 1152 1392 1152 c 528 1152 l 515.27 1152 503.062 1146.941 494.059
 1137.941 c 485.059 1128.938 480 1116.73 480 1104 c 480 720 m 480 707.27
 485.059 695.062 494.059 686.059 c 503.062 677.059 515.27 672 528 672 c 
1392 672 l 1409.148 672 1424.996 681.148 1433.57 696 c 1442.145 710.852 
1442.145 729.148 1433.57 744 c 1424.996 758.852 1409.148 768 1392 768 c 
528 768 l 515.27 768 503.062 762.941 494.059 753.941 c 485.059 744.938 480
 732.73 480 720 c 480 336 m 480 323.27 485.059 311.062 494.059 302.059 c
 503.062 293.059 515.27 288 528 288 c 1392 288 l 1409.148 288 1424.996 297.148
 1433.57 312 c 1442.145 326.852 1442.145 345.148 1433.57 360 c 1424.996 
374.852 1409.148 384 1392 384 c 528 384 l 515.27 384 503.062 378.941 494.059
 369.941 c 485.059 360.938 480 348.73 480 336 c f*
164.449 1139.039 m 164.449 1093.535 l 192 1093.535 l 212.832 1093.535 226.848
 1080.383 226.848 1063.102 c 226.848 1045.34 211.68 1033.34 192.191 1033.34
 c 170.785 1033.34 156.961 1047.934 156.383 1063.102 c 99.742 1063.102 l
 101.277 1018.27 135.551 987.551 194.398 987.551 c 250.848 987.359 285.984
 1015.488 286.27 1055.039 c 286.273 1055.039 l 286.453 1068.605 281.801 
1081.793 273.148 1092.242 c 264.492 1102.691 252.402 1109.715 239.039 1112.062
 c 239.039 1115.23 l 254.191 1116.363 268.32 1123.289 278.496 1134.57 c 
288.668 1145.852 294.102 1160.621 293.664 1175.809 c 293.953 1226.977 245.473
 1252.609 192.77 1252.609 c 129.793 1252.609 96.77 1217.09 96 1176.387 c
 151.871 1176.387 l 152.641 1193.477 169.727 1205.762 192.383 1206.051 c
 216.766 1206.051 233.086 1192.129 232.895 1172.449 c 232.703 1153.73 218.016
 1139.043 193.152 1139.043 c 164.352 1139.043 l h
164.066 687.934 m 106.082 687.934 l 106.082 684.574 l 106.082 645.406 134.402
 603.551 198.051 603.551 c 254.02 603.551 290.211 634.848 290.211 676.125
 c 290.211 713.469 265.539 735.355 244.516 757.531 c 192.965 812.441 l 192.965
 815.32 l 294.148 815.32 l 294.145 864 l 109.727 864 l 109.727 826.078 l
 201.598 731.039 l 214.844 717.406 229.727 701.855 229.727 682.27 c 229.727
 664.988 215.613 651.551 196.895 651.551 c 188.16 651.23 179.684 654.535
 173.465 660.68 c 167.25 666.824 163.848 675.262 164.062 684 c h
246.145 480 m 185.184 480 l 185.184 280.703 l 182.207 280.703 l 124.801
 321.023 l 124.801 266.59 l 185.184 224.062 l 246.145 224.062 l h
246.145 480 m f
Q Q
showpage
%%Trailer
%%EOF
