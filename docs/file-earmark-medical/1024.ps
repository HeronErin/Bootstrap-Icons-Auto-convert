%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
360 264 m 360 255.426 355.426 247.504 348 243.215 c 340.574 238.93 331.426
 238.93 324 243.215 c 316.574 247.504 312 255.426 312 264 c 312 294.434 
l 285.648 279.219 l 285.648 279.215 l 280.133 275.984 273.555 275.082 267.375
 276.719 c 261.195 278.352 255.922 282.383 252.727 287.922 c 249.527 293.457
 248.672 300.039 250.348 306.207 c 252.023 312.379 256.09 317.625 261.648
 320.785 c 288 336 l 261.648 351.215 l 256.09 354.375 252.023 359.621 250.348
 365.793 c 248.672 371.961 249.527 378.543 252.727 384.078 c 255.922 389.617
 261.195 393.648 267.375 395.281 c 273.555 396.918 280.133 396.016 285.648
 392.785 c 312 377.57 l 312 408 l 312 416.574 316.574 424.496 324 428.785
 c 331.426 433.07 340.574 433.07 348 428.785 c 355.426 424.496 360 416.574
 360 408 c 360 377.566 l 386.352 392.781 l 386.352 392.785 l 391.867 396.016
 398.445 396.918 404.625 395.281 c 410.805 393.648 416.078 389.617 419.273
 384.078 c 422.473 378.543 423.328 371.961 421.652 365.793 c 419.977 359.621
 415.91 354.375 410.352 351.215 c 384 336 l 410.352 320.785 l 415.91 317.625
 419.977 312.379 421.652 306.207 c 423.328 300.039 422.473 293.457 419.273
 287.922 c 416.078 282.383 410.805 278.352 404.625 276.719 c 398.445 275.082
 391.867 275.984 386.352 279.215 c 360 294.43 l h
264 480 m 255.426 480 247.504 484.574 243.215 492 c 238.93 499.426 238.93
 508.574 243.215 516 c 247.504 523.426 255.426 528 264 528 c 504 528 l 512.574
 528 520.496 523.426 524.785 516 c 529.07 508.574 529.07 499.426 524.785
 492 c 520.496 484.574 512.574 480 504 480 c h
264 576 m 255.426 576 247.504 580.574 243.215 588 c 238.93 595.426 238.93
 604.574 243.215 612 c 247.504 619.426 255.426 624 264 624 c 504 624 l 512.574
 624 520.496 619.426 524.785 612 c 529.07 604.574 529.07 595.426 524.785
 588 c 520.496 580.574 512.574 576 504 576 c h
264 576 m f
672 672 m 672 216 l 456 0 l 192 0 l 166.539 0 142.121 10.113 124.117 28.117
 c 106.113 46.121 96 70.539 96 96 c 96 672 l 96 697.461 106.113 721.879 
124.117 739.883 c 142.121 757.887 166.539 768 192 768 c 576 768 l 601.461
 768 625.879 757.887 643.883 739.883 c 661.887 721.879 672 697.461 672 672
 c 456 144 m 456 163.094 463.586 181.41 477.09 194.91 c 490.59 208.414 508.906
 216 528 216 c 624 216 l 624 672 l 624 684.73 618.941 696.938 609.941 705.941
 c 600.938 714.941 588.73 720 576 720 c 192 720 l 179.27 720 167.062 714.941
 158.059 705.941 c 149.059 696.938 144 684.73 144 672 c 144 96 l 144 83.27
 149.059 71.062 158.059 62.059 c 167.062 53.059 179.27 48 192 48 c 456 48
 l h
456 144 m f
Q Q
showpage
%%Trailer
%%EOF
