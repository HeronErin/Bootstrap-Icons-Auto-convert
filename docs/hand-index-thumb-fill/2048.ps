%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 82 0 1521 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 82 0 1521 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 82 0 1439 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 168 m 816 428.734 l 820.512 428.543 l 850.465 427.391 891.742 427.008
 921.406 432.957 c 948.285 438.332 973.535 450.238 992.254 460.605 c 1018.461
 475.199 1036.031 497.566 1046.016 522.238 c 1058.688 521.086 l 1088.641
 518.781 1134.91 517.438 1169.855 531.453 c 1205.375 545.66 1236 578.207
 1254.336 600.188 c 1261.566 608.957 1267.809 616.891 1273.055 623.996 c
 1328.926 623.996 l 1328.93 624 l 1364.797 624 1399.945 634.051 1430.395
 653.008 c 1460.844 671.961 1485.375 699.07 1501.207 731.254 c 1517.039 
763.438 1523.535 799.414 1519.969 835.105 c 1493.855 1095.746 l 1493.855
 1095.742 l 1489.168 1142.691 1474.645 1188.125 1451.23 1229.09 c 1317.309
 1463.426 l 1317.312 1463.426 l 1304.723 1485.465 1286.531 1503.785 1264.582
 1516.531 c 1242.633 1529.273 1217.703 1535.992 1192.32 1536 c 587.328 1536
 l 560.57 1536 534.344 1528.543 511.59 1514.469 c 488.832 1500.395 470.449
 1480.258 458.496 1456.32 c 341.855 1223.039 l 102.719 824.543 l 78.309 
783.562 75.512 733.223 95.238 689.793 c 114.965 646.359 154.707 615.34 201.629
 606.758 c 248.555 598.176 296.703 613.117 330.527 646.754 c 480 796.129
 l 480 168 l 480 123.445 497.699 80.711 529.207 49.207 c 560.711 17.699 
603.445 0 648 0 c 692.555 0 735.289 17.699 766.793 49.207 c 798.301 80.711
 816 123.445 816 168 c f
Q Q
showpage
%%Trailer
%%EOF
