%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:20 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 336
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 288 rectclip
1 0 0 -1 0 384 cm q
0 g
74.688 87.48 m 73.707 77.375 77.039 67.324 83.863 59.805 c 90.684 52.289
 100.367 48 110.52 48 c 168 48 l 171.184 48 174.234 49.266 176.484 51.516
 c 178.734 53.766 180 56.816 180 60 c 180 69.168 l 180 85.871 168.07 97.535
 159.07 104.426 c 158 105.207 157.07 106.164 156.312 107.258 c 156.023 107.859
 l 156 108 l 156 108.07 l 156.07 108.309 l 156.148 108.547 156.438 108.973
 156.934 109.582 c 156.938 109.586 l 158.789 111.523 160.984 113.105 163.414
 114.238 c 170.16 117.602 180.238 120 192 120 c 203.809 120 213.887 117.602
 220.559 114.238 c 223 113.105 225.203 111.527 227.062 109.586 c 227.422
 109.203 227.711 108.766 227.93 108.289 c 228 108.051 l 228 107.859 l 227.711
 107.258 l 226.953 106.164 226.023 105.207 224.953 104.426 c 215.953 97.539
 204.023 85.875 204.023 69.168 c 204.023 60 l 204.023 53.383 209.383 48.012
 216 48 c 273.48 48 l 283.633 48 293.316 52.289 300.137 59.805 c 306.961
 67.324 310.293 77.375 309.312 87.48 c 303.48 156 l 309.168 156 l 313.848
 156 319.246 152.473 325.367 144.48 c 330.406 137.906 338.039 132 348 132
 c 361.633 132 370.727 142.727 375.695 152.688 c 381.047 163.367 384 177.289
 384 192 c 384 206.711 381.047 220.633 375.695 231.312 c 370.727 241.273
 361.633 252 348 252 c 338.039 252 330.406 246.098 325.367 239.52 c 319.246
 231.527 313.848 228 309.168 228 c 303.48 228 l 309.312 296.52 l 310.293
 306.625 306.961 316.676 300.137 324.195 c 293.316 331.711 283.633 336 273.48
 336 c 216 336 l 209.371 336 204 330.629 204 324 c 204 314.832 l 204 298.129
 215.93 286.465 224.93 279.574 c 226 278.793 226.93 277.836 227.688 276.742
 c 227.977 276.141 l 228 275.996 l 228 275.926 l 227.93 275.688 l 227.711
 275.219 227.418 274.789 227.062 274.414 c 225.211 272.477 223.016 270.895
 220.586 269.762 c 213.84 266.398 203.762 264 192 264 c 180.238 264 170.113
 266.398 163.441 269.762 c 161 270.895 158.797 272.473 156.938 274.414 c
 156.578 274.797 156.289 275.234 156.07 275.711 c 156 275.949 l 156 275.996
 l 156.023 276.141 l 156.312 276.742 l 156.695 277.391 157.512 278.375 159.074
 279.574 c 168.074 286.461 180.004 298.125 180.004 314.832 c 180.004 324
 l 180 324 l 180 327.184 178.734 330.234 176.484 332.484 c 174.234 334.734
 171.184 336 168 336 c 110.52 336 l 100.367 336 90.684 331.711 83.863 324.195
 c 77.039 316.676 73.707 306.625 74.688 296.52 c 80.543 228 l 74.832 228
 l 70.152 228 64.754 231.527 58.633 239.52 c 53.594 246.094 45.961 252 36
 252 c 22.367 252 13.273 241.273 8.305 231.312 c 2.953 220.633 0 206.711
 0 192 c 0 177.289 2.953 163.367 8.305 152.688 c 13.273 142.727 22.367 132
 36 132 c 45.961 132 53.594 137.902 58.633 144.48 c 64.754 152.473 70.152
 156 74.832 156 c 80.543 156 l h
74.688 87.48 m f
Q Q
showpage
%%Trailer
%%EOF
