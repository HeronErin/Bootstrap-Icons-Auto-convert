%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
381.551 383.902 m 381.84 383.758 l 381.984 384.191 l h
382.75 382.559 m 382.75 381.117 l 383.613 381.598 l h
382.75 383.277 m 384.672 382.223 l 385.152 382.512 l 385.152 384.434 l 
383.762 385.203 l 382.754 384.629 l h
385.102 386.012 m 385.102 385.34 l 384.719 385.82 l h
382.703 385.629 m 382.992 385.629 l 382.703 385.82 l h
382.703 385.629 m f
384 0 m 282.156 0 184.484 40.457 112.473 112.473 c 40.457 184.484 0 282.156
 0 384 c 0 485.844 40.457 583.516 112.473 655.527 c 184.484 727.543 282.156
 768 384 768 c 485.844 768 583.516 727.543 655.527 655.527 c 727.543 583.516
 768 485.844 768 384 c 768 282.156 727.543 184.484 655.527 112.473 c 583.516
 40.457 485.844 0 384 0 c 238.32 81.121 m 295.883 53.359 360.195 42.664 
423.648 50.305 c 458.305 87.121 480.145 140.879 480.145 200.785 c 480.145
 280.273 441.648 349.008 385.824 381.555 c 446.449 393.074 513.266 342.434
 549.312 249.938 c 567.551 203.137 575.09 152.832 572.93 106.129 c 625.531
 141.953 666.934 191.922 692.352 250.273 c 677.809 298.754 642.145 344.641
 590.207 374.594 c 521.086 414.531 441.887 415.395 385.727 382.898 c 386.109
 383.906 l 386.684 383.617 l 386.203 384.098 l 406.363 442.562 483.738 475.297
 582.043 460.227 c 582.047 460.223 l 630.855 452.648 677.543 434.977 719.137
 408.336 c 714.629 471.949 692.012 532.941 653.953 584.113 c 604.512 596.016
 546.672 588.145 494.496 558 c 425.711 518.305 385.441 450.672 385.105 386.16
 c 384.531 386.016 l 343.973 432.672 354.293 516.094 416.5 593.711 c 416.496
 593.711 l 447.531 632.258 486.281 663.895 530.258 686.594 c 472.746 714.477
 408.449 725.305 344.977 717.793 c 310.082 680.977 288.047 626.977 288.047
 566.785 c 288.047 487.199 326.641 418.418 382.559 385.922 c 382.461 385.586
 l 321.691 373.586 254.492 424.227 218.301 517.105 c 218.305 517.105 l 200.504
 563.137 192.496 612.379 194.785 661.68 c 142.039 625.676 100.594 575.441
 75.266 516.816 c 89.762 468.336 125.426 422.398 177.406 392.352 c 246.43
 352.512 325.438 351.551 381.551 383.902 c 381.789 383.613 l 361.824 324.961
 284.352 292.078 185.855 307.199 c 135.934 314.879 88.414 333.598 48.91 
359.039 c 53.57 295.273 76.426 234.188 114.77 183.023 c 114.672 183.168 
l 163.871 171.504 221.426 179.426 273.359 209.426 c 342 249.074 382.27 316.465
 382.801 380.93 c 384 381.168 l 424.176 334.414 413.762 251.281 351.695 
173.855 c 320.754 135.422 282.141 103.855 238.32 81.168 c h
238.32 81.121 m f*
Q Q
showpage
%%Trailer
%%EOF
