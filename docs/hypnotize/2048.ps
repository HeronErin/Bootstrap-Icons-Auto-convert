%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
763.105 767.809 m 763.68 767.52 l 763.969 768.383 l h
765.504 765.121 m 765.504 762.242 l 767.23 763.203 l h
765.504 766.562 m 769.344 764.449 l 770.305 765.023 l 770.305 768.863 l
 767.52 770.398 l 765.504 769.246 l h
770.207 772.035 m 770.207 770.691 l 769.438 771.652 l h
765.406 771.266 m 765.98 771.266 l 765.406 771.648 l h
765.406 771.266 m f
768 0 m 564.312 0 368.969 80.914 224.941 224.941 c 80.914 368.969 0 564.312
 0 768 c 0 971.688 80.914 1167.031 224.941 1311.059 c 368.969 1455.086 564.312
 1536 768 1536 c 971.688 1536 1167.031 1455.086 1311.059 1311.059 c 1455.086
 1167.031 1536 971.688 1536 768 c 1536 564.312 1455.086 368.969 1311.059
 224.941 c 1167.031 80.914 971.688 0 768 0 c 476.641 162.238 m 591.77 106.715
 720.395 85.328 847.297 100.609 c 916.609 174.242 960.289 281.762 960.289
 401.57 c 960.289 560.547 883.297 698.02 771.648 763.105 c 892.895 786.145
 1026.527 684.867 1098.625 499.875 c 1135.105 406.273 1150.176 305.668 1145.855
 212.258 c 1251.066 283.906 1333.867 383.848 1384.703 500.543 c 1355.613
 597.504 1284.289 689.277 1180.414 749.184 c 1042.176 829.055 883.773 830.785
 771.453 765.793 c 772.223 767.809 l 773.375 767.234 l 772.414 768.195 l
 812.734 885.125 967.484 950.594 1164.094 920.453 c 1164.098 920.449 l 1261.711
 905.293 1355.09 869.949 1438.273 816.672 c 1429.262 943.898 1384.023 1065.883
 1307.902 1168.223 c 1209.023 1192.031 1093.344 1176.285 988.992 1116 c 
851.426 1036.609 770.879 901.344 770.207 772.32 c 769.055 772.031 l 687.934
 865.344 708.574 1032.191 832.992 1187.422 c 832.992 1187.426 l 895.062 
1264.516 972.559 1327.789 1060.512 1373.184 c 945.488 1428.953 816.898 1450.609
 689.953 1435.586 c 620.16 1361.953 576.098 1253.953 576.098 1133.57 c 576.098
 974.402 653.281 836.836 765.121 771.844 c 764.93 771.172 l 643.395 747.172
 508.992 848.453 436.609 1034.211 c 436.609 1034.207 l 401.008 1126.277 
384.988 1224.754 389.566 1323.359 c 284.078 1251.352 201.188 1150.883 150.527
 1033.633 c 179.52 936.672 250.848 844.801 354.816 784.703 c 492.863 705.023
 650.879 703.102 763.105 767.809 c 763.586 767.234 l 723.648 649.922 568.703
 584.16 371.711 614.398 c 271.871 629.758 176.832 667.199 97.824 718.078
 c 107.137 590.551 152.852 468.371 229.535 366.047 c 229.344 366.336 l 327.742
 343.008 442.848 358.848 546.719 418.848 c 684 498.145 764.543 632.926 765.598
 761.855 c 768 762.336 l 848.352 668.832 827.52 502.559 703.391 347.711 
c 641.504 270.84 564.281 207.707 476.641 162.336 c h
476.641 162.238 m f*
Q Q
showpage
%%Trailer
%%EOF
