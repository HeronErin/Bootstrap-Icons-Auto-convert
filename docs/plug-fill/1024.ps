%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 576 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 576 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 480 768 rectclip
1 0 0 -1 0 768 cm q
0 g
288 0 m 294.363 0 300.469 2.527 304.969 7.031 c 309.473 11.531 312 17.637
 312 24 c 312 144 l 456 144 l 456 24 l 456 15.426 460.574 7.504 468 3.215
 c 475.426 -1.07 484.574 -1.07 492 3.215 c 499.426 7.504 504 15.426 504 
24 c 504 144 l 552 144 l 558.363 144 564.469 146.527 568.969 151.031 c 573.473
 155.531 576 161.637 576 168 c 576 312 l 576 341.488 568.238 370.461 553.492
 396 c 538.746 421.539 517.539 442.746 492 457.492 c 466.461 472.238 437.488
 480 408 480 c 407.902 500.832 407.52 520.559 406.078 538.559 c 404.109 
563.23 400.031 586.703 390.863 606.91 c 381.578 628.289 365.109 645.746 
344.305 656.258 c 322.801 667.199 296.113 672 264 672 c 216.098 672 186.719
 687.84 169.246 706.465 c 153.465 723.117 144.461 745.059 144 768 c 96 768
 l 96 738.434 107.137 702.383 134.258 673.535 c 161.953 644.16 204.527 624
 264 624 c 291.887 624 310.176 619.777 322.465 613.488 c 334.031 607.586
 341.664 599.09 347.137 587.09 c 352.945 574.32 356.402 557.281 358.176 
534.77 c 359.473 518.449 359.855 500.305 359.953 480 c 315.402 479.988 272.684
 462.281 241.188 430.777 c 209.691 399.273 192 356.547 192 312 c 192 168
 l 192 161.637 194.527 155.531 199.031 151.031 c 203.531 146.527 209.637
 144 216 144 c 264 144 l 264 24 l 264 17.637 266.527 11.531 271.031 7.031
 c 275.531 2.527 281.637 0 288 0 c f
Q Q
showpage
%%Trailer
%%EOF
