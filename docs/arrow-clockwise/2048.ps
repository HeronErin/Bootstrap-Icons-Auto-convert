%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:51 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 192 1345 1509
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 192 1345 1509
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 192 1153 1317 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 288 m 664.258 288.039 563.32 321.688 480.309 383.906 c 397.293 446.125
 336.672 533.566 307.523 633.129 c 278.375 732.691 282.266 839.016 318.613
 936.184 c 354.961 1033.348 421.812 1116.121 509.152 1172.105 c 596.492 
1228.09 699.617 1254.273 803.086 1246.73 c 906.551 1239.188 1004.789 1198.324
 1083.086 1130.266 c 1161.383 1062.207 1215.523 970.613 1237.395 869.203
 c 1259.27 767.793 1247.695 662.027 1204.414 567.742 c 1198.074 552.312 
1200.199 534.691 1210.035 521.211 c 1219.867 507.73 1235.996 500.324 1252.629
 501.648 c 1269.262 502.977 1284.012 512.844 1291.586 527.711 c 1343.52 
640.855 1357.398 767.781 1331.145 889.477 c 1304.887 1011.172 1239.91 1121.082
 1145.945 1202.75 c 1051.98 1284.418 934.082 1333.441 809.918 1342.48 c 
685.75 1351.52 562 1320.086 457.195 1252.887 c 352.395 1185.691 272.184 
1086.348 228.582 969.738 c 184.98 853.129 180.328 725.531 215.332 606.059
 c 250.332 486.586 323.102 381.668 422.734 307.023 c 522.367 232.379 643.504
 192.02 768 192 c h
768 288 m f*
768 428.734 m 768 51.266 l 768.004 45.152 770.336 39.27 774.527 34.82 c
 778.719 30.371 784.449 27.688 790.551 27.316 c 796.652 26.949 802.664 28.922
 807.359 32.832 c 1033.918 221.566 l 1045.438 231.168 1045.438 248.832 1033.918
 258.43 c 807.359 447.168 l 802.664 451.078 796.652 453.051 790.551 452.684
 c 784.449 452.312 778.719 449.629 774.527 445.18 c 770.336 440.73 768.004
 434.848 768 428.734 c f
Q Q
showpage
%%Trailer
%%EOF
