%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:39 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 288 1536 1248
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 288 1536 1248
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 288 1536 960 rectclip
1 0 0 -1 0 1536 cm q
0 g
637.824 1065.023 m 646.828 1055.84 659.141 1050.652 672 1050.625 c 864 
1050.625 l 876.859 1050.652 889.172 1055.84 898.176 1065.023 c 914.977 1082.016
 935.617 1098.336 956.062 1112.641 c 979.188 1128.73 1003.297 1143.352 1028.258
 1156.414 c 1029.219 1156.988 l 1029.508 1156.988 l 1029.504 1156.992 l 
1042.555 1163.461 1051.965 1175.504 1055.078 1189.734 c 1058.195 1203.965
 1054.68 1218.836 1045.527 1230.168 c 1036.371 1241.496 1022.566 1248.059
 1008 1248 c 528 1248 l 513.48 1248 499.742 1241.426 490.633 1230.125 c 
481.52 1218.82 478.016 1204 481.098 1189.812 c 484.18 1175.625 493.516 1163.594
 506.496 1157.09 c 506.688 1156.992 l 507.648 1156.418 l 507.648 1156.414
 l 514.605 1152.914 521.457 1149.199 528.191 1145.281 c 545.867 1135.09 
563.129 1124.203 579.938 1112.641 c 600.48 1098.242 621.027 1082.016 637.824
 1065.023 c 672 624 m 672 589.703 690.297 558.012 720 540.863 c 749.703 
523.711 786.297 523.711 816 540.863 c 845.703 558.012 864 589.703 864 624
 c 864 658.297 845.703 689.988 816 707.137 c 786.297 724.289 749.703 724.289
 720 707.137 c 690.297 689.988 672 658.297 672 624 c f
192 288 m 141.078 288 92.242 308.227 56.234 344.234 c 20.227 380.242 0 
429.078 0 480 c 0 768 l 0 801.703 8.871 834.812 25.723 864 c 42.574 893.188
 66.812 917.426 96 934.277 c 125.188 951.129 158.297 960 192 960 c 1344 
960 l 1377.703 960 1410.812 951.129 1440 934.277 c 1469.188 917.426 1493.426
 893.188 1510.277 864 c 1527.129 834.812 1536 801.703 1536 768 c 1536 480
 l 1536 446.297 1527.129 413.188 1510.277 384 c 1493.426 354.812 1469.188
 330.574 1440 313.723 c 1410.812 296.871 1377.703 288 1344 288 c h
768 432 m 818.922 432 867.758 452.227 903.766 488.234 c 939.773 524.242
 960 573.078 960 624 c 960 674.922 939.773 723.758 903.766 759.766 c 867.758
 795.773 818.922 816 768 816 c 717.078 816 668.242 795.773 632.234 759.766
 c 596.227 723.758 576 674.922 576 624 c 576 573.078 596.227 524.242 632.234
 488.234 c 668.242 452.227 717.078 432 768 432 c 1200 672 m 1182.852 672
 1167.004 662.852 1158.43 648 c 1149.855 633.148 1149.855 614.852 1158.43
 600 c 1167.004 585.148 1182.852 576 1200 576 c 1217.148 576 1232.996 585.148
 1241.57 600 c 1250.145 614.852 1250.145 633.148 1241.57 648 c 1232.996 
662.852 1217.148 672 1200 672 c f
Q Q
showpage
%%Trailer
%%EOF
