%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
239.039 48 m 231.754 48.012 224.867 51.332 220.32 57.023 c 73.922 240 l
 288 240 l 294.363 240 300.469 242.527 304.969 247.031 c 309.473 251.531
 312 257.637 312 264 c 312 289.723 325.723 313.492 348 326.355 c 370.277
 339.215 397.723 339.215 420 326.355 c 442.277 313.492 456 289.723 456 264
 c 456 257.637 458.527 251.531 463.031 247.031 c 467.531 242.527 473.637
 240 480 240 c 694.078 240 l 547.68 57.023 l 543.133 51.332 536.246 48.012
 528.961 48 c h
716.832 288 m 501.602 288 l 494.199 324.449 470.312 355.41 436.93 371.816
 c 403.551 388.223 364.449 388.223 331.07 371.816 c 297.688 355.41 273.801
 324.449 266.398 288 c 51.168 288 l 66.527 410.977 l 67.254 416.797 70.09
 422.148 74.492 426.023 c 78.898 429.895 84.566 432.023 90.434 432 c 677.664
 432 l 683.512 432 689.16 429.859 693.543 425.988 c 697.926 422.117 700.746
 416.781 701.473 410.977 c h
182.832 27.023 m 196.504 9.934 217.203 -0.008 239.09 0 c 528.914 0 l 528.91
 0 l 550.797 -0.008 571.496 9.934 585.168 27.023 c 762.77 249.023 l 766.801
 254.086 768.617 260.559 767.809 266.977 c 749.09 416.93 l 746.91 434.348
 738.445 450.371 725.285 461.984 c 712.121 473.602 695.172 480.008 677.617
 480 c 90.383 480 l 72.828 480.008 55.879 473.602 42.715 461.984 c 29.555
 450.371 21.09 434.348 18.91 416.93 c 0.191 266.977 l -0.602 260.551 1.23
 254.078 5.281 249.023 c h
6 536.16 m 10.551 530.98 17.105 528.008 24 528 c 288 528 l 294.363 528 
300.469 530.527 304.969 535.031 c 309.473 539.531 312 545.637 312 552 c 
312 577.723 325.723 601.492 348 614.355 c 370.277 627.215 397.723 627.215
 420 614.355 c 442.277 601.492 456 577.723 456 552 c 456 545.637 458.527
 539.531 463.031 535.031 c 467.531 530.527 473.637 528 480 528 c 744 528
 l 750.883 528 757.434 530.957 761.988 536.117 c 766.543 541.277 768.66 
548.148 767.809 554.977 c 749.09 704.93 l 746.91 722.348 738.445 738.371
 725.285 749.984 c 712.121 761.602 695.172 768.008 677.617 768 c 90.383 
768 l 72.828 768.008 55.879 761.602 42.715 749.984 c 29.555 738.371 21.09
 722.348 18.91 704.93 c 0.191 554.977 l -0.668 548.145 1.449 541.277 6 536.113
 c h
51.168 576 m 66.527 698.977 l 67.254 704.789 70.082 710.133 74.477 714.004
 c 78.867 717.879 84.527 720.012 90.383 720 c 677.617 720 l 683.465 720 
689.113 717.859 693.496 713.988 c 697.879 710.117 700.699 704.781 701.426
 698.977 c 716.785 576 l 501.602 576 l 494.199 612.449 470.312 643.41 436.93
 659.816 c 403.551 676.223 364.449 676.223 331.07 659.816 c 297.688 643.41
 273.801 612.449 266.398 576 c h
51.168 576 m f
Q Q
showpage
%%Trailer
%%EOF
