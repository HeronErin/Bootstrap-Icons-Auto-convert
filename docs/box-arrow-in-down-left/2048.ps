%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:46 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 96 1441 1441
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 96 1441 1441
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 96 1345 1345 rectclip
1 0 0 -1 0 1536 cm q
0 g
925.055 240 m 925.055 227.27 920 215.062 910.996 206.059 c 901.996 197.059
 889.785 192 877.055 192 c 240 192 l 201.809 192 165.184 207.172 138.176
 234.176 c 111.172 261.184 96 297.809 96 336 c 96 1296 l 96 1334.191 111.172
 1370.816 138.176 1397.824 c 165.184 1424.828 201.809 1440 240 1440 c 1200
 1440 l 1238.191 1440 1274.816 1424.828 1301.824 1397.824 c 1328.828 1370.816
 1344 1334.191 1344 1296 c 1344 658.945 l 1344 641.797 1334.852 625.949 
1320 617.375 c 1305.148 608.801 1286.852 608.801 1272 617.375 c 1257.148
 625.949 1248 641.797 1248 658.945 c 1248 1296 l 1248 1308.73 1242.941 1320.938
 1233.941 1329.941 c 1224.938 1338.941 1212.73 1344 1200 1344 c 240 1344
 l 227.27 1344 215.062 1338.941 206.059 1329.941 c 197.059 1320.938 192 
1308.73 192 1296 c 192 336 l 192 323.27 197.059 311.062 206.059 302.059 
c 215.062 293.059 227.27 288 240 288 c 877.055 288 l 889.785 288 901.996
 282.941 910.996 273.941 c 920 264.938 925.055 252.73 925.055 240 c f*
480 1008 m 480 1020.73 485.059 1032.938 494.059 1041.941 c 503.062 1050.941
 515.27 1056 528 1056 c 1008 1056 l 1025.148 1056 1040.996 1046.852 1049.57
 1032 c 1058.145 1017.148 1058.145 998.852 1049.57 984 c 1040.996 969.148
 1025.148 960 1008 960 c 643.871 960 l 1425.984 177.984 l 1438.125 165.844
 1442.867 148.145 1438.422 131.562 c 1433.98 114.977 1421.023 102.02 1404.438
 97.578 c 1387.855 93.133 1370.156 97.875 1358.016 110.016 c 576 892.129
 l 576 528 l 576 510.852 566.852 495.004 552 486.43 c 537.148 477.855 518.852
 477.855 504 486.43 c 489.148 495.004 480 510.852 480 528 c h
480 1008 m f*
Q Q
showpage
%%Trailer
%%EOF
