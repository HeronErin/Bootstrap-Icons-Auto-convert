%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 624 rectclip
1 0 0 -1 0 768 cm q
0 g
384 480 m 401.148 480 416.996 470.852 425.57 456 c 434.145 441.148 434.145
 422.852 425.57 408 c 416.996 393.148 401.148 384 384 384 c 366.852 384 
351.004 393.148 342.43 408 c 333.855 422.852 333.855 441.148 342.43 456 
c 351.004 470.852 366.852 480 384 480 c f
216 432 m 216 387.445 233.699 344.711 265.207 313.207 c 296.711 281.699
 339.445 264 384 264 c 428.555 264 471.289 281.699 502.793 313.207 c 534.301
 344.711 552 387.445 552 432 c 552 476.555 534.301 519.289 502.793 550.793
 c 471.289 582.301 428.555 600 384 600 c 339.445 600 296.711 582.301 265.207
 550.793 c 233.699 519.289 216 476.555 216 432 c 384 312 m 341.129 312 301.512
 334.871 280.078 372 c 258.641 409.129 258.641 454.871 280.078 492 c 301.512
 529.129 341.129 552 384 552 c 426.871 552 466.488 529.129 487.922 492 c
 509.359 454.871 509.359 409.129 487.922 372 c 466.488 334.871 426.871 312
 384 312 c f
96 696 m 96 702.363 98.527 708.469 103.031 712.969 c 107.531 717.473 113.637
 720 120 720 c 648 720 l 654.363 720 660.469 717.473 664.969 712.969 c 669.473
 708.469 672 702.363 672 696 c 672 549.602 l 708.449 542.199 739.41 518.312
 755.816 484.93 c 772.223 451.551 772.223 412.449 755.816 379.07 c 739.41
 345.688 708.449 321.801 672 314.398 c 672 216 l 672.012 209.629 669.492
 203.52 664.992 199.008 c 568.992 103.008 l 564.48 98.508 558.371 95.988
 552 96 c 216 96 l 209.629 95.988 203.52 98.508 199.008 103.008 c 103.008
 199.008 l 98.508 203.52 95.988 209.629 96 216 c 96 314.398 l 59.551 321.801
 28.59 345.688 12.184 379.07 c -4.223 412.449 -4.223 451.551 12.184 484.93
 c 28.59 518.312 59.551 542.199 96 549.602 c h
144 672 m 144 528 l 144 521.637 141.473 515.531 136.969 511.031 c 132.469
 506.527 126.363 504 120 504 c 94.277 504 70.508 490.277 57.645 468 c 44.785
 445.723 44.785 418.277 57.645 396 c 70.508 373.723 94.277 360 120 360 c
 126.363 360 132.469 357.473 136.969 352.969 c 141.473 348.469 144 342.363
 144 336 c 144 225.938 l 225.938 144 l 542.066 144 l 624 225.938 l 624 336
 l 624 342.363 626.527 348.469 631.031 352.969 c 635.531 357.473 641.637
 360 648 360 c 673.723 360 697.492 373.723 710.355 396 c 723.215 418.277
 723.215 445.723 710.355 468 c 697.492 490.277 673.723 504 648 504 c 641.637
 504 635.531 506.527 631.031 511.031 c 626.527 515.531 624 521.637 624 528
 c 624 672 l h
144 672 m f
Q Q
showpage
%%Trailer
%%EOF
