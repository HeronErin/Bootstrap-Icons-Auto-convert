%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:43 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1248 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 960 m 802.297 960 833.988 941.703 851.137 912 c 868.289 882.297 868.289
 845.703 851.137 816 c 833.988 786.297 802.297 768 768 768 c 733.703 768
 702.012 786.297 684.863 816 c 667.711 845.703 667.711 882.297 684.863 912
 c 702.012 941.703 733.703 960 768 960 c f
432 864 m 432 774.887 467.398 689.426 530.414 626.414 c 593.426 563.398
 678.887 528 768 528 c 857.113 528 942.574 563.398 1005.586 626.414 c 1068.602
 689.426 1104 774.887 1104 864 c 1104 953.113 1068.602 1038.574 1005.586
 1101.586 c 942.574 1164.602 857.113 1200 768 1200 c 678.887 1200 593.426
 1164.602 530.414 1101.586 c 467.398 1038.574 432 953.113 432 864 c 768 
624 m 704.348 624 643.305 649.285 598.293 694.293 c 553.285 739.305 528 
800.348 528 864 c 528 927.652 553.285 988.695 598.293 1033.707 c 643.305
 1078.715 704.348 1104 768 1104 c 831.652 1104 892.695 1078.715 937.707 
1033.707 c 982.715 988.695 1008 927.652 1008 864 c 1008 800.348 982.715 
739.305 937.707 694.293 c 892.695 649.285 831.652 624 768 624 c f
192 1392 m 192 1404.73 197.059 1416.938 206.059 1425.941 c 215.062 1434.941
 227.27 1440 240 1440 c 1296 1440 l 1308.73 1440 1320.938 1434.941 1329.941
 1425.941 c 1338.941 1416.938 1344 1404.73 1344 1392 c 1344 1099.199 l 1398.254
 1088.184 1447.031 1058.75 1482.066 1015.883 c 1517.102 973.02 1536.242 
919.359 1536.242 864 c 1536.242 808.641 1517.102 754.98 1482.066 712.117
 c 1447.031 669.25 1398.254 639.816 1344 628.801 c 1344 432 l 1344.023 419.262
 1338.98 407.035 1329.984 398.016 c 1137.984 206.016 l 1128.965 197.02 1116.738
 191.977 1104 192 c 432 192 l 419.262 191.977 407.035 197.02 398.016 206.016
 c 206.016 398.016 l 197.02 407.035 191.977 419.262 192 432 c 192 628.801
 l 137.746 639.816 88.969 669.25 53.934 712.117 c 18.898 754.98 -0.242 808.641
 -0.242 864 c -0.242 919.359 18.898 973.02 53.934 1015.883 c 88.969 1058.75
 137.746 1088.184 192 1099.199 c h
288 1344 m 288 1056 l 288 1043.27 282.941 1031.062 273.941 1022.059 c 264.938
 1013.059 252.73 1008 240 1008 c 188.555 1008 141.016 980.555 115.293 936
 c 89.57 891.445 89.57 836.555 115.293 792 c 141.016 747.445 188.555 720
 240 720 c 252.73 720 264.938 714.941 273.941 705.941 c 282.941 696.938 
288 684.73 288 672 c 288 451.871 l 451.871 288 l 1084.129 288 l 1248 451.871
 l 1248 672 l 1248 684.73 1253.059 696.938 1262.059 705.941 c 1271.062 714.941
 1283.27 720 1296 720 c 1347.445 720 1394.984 747.445 1420.707 792 c 1446.43
 836.555 1446.43 891.445 1420.707 936 c 1394.984 980.555 1347.445 1008 1296
 1008 c 1283.27 1008 1271.062 1013.059 1262.059 1022.059 c 1253.059 1031.062
 1248 1043.27 1248 1056 c 1248 1344 l h
288 1344 m f
Q Q
showpage
%%Trailer
%%EOF
