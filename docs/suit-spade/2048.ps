%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 48 0 1488 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 48 0 1488 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 48 0 1440 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 0 m 784.875 -0.004 800.512 8.855 809.184 23.328 c 939.648 240.77 1089.984
 376.801 1217.184 492 c 1226.398 500.191 1235.422 508.352 1244.254 516.48
 c 1373.566 633.984 1488 743.711 1488 912 c 1488.027 995.078 1461.109 1075.922
 1411.289 1142.402 c 1361.469 1208.883 1291.434 1257.414 1211.691 1280.711
 c 1131.945 1304.008 1046.801 1300.816 969.023 1271.617 c 991.582 1309.059
 1016.16 1346.688 1038.336 1380.191 c 1080 1443.457 1037.375 1536 956.16
 1536 c 579.84 1536 l 498.719 1536 456 1443.457 497.664 1380.191 c 522.91
 1342.078 546.625 1305.598 567.551 1271.328 c 489.766 1300.676 404.555 1303.984
 324.727 1280.762 c 244.898 1257.535 174.766 1209.031 124.863 1142.531 c
 74.961 1076.035 47.988 995.137 48 912 c 48 743.711 162.434 633.984 291.742
 516.48 c 318.719 492 l 446.016 376.801 596.352 240.77 726.816 23.328 c 
735.488 8.855 751.125 -0.004 768 0 c 356.258 587.52 m 221.566 710.016 144
 792.289 144 912 c 143.992 970.812 161.992 1028.219 195.578 1076.5 c 229.164
 1124.781 276.727 1161.625 331.871 1182.07 c 387.016 1202.52 447.098 1205.594
 504.043 1190.883 c 560.988 1176.172 612.062 1144.375 650.398 1099.777 c
 659.738 1088.934 673.426 1082.82 687.734 1083.105 c 702.039 1083.395 715.473
 1090.047 724.367 1101.258 c 733.266 1112.465 736.695 1127.059 733.727 1141.055
 c 724.703 1183.102 702.047 1230.527 675.07 1278.145 c 644.363 1330.844 
611.93 1382.52 577.824 1433.09 c 577.484 1433.598 577.316 1434.203 577.344
 1434.816 c 577.309 1436.801 578.152 1438.695 579.648 1440 c 956.352 1440
 l 957.848 1438.695 958.691 1436.801 958.656 1434.816 c 958.684 1434.203
 958.516 1433.598 958.176 1433.09 c 929.375 1389.41 895.008 1336.609 866.016
 1285.73 c 837.793 1236.387 811.297 1183.586 802.273 1141.059 c 802.273 
1141.055 l 799.305 1127.059 802.734 1112.465 811.633 1101.258 c 820.527 
1090.047 833.961 1083.395 848.266 1083.105 c 862.574 1082.82 876.262 1088.934
 885.602 1099.777 c 923.938 1144.375 975.012 1176.172 1031.957 1190.883 
c 1088.902 1205.594 1148.984 1202.52 1204.129 1182.07 c 1259.273 1161.625
 1306.836 1124.781 1340.422 1076.5 c 1374.008 1028.219 1392.008 970.812 
1392 912 c 1392 792.289 1314.434 710.016 1179.742 587.52 c 1152 562.559 
l 1037.184 458.496 895.871 330.621 768 137.855 c 640.129 330.625 498.816
 458.496 384 562.367 c 356.258 587.422 l h
356.258 587.52 m f
Q Q
showpage
%%Trailer
%%EOF
