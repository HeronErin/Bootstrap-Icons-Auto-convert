%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:28 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 26 28 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 26 28 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 26 28 1510 1508 rectclip
1 0 0 -1 0 1536 cm q
0 g
1519.199 11.52 m 1527.078 18.246 1532.57 27.34 1534.855 37.445 c 1537.141
 47.551 1536.094 58.121 1531.871 67.586 c 1384.992 396.867 1076.543 851.906
 850.75 1089.027 c 850.754 1089.023 l 787.387 1155.266 709.359 1205.707 
622.945 1236.289 c 621.219 1258.082 617.184 1287.938 607.586 1319.617 c 
588.289 1382.883 543.555 1461.602 443.617 1486.656 c 346.836 1509.746 246.527
 1514.047 148.129 1499.328 c 129.855 1496.316 111.824 1491.984 94.176 1486.367
 c 77.895 1481.371 62.715 1473.324 49.441 1462.656 c 40.656 1455.266 33.914
 1445.746 29.855 1435.008 c 24.742 1421.27 24.879 1406.125 30.238 1392.48
 c 39.359 1368.961 60.574 1356 74.496 1349.09 c 112.32 1330.18 134.496 1305.602
 157.727 1269.793 c 166.848 1255.969 175.391 1241.281 185.277 1224.48 c 
196.508 1205.473 l 211.004 1180.992 227.805 1153.633 248.922 1124.066 c 
299.609 1053.121 364.219 1035.266 416.539 1038.051 c 428.699 1038.82 439.836
 1040.355 449.945 1042.66 c 455.898 1026.148 463.578 1006.18 472.793 984.293
 c 497.848 924.867 535.961 848.07 586.746 785.668 c 795.641 529.348 1180.027
 189.891 1461.977 7.684 c 1461.984 7.68 l 1470.664 2.078 1480.922 -0.574
 1491.227 0.117 c 1501.535 0.809 1511.348 4.809 1519.199 11.52 c 451.68 
1143.551 m 438.961 1137.953 425.332 1134.699 411.457 1133.953 c 387.84 1132.707
 356.449 1138.754 327.074 1179.938 c 308.164 1206.336 292.996 1231.008 279.074
 1254.531 c 268.996 1271.523 l 258.82 1288.898 248.547 1306.277 238.277 
1322.211 c 238.273 1322.207 l 218.816 1353.699 194.145 1381.648 165.312 
1404.863 c 231.551 1415.617 331.969 1415.52 420.383 1393.344 c 474.047 1380
 501.312 1338.719 515.711 1291.582 c 515.711 1291.586 l 522.781 1268.195
 526.848 1244 527.809 1219.586 c h
589.918 1146.047 m 601.438 1142.207 616.512 1136.445 633.887 1128.48 c 
689.152 1102.762 739.129 1066.945 781.246 1022.879 c 963.645 831.262 1204.797
 488.16 1362.238 194.305 c 1113.598 379.297 827.902 641.664 661.246 846.336
 c 618.812 898.465 584.926 965.664 561.215 1021.633 c 549.598 1049.281 540.672
 1073.473 534.816 1090.754 c 534.816 1090.852 l 590.016 1146.051 l h
112.512 1437.887 m 113.184 1437.406 l h
456.383 1145.758 m 456.574 1145.855 l 456.383 1145.855 l h
456.383 1145.758 m f
Q Q
showpage
%%Trailer
%%EOF
