%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:39 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 36 0 741 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 36 0 741 768
768 768 cairo_set_page_size
%%EndPageSetup
q 36 0 705 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 528 l 624 528 l 624 216 l 528 216 l 508.906 216 490.59 208.414
 477.09 194.91 c 463.586 181.41 456 163.094 456 144 c 456 48 l 192 48 l 
179.27 48 167.062 53.059 158.059 62.059 c 149.059 71.062 144 83.27 144 96
 c 144 528 l 96 528 l 96 96 l 96 70.539 106.113 46.121 124.117 28.117 c 
142.121 10.113 166.539 0 192 0 c 456 0 l h
409.727 681.023 m 409.727 655.969 l 409.727 643.617 407.855 633.359 404.109
 625.199 c 404.113 625.199 l 400.914 617.598 395.516 611.129 388.609 606.625
 c 381.871 602.445 374.07 600.297 366.145 600.434 c 358.148 600.301 350.285
 602.465 343.488 606.672 c 336.66 611.207 331.32 617.652 328.129 625.199
 c 324.418 633.359 322.562 643.613 322.562 655.969 c 322.562 681.023 l 322.562
 693.312 324.434 703.566 328.18 711.793 c 328.176 711.793 l 331.348 719.352
 336.672 725.812 343.488 730.367 c 350.34 734.434 358.18 736.527 366.145
 736.414 c 374.043 736.492 381.812 734.398 388.609 730.367 c 395.508 725.875
 400.906 719.426 404.113 711.84 c 408.148 702.082 410.062 691.578 409.727
 681.023 c 448.27 656.254 m 448.27 680.879 l 448.27 698.895 444.988 714.465
 438.43 727.582 c 431.871 740.574 422.43 750.605 410.109 757.68 c 397.949
 764.59 383.293 768.047 366.141 768.047 c 349.051 768.047 334.332 764.59
 321.98 757.68 c 321.984 757.68 l 309.734 750.723 299.863 740.234 293.664
 727.586 c 286.797 712.996 283.441 697 283.871 680.879 c 283.871 656.254
 l 283.871 638.047 287.152 622.445 293.711 609.453 c 300.27 596.301 309.695
 586.27 321.984 579.355 c 334.336 572.316 349.055 568.797 366.145 568.797
 c 383.297 568.797 397.969 572.316 410.16 579.355 c 422.449 586.363 431.871
 596.445 438.434 609.594 c 444.961 622.586 448.242 638.137 448.273 656.25
 c 157.203 630.523 m 121.684 764.445 l 86.645 764.445 l 36.004 572.445 l
 77.043 572.445 l 105.891 711.789 l 107.715 711.789 l 141.602 572.445 l 
174.387 572.445 l 208.273 711.789 l 210.195 711.789 l 238.805 572.445 l 
279.988 572.445 l 229.348 764.445 l 194.309 764.445 l 158.789 630.523 l 
h
512.309 764.445 m 512.309 688.031 l 589.398 688.031 l 589.398 657.406 l
 512.309 657.406 l 512.309 603.789 l 596.691 603.789 l 596.691 572.445 l
 474.336 572.449 l 474.336 764.449 l h
655.734 688.031 m 655.734 764.398 l 617.766 764.398 l 617.766 572.445 l
 740.07 572.445 l 740.07 603.789 l 655.734 603.789 l 655.734 657.406 l 732.773
 657.406 l 732.773 688.031 l h
655.734 688.031 m f*
Q Q
showpage
%%Trailer
%%EOF
