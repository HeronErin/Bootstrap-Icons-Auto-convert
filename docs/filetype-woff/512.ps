%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 18 0 371 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 18 0 371 384
384 384 cairo_set_page_size
%%EndPageSetup
q 18 0 353 384 rectclip
1 0 0 -1 0 384 cm q
0 g
336 108 m 336 264 l 312 264 l 312 108 l 264 108 l 254.453 108 245.297 104.207
 238.543 97.457 c 231.793 90.703 228 81.547 228 72 c 228 24 l 96 24 l 89.637
 24 83.531 26.527 79.031 31.031 c 74.527 35.531 72 41.637 72 48 c 72 264
 l 48 264 l 48 48 l 48 35.27 53.059 23.062 62.059 14.059 c 71.062 5.059 
83.27 0 96 0 c 228 0 l h
204.863 340.512 m 204.863 327.984 l 204.863 321.809 203.926 316.68 202.055
 312.602 c 200.457 308.801 197.758 305.562 194.305 303.312 c 190.934 301.223
 187.035 300.148 183.07 300.215 c 179.074 300.148 175.145 301.234 171.742
 303.336 c 168.332 305.602 165.66 308.824 164.062 312.602 c 162.207 316.68
 161.277 321.809 161.277 327.984 c 161.277 340.512 l 161.277 346.656 162.215
 351.785 164.086 355.895 c 164.09 355.895 l 165.672 359.676 168.336 362.906
 171.742 365.184 c 175.168 367.219 179.09 368.266 183.07 368.207 c 187.023
 368.246 190.906 367.199 194.305 365.184 c 197.754 362.938 200.453 359.711
 202.055 355.922 c 204.074 351.043 205.031 345.789 204.863 340.512 c 224.137
 328.129 m 224.137 340.441 l 224.137 349.449 222.496 357.234 219.215 363.793
 c 215.934 370.289 211.215 375.305 205.055 378.84 c 198.977 382.297 191.648
 384.023 183.07 384.023 c 174.527 384.023 167.168 382.297 160.992 378.84
 c 154.867 375.363 149.934 370.117 146.832 363.793 c 143.398 356.496 141.723
 348.5 141.938 340.441 c 141.938 328.129 l 141.938 319.023 143.578 311.227
 146.859 304.73 c 150.141 298.156 154.852 293.137 160.996 289.684 c 167.172
 286.164 174.531 284.402 183.074 284.402 c 191.648 284.402 198.984 286.164
 205.082 289.684 c 211.227 293.188 215.938 298.227 219.219 304.805 c 222.484
 311.301 224.121 319.078 224.141 328.133 c 78.605 315.27 m 60.844 382.23
 l 43.324 382.23 l 18.004 286.23 l 38.523 286.23 l 52.949 355.902 l 53.859
 355.902 l 70.805 286.23 l 87.195 286.23 l 104.141 355.902 l 105.102 355.902
 l 119.406 286.23 l 140 286.23 l 114.68 382.23 l 97.16 382.23 l 79.398 315.27
 l h
256.156 382.23 m 256.156 344.023 l 294.699 344.023 l 294.699 328.711 l 
256.156 328.711 l 256.156 301.902 l 298.348 301.902 l 298.348 286.23 l 237.168
 286.223 l 237.168 382.223 l h
327.867 344.023 m 327.867 382.207 l 308.883 382.207 l 308.883 286.23 l 
370.035 286.23 l 370.035 301.902 l 327.867 301.902 l 327.867 328.711 l 366.387
 328.711 l 366.387 344.023 l h
327.867 344.023 m f*
Q Q
showpage
%%Trailer
%%EOF
