%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 71 0 1481 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 71 0 1481 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 71 0 1410 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1056 l 1248 1056 l 1248 432 l 1056 432 l 1017.809 432 981.184
 416.828 954.176 389.824 c 927.172 362.816 912 326.191 912 288 c 912 96 
l 384 96 l 358.539 96 334.121 106.113 316.117 124.117 c 298.113 142.121 
288 166.539 288 192 c 288 1056 l 192 1056 l 192 192 l 192 141.078 212.227
 92.242 248.234 56.234 c 284.242 20.227 333.078 0 384 0 c 912 0 l h
819.457 1362.047 m 819.457 1311.934 l 819.457 1287.23 815.715 1266.719 
808.227 1250.398 c 808.223 1250.398 l 801.832 1235.195 791.031 1222.258 
777.215 1213.246 c 763.738 1204.891 748.141 1200.594 732.289 1200.863 c 
716.301 1200.602 700.574 1204.934 686.977 1213.344 c 673.32 1222.414 662.637
 1235.301 656.258 1250.398 c 648.832 1266.719 645.121 1287.23 645.121 1311.934
 c 645.121 1362.047 l 645.121 1386.621 648.863 1407.137 656.352 1423.582
 c 656.352 1423.586 l 662.691 1438.707 673.344 1451.625 686.977 1460.734
 c 700.676 1468.867 716.359 1473.055 732.289 1472.832 c 748.09 1472.984 
763.629 1468.801 777.215 1460.734 c 791.016 1451.754 801.816 1438.848 808.223
 1423.68 c 816.301 1404.164 820.129 1383.156 819.457 1362.047 c 896.547 
1312.512 m 896.547 1361.758 l 896.547 1397.789 889.988 1428.926 876.867 
1455.164 c 863.746 1481.148 844.867 1501.211 820.227 1515.355 c 795.906 
1529.18 766.594 1536.09 732.289 1536.09 c 698.113 1536.09 668.672 1529.18
 643.969 1515.355 c 643.969 1515.359 l 619.469 1501.445 599.73 1480.469 
587.328 1455.168 c 573.594 1425.988 566.887 1394 567.742 1361.762 c 567.742
 1312.516 l 567.742 1276.102 574.301 1244.898 587.422 1218.914 c 600.543
 1192.609 619.391 1172.547 643.965 1158.723 c 668.668 1144.645 698.109 1137.602
 732.285 1137.602 c 766.59 1137.602 795.934 1144.641 820.316 1158.723 c 
844.891 1172.738 863.742 1192.898 876.859 1219.203 c 889.914 1245.188 896.477
 1276.293 896.539 1312.516 c 314.395 1261.059 m 243.355 1528.898 l 173.277
 1528.898 l 71.996 1144.898 l 154.074 1144.898 l 211.77 1423.586 l 215.418
 1423.586 l 283.195 1144.898 l 348.762 1144.898 l 416.539 1423.586 l 420.379
 1423.586 l 477.594 1144.898 l 559.961 1144.898 l 458.68 1528.898 l 388.602
 1528.898 l 317.562 1261.059 l h
1024.602 1528.898 m 1024.602 1376.066 l 1178.777 1376.066 l 1178.777 1314.82
 l 1024.602 1314.82 l 1024.602 1207.59 l 1193.371 1207.59 l 1193.371 1144.902
 l 948.672 1144.895 l 948.672 1528.895 l h
1311.449 1376.066 m 1311.449 1528.801 l 1235.512 1528.801 l 1235.512 1144.898
 l 1480.121 1144.898 l 1480.121 1207.586 l 1311.449 1207.586 l 1311.449 
1314.816 l 1465.527 1314.816 l 1465.527 1376.062 l h
1311.449 1376.066 m f*
Q Q
showpage
%%Trailer
%%EOF
