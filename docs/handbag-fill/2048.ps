%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 78 0 1458 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 78 0 1458 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 78 0 1380 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 96 m 717.078 96 668.242 116.227 632.234 152.234 c 596.227 188.242 576
 237.078 576 288 c 576 480 l 480 480 l 480 288 l 480 211.617 510.344 138.363
 564.352 84.352 c 618.363 30.344 691.617 0 768 0 c 844.383 0 917.637 30.344
 971.648 84.352 c 1025.656 138.363 1056 211.617 1056 288 c 1056 480 l 960
 480 l 960 288 l 960 254.297 951.129 221.188 934.277 192 c 917.426 162.812
 893.188 138.574 864 121.723 c 834.812 104.871 801.703 96 768 96 c 480 480
 m 322.559 480 l 288.082 480.008 254.754 492.383 228.629 514.879 c 202.504
 537.375 185.316 568.5 180.191 602.594 c 81.602 1260.48 l 74.77 1306.133
 81.246 1352.785 100.258 1394.848 c 119.27 1436.914 150.012 1472.602 188.793
 1497.637 c 227.574 1522.672 272.75 1535.992 318.91 1536 c 1216.992 1536
 l 1263.164 1536.012 1308.355 1522.703 1347.156 1497.672 c 1385.953 1472.641
 1416.707 1436.949 1435.727 1394.879 c 1454.75 1352.809 1461.234 1306.145
 1454.398 1260.48 c 1355.711 602.594 l 1350.59 568.516 1333.414 537.406 
1307.312 514.91 c 1281.207 492.418 1247.898 480.031 1213.441 480 c 1056 
480 l 1056 624 l 1056 641.148 1046.852 656.996 1032 665.57 c 1017.148 674.145
 998.852 674.145 984 665.57 c 969.148 656.996 960 641.148 960 624 c 960 
480 l 576 480 l 576 624 l 576 641.148 566.852 656.996 552 665.57 c 537.148
 674.145 518.852 674.145 504 665.57 c 489.148 656.996 480 641.148 480 624
 c h
480 480 m f
Q Q
showpage
%%Trailer
%%EOF
