%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 288
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 288
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 240 rectclip
1 0 0 -1 0 384 cm q
0 g
276 96 m 279.184 96 282.234 97.266 284.484 99.516 c 286.734 101.766 288
 104.816 288 108 c 288 120 l 312.48 120 l 323.406 120.008 333.734 124.98
 340.559 133.512 c 376.102 177.91 l 376.105 177.91 l 381.219 184.301 384.004
 192.242 384 200.426 c 384 252 l 384 261.547 380.207 270.703 373.457 277.457
 c 366.703 284.207 357.547 288 348 288 c 336 288 l 336 305.148 326.852 320.996
 312 329.57 c 297.148 338.145 278.852 338.145 264 329.57 c 249.148 320.996
 240 305.148 240 288 c 120 288 l 120 305.148 110.852 320.996 96 329.57 c
 81.148 338.145 62.852 338.145 48 329.57 c 33.148 320.996 24 305.148 24 
288 c 17.637 288 11.531 285.473 7.031 280.969 c 2.527 276.469 0 270.363 
0 264 c 0 240 l 264 240 l 264 108 l 264 101.371 269.371 96 276 96 c 72 264
 m 63.426 264 55.504 268.574 51.215 276 c 46.93 283.426 46.93 292.574 51.215
 300 c 55.504 307.426 63.426 312 72 312 c 80.574 312 88.496 307.426 92.785
 300 c 97.07 292.574 97.07 283.426 92.785 276 c 88.496 268.574 80.574 264
 72 264 c 288 264 m 279.426 264 271.504 268.574 267.215 276 c 262.93 283.426
 262.93 292.574 267.215 300 c 271.504 307.426 279.426 312 288 312 c 296.574
 312 304.496 307.426 308.785 300 c 313.07 292.574 313.07 283.426 308.785
 276 c 304.496 268.574 296.574 264 288 264 c 329.566 264 m 348 264 l 351.184
 264 354.234 262.734 356.484 260.484 c 358.734 258.234 360 255.184 360 252
 c 360 200.398 l 359.996 197.676 359.062 195.035 357.359 192.91 c 321.84
 148.512 l 319.566 145.664 316.125 144.004 312.48 144 c 288 144 l 288 240
 l 305.148 240 320.992 249.148 329.566 264 c f
Q Q
showpage
%%Trailer
%%EOF
