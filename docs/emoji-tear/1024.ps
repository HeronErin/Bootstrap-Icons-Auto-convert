%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 720 m 294.887 720 209.426 684.602 146.414 621.586 c 83.398 558.574 
48 473.113 48 384 c 48 294.887 83.398 209.426 146.414 146.414 c 209.426 
83.398 294.887 48 384 48 c 473.113 48 558.574 83.398 621.586 146.414 c 684.602
 209.426 720 294.887 720 384 c 720 473.113 684.602 558.574 621.586 621.586
 c 558.574 684.602 473.113 720 384 720 c 384 768 m 485.844 768 583.516 727.543
 655.527 655.527 c 727.543 583.516 768 485.844 768 384 c 768 282.156 727.543
 184.484 655.527 112.473 c 583.516 40.457 485.844 0 384 0 c 282.156 0 184.484
 40.457 112.473 112.473 c 40.457 184.484 0 282.156 0 384 c 0 485.844 40.457
 583.516 112.473 655.527 c 184.484 727.543 282.156 768 384 768 c f
327.887 548.641 m 345.688 541.301 364.746 537.484 384 537.406 c 427.969
 537.406 461.137 556.992 492 577.055 c 502.176 583.68 512.352 573.742 505.535
 563.758 c 478.465 523.918 430.75 465.406 384 465.406 c 358.559 465.406 
332.832 482.734 310.273 504.957 c 314.305 513.598 318.016 522.156 321.41
 530.637 c 323.617 536.203 325.777 542.172 327.891 548.539 c h
288 543.984 m 288 588.145 255.742 624 216 624 c 176.258 624 144 588.191
 144 543.984 c 144 510.098 186.336 434.062 206.113 400.465 c 208.152 396.934
 211.922 394.762 216 394.762 c 220.078 394.762 223.848 396.934 225.887 400.465
 c 245.664 434.066 288 510.098 288 543.984 c 336 312 m 336 351.742 314.496
 384 288 384 c 261.504 384 240 351.742 240 312 c 240 272.258 261.504 240
 288 240 c 314.496 240 336 272.258 336 312 c 528 312 m 528 351.742 506.496
 384 480 384 c 453.504 384 432 351.742 432 312 c 432 272.258 453.504 240
 480 240 c 506.496 240 528 272.258 528 312 c 456 168 m 456 161.637 458.527
 155.531 463.031 151.031 c 467.531 146.527 473.637 144 480 144 c 535.777
 144 592.801 172.031 621.457 229.246 c 624.367 234.945 624.883 241.566 622.887
 247.648 c 620.895 253.727 616.555 258.758 610.836 261.621 c 605.117 264.488
 598.488 264.953 592.426 262.91 c 586.363 260.871 581.367 256.492 578.543
 250.754 c 559.152 211.969 520.223 192 480 192 c 473.637 192 467.531 189.473
 463.031 184.969 c 458.527 180.469 456 174.363 456 168 c 336 168 m 336 161.637
 333.473 155.531 328.969 151.031 c 324.469 146.527 318.363 144 312 144 c
 256.223 144 199.199 172.031 170.543 229.246 c 167.633 234.945 167.117 241.566
 169.113 247.648 c 171.105 253.727 175.445 258.758 181.164 261.621 c 186.883
 264.488 193.512 264.953 199.574 262.91 c 205.637 260.871 210.633 256.492
 213.457 250.754 c 232.848 211.969 271.777 192 312 192 c 318.363 192 324.469
 189.473 328.969 184.969 c 333.473 180.469 336 174.363 336 168 c f
Q Q
showpage
%%Trailer
%%EOF
