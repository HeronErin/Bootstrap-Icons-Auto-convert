%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
446.062 0 m 192 0 l 166.539 0 142.121 10.113 124.117 28.117 c 106.113 46.121
 96 70.539 96 96 c 96 672 l 96 697.461 106.113 721.879 124.117 739.883 c
 142.121 757.887 166.539 768 192 768 c 576 768 l 601.461 768 625.879 757.887
 643.883 739.883 c 661.887 721.879 672 697.461 672 672 c 672 225.938 l 671.996
 213.207 666.938 201 657.938 192 c 480 14.062 l 471 5.062 458.793 0.004 
446.062 0 c 456 168 m 456 72 l 600 216 l 504 216 l 491.27 216 479.062 210.941
 470.059 201.941 c 461.059 192.938 456 180.73 456 168 c 336 300 m 336 312.863
 329.137 324.746 318 331.176 c 306.863 337.609 293.137 337.609 282 331.176
 c 270.863 324.746 264 312.863 264 300 c 264 287.137 270.863 275.254 282
 268.824 c 293.137 262.391 306.863 262.391 318 268.824 c 329.137 275.254
 336 287.137 336 300 c 294.672 374.016 m 358.512 416.543 l 447.504 327.504
 l 451.156 323.84 456.75 322.93 461.375 325.246 c 552 372 l 552 456 l 552
 462.363 549.473 468.469 544.969 472.969 c 540.469 477.473 534.363 480 528
 480 c 240 480 l 233.637 480 227.531 477.473 223.031 472.969 c 218.527 468.469
 216 462.363 216 456 c 216 432 l 216 432 289.922 370.848 294.672 374.016
 c 240 528 m 528 528 l 536.574 528 544.496 532.574 548.785 540 c 553.07 
547.426 553.07 556.574 548.785 564 c 544.496 571.426 536.574 576 528 576
 c 240 576 l 231.426 576 223.504 571.426 219.215 564 c 214.93 556.574 214.93
 547.426 219.215 540 c 223.504 532.574 231.426 528 240 528 c 240 624 m 384
 624 l 392.574 624 400.496 628.574 404.785 636 c 409.07 643.426 409.07 652.574
 404.785 660 c 400.496 667.426 392.574 672 384 672 c 240 672 l 231.426 672
 223.504 667.426 219.215 660 c 214.93 652.574 214.93 643.426 219.215 636
 c 223.504 628.574 231.426 624 240 624 c f
Q Q
showpage
%%Trailer
%%EOF
