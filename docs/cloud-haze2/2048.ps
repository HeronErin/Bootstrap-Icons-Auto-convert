%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 288 m 735.203 287.961 656.449 313.406 590.953 360.723 c 525.453 408.035
 476.551 474.801 451.199 551.52 c 447.586 564.055 439.023 574.578 427.488
 580.668 c 415.953 586.758 402.434 587.891 390.043 583.805 c 377.656 579.719
 367.465 570.766 361.812 559.008 c 356.164 547.25 355.543 533.699 360.098
 521.473 c 393.418 420.844 459.098 334.07 546.898 274.68 c 634.699 215.289
 739.684 186.621 845.484 193.141 c 951.285 199.66 1051.953 241.008 1131.797
 310.73 c 1211.637 380.453 1266.168 474.633 1286.879 578.594 c 1359.289 
588.371 1425.273 625.309 1471.469 681.922 c 1517.664 738.531 1540.613 810.586
 1535.668 883.484 c 1530.727 956.383 1498.262 1024.68 1444.848 1074.535 
c 1391.434 1124.391 1321.066 1152.082 1248 1152 c 432 1152 l 414.852 1152
 399.004 1142.852 390.43 1128 c 381.855 1113.148 381.855 1094.852 390.43
 1080 c 399.004 1065.148 414.852 1056 432 1056 c 1248 1056 l 1298.922 1056.012
 1347.762 1035.797 1383.777 999.797 c 1419.793 963.801 1440.035 914.969 
1440.047 864.047 c 1440.062 813.125 1419.844 764.285 1383.848 728.27 c 1347.848
 692.254 1299.016 672.012 1248.098 672 c 1245.602 672 l 1233.734 672.07 
1222.262 667.746 1213.398 659.855 c 1204.531 651.969 1198.906 641.074 1197.602
 629.281 c 1187.094 535.422 1142.367 448.73 1071.969 385.77 c 1001.574 322.812
 910.441 288.004 816 288 c 0 720 m 0 707.27 5.059 695.062 14.059 686.059
 c 23.062 677.059 35.27 672 48 672 c 528 672 l 545.148 672 560.996 681.148
 569.57 696 c 578.145 710.852 578.145 729.148 569.57 744 c 560.996 758.852
 545.148 768 528 768 c 48 768 l 35.27 768 23.062 762.941 14.059 753.941 
c 5.059 744.938 0 732.73 0 720 c 192 912 m 192 899.27 197.059 887.062 206.059
 878.059 c 215.062 869.059 227.27 864 240 864 c 1104 864 l 1121.148 864 
1136.996 873.148 1145.57 888 c 1154.145 902.852 1154.145 921.148 1145.57
 936 c 1136.996 950.852 1121.148 960 1104 960 c 240 960 l 227.27 960 215.062
 954.941 206.059 945.941 c 197.059 936.938 192 924.73 192 912 c 0 1296 m
 0 1283.27 5.059 1271.062 14.059 1262.059 c 23.062 1253.059 35.27 1248 48
 1248 c 912 1248 l 929.148 1248 944.996 1257.148 953.57 1272 c 962.145 1286.852
 962.145 1305.148 953.57 1320 c 944.996 1334.852 929.148 1344 912 1344 c
 48 1344 l 35.27 1344 23.062 1338.941 14.059 1329.941 c 5.059 1320.938 0
 1308.73 0 1296 c f
Q Q
showpage
%%Trailer
%%EOF
