%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
408 144 m 367.602 143.98 328.223 156.703 295.477 180.359 c 262.727 204.016
 238.273 237.402 225.602 275.762 c 223.793 282.027 219.512 287.289 213.742
 290.336 c 207.977 293.379 201.215 293.945 195.023 291.902 c 188.828 289.859
 183.73 285.383 180.906 279.504 c 178.082 273.625 177.773 266.848 180.047
 260.734 c 196.711 210.422 229.551 167.035 273.449 137.34 c 317.352 107.645
 369.844 93.309 422.742 96.57 c 475.641 99.832 525.977 120.504 565.898 155.363
 c 605.82 190.227 633.082 237.316 643.441 289.297 c 692.168 295.879 734.168
 326.867 754.832 371.484 c 775.496 416.102 771.965 468.18 745.469 509.602
 c 718.969 551.02 673.172 576.055 624 576 c 216 576 l 207.426 576 199.504
 571.426 195.215 564 c 190.93 556.574 190.93 547.426 195.215 540 c 199.504
 532.574 207.426 528 216 528 c 624 528 l 658.297 528.008 689.996 509.719
 707.152 480.02 c 724.305 450.324 724.316 413.727 707.176 384.02 c 690.031
 354.312 658.344 336.008 624.047 336 c 622.801 336 l 616.867 336.035 611.129
 333.871 606.699 329.93 c 602.266 325.984 599.453 320.539 598.801 314.641
 c 593.547 267.711 571.184 224.363 535.984 192.887 c 500.785 161.406 455.223
 144.004 408 144 c 0 360 m 0 353.637 2.527 347.531 7.031 343.031 c 11.531
 338.527 17.637 336 24 336 c 264 336 l 272.574 336 280.496 340.574 284.785
 348 c 289.07 355.426 289.07 364.574 284.785 372 c 280.496 379.426 272.574
 384 264 384 c 24 384 l 17.637 384 11.531 381.473 7.031 376.969 c 2.527 
372.469 0 366.363 0 360 c 96 456 m 96 449.637 98.527 443.531 103.031 439.031
 c 107.531 434.527 113.637 432 120 432 c 552 432 l 560.574 432 568.496 436.574
 572.785 444 c 577.07 451.426 577.07 460.574 572.785 468 c 568.496 475.426
 560.574 480 552 480 c 120 480 l 113.637 480 107.531 477.473 103.031 472.969
 c 98.527 468.469 96 462.363 96 456 c 0 648 m 0 641.637 2.527 635.531 7.031
 631.031 c 11.531 626.527 17.637 624 24 624 c 456 624 l 464.574 624 472.496
 628.574 476.785 636 c 481.07 643.426 481.07 652.574 476.785 660 c 472.496
 667.426 464.574 672 456 672 c 24 672 l 17.637 672 11.531 669.473 7.031 
664.969 c 2.527 660.469 0 654.363 0 648 c f
Q Q
showpage
%%Trailer
%%EOF
