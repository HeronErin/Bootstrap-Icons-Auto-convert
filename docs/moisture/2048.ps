%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1296 0 m 1278.852 0 1263.004 9.148 1254.43 24 c 1245.855 38.852 1245.855
 57.148 1254.43 72 c 1263.004 86.852 1278.852 96 1296 96 c 1440 96 l 1440
 360 l 1392 360 l 1374.852 360 1359.004 369.148 1350.43 384 c 1341.855 398.852
 1341.855 417.148 1350.43 432 c 1359.004 446.852 1374.852 456 1392 456 c
 1440 456 l 1440 720 l 1296 720 l 1278.852 720 1263.004 729.148 1254.43 
744 c 1245.855 758.852 1245.855 777.148 1254.43 792 c 1263.004 806.852 1278.852
 816 1296 816 c 1440 816 l 1440 1080 l 1392 1080 l 1374.852 1080 1359.004
 1089.148 1350.43 1104 c 1341.855 1118.852 1341.855 1137.148 1350.43 1152
 c 1359.004 1166.852 1374.852 1176 1392 1176 c 1440 1176 l 1440 1440 l 1296
 1440 l 1278.852 1440 1263.004 1449.148 1254.43 1464 c 1245.855 1478.852
 1245.855 1497.148 1254.43 1512 c 1263.004 1526.852 1278.852 1536 1296 1536
 c 1488 1536 l 1500.73 1536 1512.938 1530.941 1521.941 1521.941 c 1530.941
 1512.938 1536 1500.73 1536 1488 c 1536 48 l 1536 35.27 1530.941 23.062 
1521.941 14.059 c 1512.938 5.059 1500.73 0 1488 0 c h
672 144 m 706.945 111.07 l 697.875 101.441 685.23 95.98 672 95.98 c 658.77
 95.98 646.125 101.441 637.055 111.07 c 636.863 111.262 l 636.289 111.934
 l 634.176 114.141 l 626.496 122.59 l 626.496 122.594 l 584.082 169.73 543.289
 218.301 504.191 268.223 c 430.367 362.59 339.648 491.422 275.23 626.016
 c 227.328 726.145 192 833.473 192 934.367 c 192 1210.945 404.352 1440 672
 1440 c 939.648 1440 1152 1210.945 1152 934.367 c 1152 833.566 1116.672 
726.145 1068.77 626.016 c 1004.355 491.422 913.633 362.59 839.809 268.223
 c 798.355 215.312 754.996 163.918 709.824 114.145 c 707.711 111.938 l 707.137
 111.266 l 706.945 111.168 l h
672 144 m 637.055 111.07 l h
670.465 217.535 m 672 215.711 l 673.535 217.535 l 696.574 243.84 728.445
 281.566 764.16 327.359 c 822.816 402.336 890.879 497.855 946.656 598.75
 c 397.441 598.754 l 453.121 497.859 521.281 402.34 579.84 327.363 c 615.648
 281.57 647.617 243.844 670.559 217.539 c h
288 934.367 m 288 861.887 311.426 779.613 349.246 694.75 c 994.75 694.75
 l 1032.672 779.613 1055.996 861.887 1055.996 934.367 c 1056 1163.23 881.473
 1344 672 1344 c 462.527 1344 288 1163.23 288 934.367 c f
Q Q
showpage
%%Trailer
%%EOF
