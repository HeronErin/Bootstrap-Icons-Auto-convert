%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:10 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 89 0 1447 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 89 0 1447 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 89 0 1358 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 0 m 793.461 0 817.879 10.113 835.883 28.117 c 853.887 46.121 864 70.539
 864 96 c 864 601.727 l 1301.953 348.863 l 1324.012 335.93 1350.32 332.336
 1375.043 338.871 c 1399.762 345.406 1420.855 361.535 1433.641 383.68 c 
1446.426 405.824 1449.852 432.156 1443.148 456.836 c 1436.449 481.512 1420.18
 502.496 1397.953 515.137 c 960 768 l 1397.953 1020.863 l 1420.18 1033.504
 1436.449 1054.488 1443.148 1079.164 c 1449.852 1103.844 1446.426 1130.176
 1433.641 1152.32 c 1420.855 1174.465 1399.762 1190.594 1375.043 1197.129
 c 1350.32 1203.664 1324.012 1200.07 1301.953 1187.137 c 864 934.273 l 864
 1440 l 864 1474.297 845.703 1505.988 816 1523.137 c 786.297 1540.289 749.703
 1540.289 720 1523.137 c 690.297 1505.988 672 1474.297 672 1440 c 672 934.273
 l 234.047 1187.137 l 211.988 1200.07 185.68 1203.664 160.957 1197.129 c
 136.238 1190.594 115.145 1174.465 102.359 1152.32 c 89.574 1130.176 86.148
 1103.844 92.852 1079.164 c 99.551 1054.488 115.82 1033.504 138.047 1020.863
 c 576 768 l 138.047 515.137 l 108.59 497.867 90.523 466.25 90.602 432.105
 c 90.676 397.961 108.883 366.422 138.418 349.285 c 167.949 332.148 204.363
 331.988 234.047 348.863 c 672 601.727 l 672 96 l 672 70.539 682.113 46.121
 700.117 28.117 c 718.121 10.113 742.539 0 768 0 c f
Q Q
showpage
%%Trailer
%%EOF
