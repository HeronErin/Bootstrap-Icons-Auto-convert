%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:50 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 48 0 336 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 48 0 336 384
384 384 cairo_set_page_size
%%EndPageSetup
q 48 0 288 384 rectclip
1 0 0 -1 0 384 cm q
0 g
288 60 m 288 66.629 282.629 72 276 72 c 269.371 72 264 66.629 264 60 c 
264 53.371 269.371 48 276 48 c 282.629 48 288 53.371 288 60 c 288 324 m 
288 330.629 282.629 336 276 336 c 269.371 336 264 330.629 264 324 c 264 
317.371 269.371 312 276 312 c 282.629 312 288 317.371 288 324 c 108 336 
m 114.629 336 120 330.629 120 324 c 120 317.371 114.629 312 108 312 c 101.371
 312 96 317.371 96 324 c 96 330.629 101.371 336 108 336 c 120 60 m 120 66.629
 114.629 72 108 72 c 101.371 72 96 66.629 96 60 c 96 53.371 101.371 48 108
 48 c 114.629 48 120 53.371 120 60 c 192 192 m 200.574 192 208.496 187.426
 212.785 180 c 217.07 172.574 217.07 163.426 212.785 156 c 208.496 148.574
 200.574 144 192 144 c 183.426 144 175.504 148.574 171.215 156 c 166.93 
163.426 166.93 172.574 171.215 180 c 175.504 187.426 183.426 192 192 192
 c f
288 168 m 288.004 193.199 278.098 217.391 260.418 235.352 c 242.742 253.312
 218.711 263.602 193.512 264 c 180.625 283.512 169.031 300.359 165.168 304.246
 c 158.484 310.938 148.742 313.551 139.605 311.105 c 130.473 308.66 123.336
 301.531 120.887 292.398 c 118.438 283.266 121.043 273.52 127.727 266.832
 c 130.125 264.48 137.23 259.297 146.805 252.719 c 146.809 252.719 l 121.426
 239.191 103.445 214.996 97.816 186.793 c 92.184 158.586 99.496 129.344 
117.742 107.105 c 135.984 84.871 163.238 71.988 192 72 c 217.461 72 241.879
 82.113 259.883 100.117 c 277.887 118.121 288 142.539 288 168 c 264 168 
m 263.996 150.156 257.371 132.949 245.398 119.715 c 233.43 106.48 216.973
 98.16 199.219 96.371 c 181.465 94.582 163.68 99.449 149.309 110.031 c 134.941
 120.609 125.012 136.148 121.449 153.633 c 117.887 171.121 120.945 189.305
 130.027 204.664 c 139.113 220.023 153.578 231.461 170.617 236.762 c 186.625
 226.203 204.121 214.922 217.539 206.328 c 222.914 202.871 229.133 209.09
 225.699 214.488 c 210.82 237.527 l 210.816 237.527 l 226.09 233.395 239.574
 224.344 249.188 211.773 c 258.801 199.207 264.008 183.824 264 168 c f
48 48 m 48 35.27 53.059 23.062 62.059 14.059 c 71.062 5.059 83.27 0 96 
0 c 288 0 l 300.73 0 312.938 5.059 321.941 14.059 c 330.941 23.062 336 35.27
 336 48 c 336 336 l 336 348.73 330.941 360.938 321.941 369.941 c 312.938
 378.941 300.73 384 288 384 c 96 384 l 83.27 384 71.062 378.941 62.059 369.941
 c 53.059 360.938 48 348.73 48 336 c h
96 24 m 89.637 24 83.531 26.527 79.031 31.031 c 74.527 35.531 72 41.637
 72 48 c 72 336 l 72 342.363 74.527 348.469 79.031 352.969 c 83.531 357.473
 89.637 360 96 360 c 288 360 l 294.363 360 300.469 357.473 304.969 352.969
 c 309.473 348.469 312 342.363 312 336 c 312 48 l 312 41.637 309.473 35.531
 304.969 31.031 c 300.469 26.527 294.363 24 288 24 c h
96 24 m f
Q Q
showpage
%%Trailer
%%EOF
