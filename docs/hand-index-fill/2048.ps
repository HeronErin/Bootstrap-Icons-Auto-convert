%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 249 0 1521 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 249 0 1521 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 249 0 1272 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 428.734 m 816 168 l 816 123.445 798.301 80.711 766.793 49.207 c 735.289
 17.699 692.555 0 648 0 c 603.445 0 560.711 17.699 529.207 49.207 c 497.699
 80.711 480 123.445 480 168 c 480 680.641 l 364.801 703.68 l 329.488 710.758
 298.113 730.812 276.859 759.887 c 255.605 788.961 246.016 824.941 249.984
 860.734 c 283.105 1158.91 l 287.363 1197.027 300.695 1233.57 321.984 1265.473
 c 459.551 1471.871 l 486.258 1511.934 531.215 1535.996 579.359 1536 c 1192.32
 1536 l 1217.703 1535.992 1242.633 1529.273 1264.582 1516.531 c 1286.531
 1503.785 1304.723 1485.465 1317.312 1463.426 c 1451.234 1229.09 l 1451.23
 1229.09 l 1474.645 1188.125 1489.168 1142.691 1493.855 1095.742 c 1519.871
 835.102 l 1519.871 835.105 l 1523.441 799.414 1516.941 763.438 1501.109
 731.254 c 1485.277 699.07 1460.746 671.961 1430.301 653.008 c 1399.852 
634.051 1364.699 624 1328.832 624 c 1273.055 624 l 1267.066 615.867 1260.824
 607.93 1254.336 600.191 c 1236 578.207 1205.375 545.664 1169.855 531.457
 c 1134.91 517.441 1088.641 518.785 1058.688 521.09 c 1046.016 522.242 l
 1046.016 522.238 l 1035.797 496.078 1016.789 474.285 992.258 460.609 c 
970.191 447.828 946.297 438.504 921.406 432.961 c 891.645 427.008 850.461
 427.395 820.605 428.547 c h
816 428.734 m f
Q Q
showpage
%%Trailer
%%EOF
