%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:20 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 67 0 316 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 67 0 316 384
384 384 cairo_set_page_size
%%EndPageSetup
q 67 0 249 384 rectclip
1 0 0 -1 0 384 cm q
0 g
192 72 m 204.863 72 216.746 65.137 223.176 54 c 229.609 42.863 229.609 
29.137 223.176 18 c 216.746 6.863 204.863 0 192 0 c 179.137 0 167.254 6.863
 160.824 18 c 154.391 29.137 154.391 42.863 160.824 54 c 167.254 65.137 
179.137 72 192 72 c f
142.32 160.895 m 122.016 363.719 l 121.145 370.25 123.824 376.746 129.043
 380.766 c 134.266 384.785 141.23 385.711 147.32 383.203 c 153.41 380.691
 157.699 375.121 158.566 368.594 c 178.008 251.832 l 179.113 244.969 185.035
 239.922 191.988 239.922 c 198.941 239.922 204.863 244.969 205.969 251.832
 c 225.41 368.594 l 225.406 368.594 l 226.277 375.121 230.566 380.691 236.656
 383.203 c 242.746 385.711 249.711 384.785 254.93 380.766 c 260.152 376.746
 262.832 370.25 261.961 363.719 c 241.68 160.895 l 240.637 150.207 244.422
 139.609 252 132 c 312 54.816 l 315.988 49.48 316.906 42.453 314.43 36.273
 c 311.953 30.09 306.434 25.645 299.863 24.539 c 293.297 23.438 286.629 
25.832 282.266 30.863 c 231.215 92.16 l 229.191 94.781 226.434 96.742 223.297
 97.801 c 217.777 99.578 207.336 102.023 192 102.023 c 176.641 102.023 166.223
 99.574 160.68 97.801 c 157.551 96.738 154.805 94.777 152.785 92.16 c 101.734
 30.863 l 97.414 25.691 90.684 23.18 84.027 24.254 c 77.375 25.332 71.777
 29.832 69.305 36.105 c 66.832 42.375 67.848 49.488 71.977 54.816 c 131.977
 132 l 139.586 139.586 143.375 150.191 142.297 160.895 c h
142.32 160.895 m f
Q Q
showpage
%%Trailer
%%EOF
