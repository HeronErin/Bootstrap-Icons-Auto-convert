%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:04 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
84 48 m 77.371 48 72 53.371 72 60 c 72 180 l 72 183.184 73.266 186.234 
75.516 188.484 c 77.766 190.734 80.816 192 84 192 c 204 192 l 207.184 192
 210.234 190.734 212.484 188.484 c 214.734 186.234 216 183.184 216 180 c
 216 60 l 216 56.816 214.734 53.766 212.484 51.516 c 210.234 49.266 207.184
 48 204 48 c h
96 336 m 96 216 l 139.105 216 l 151.105 216 161 218.344 168.793 223.031
 c 176.586 227.719 182.387 234.52 186.191 243.43 c 190.062 252.344 192 263.098
 192 275.688 c 192 288.359 190.062 299.199 186.191 308.207 c 182.707 316.805
 176.547 324.047 168.625 328.871 c 160.848 333.625 151.008 336 139.105 336
 c h
135.984 235.344 m 119.375 235.344 l 119.375 316.582 l 135.984 316.582 l
 141.473 316.582 146.23 315.758 150.266 314.109 c 150.266 314.113 l 154.168
 312.504 157.578 309.898 160.152 306.551 c 162.746 303.145 164.672 298.918
 165.938 293.879 c 167.281 288.855 167.945 282.934 167.93 276.117 c 167.93
 267.078 166.777 259.559 164.473 253.559 c 162.605 247.969 158.922 243.16
 154.008 239.902 c 149.32 236.863 143.32 235.344 136.008 235.344 c h
135.984 235.344 m f
72 0 m 59.27 0 47.062 5.059 38.059 14.059 c 29.059 23.062 24 35.27 24 48
 c 24 360 l 12 360 l 5.371 360 0 365.371 0 372 c 0 378.629 5.371 384 12 
384 c 276 384 l 282.629 384 288 378.629 288 372 c 288 365.371 282.629 360
 276 360 c 264 360 l 264 264 l 270.363 264 276.469 266.527 280.969 271.031
 c 285.473 275.531 288 281.637 288 288 c 288 300 l 288 312.863 294.863 324.746
 306 331.176 c 317.137 337.609 330.863 337.609 342 331.176 c 353.137 324.746
 360 312.863 360 300 c 360 192 l 372 192 l 375.184 192 378.234 190.734 380.484
 188.484 c 382.734 186.234 384 183.184 384 180 c 384 103.777 l 384 88.992
 384 69.555 376.945 53.832 c 373.023 44.762 366.359 37.152 357.887 32.062
 c 348.816 26.672 337.52 23.984 324 24 c 317.371 24 312 29.371 312 36 c 
312 42.629 317.371 48 324 48 c 334.465 48 341.184 50.062 345.602 52.68 c
 349.84 55.242 353.156 59.094 355.055 63.672 c 358.582 71.543 359.613 81.574
 359.879 93 c 324 93 l 317.371 93 312 98.371 312 105 c 312 180 l 312 183.184
 313.266 186.234 315.516 188.484 c 317.766 190.734 320.816 192 324 192 c
 336 192 l 336 300 l 336 306.629 330.629 312 324 312 c 317.371 312 312 306.629
 312 300 c 312 288 l 312 275.27 306.941 263.062 297.941 254.059 c 288.938
 245.059 276.73 240 264 240 c 264 48 l 264 35.27 258.941 23.062 249.941 
14.059 c 240.938 5.059 228.73 0 216 0 c h
240 48 m 240 360 l 48 360 l 48 48 l 48 41.637 50.527 35.531 55.031 31.031
 c 59.531 26.527 65.637 24 72 24 c 216 24 l 222.363 24 228.469 26.527 232.969
 31.031 c 237.473 35.531 240 41.637 240 48 c f
Q Q
showpage
%%Trailer
%%EOF
