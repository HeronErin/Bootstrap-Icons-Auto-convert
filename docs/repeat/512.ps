%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:36 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 30 384 354
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 30 384 354
384 384 cairo_set_page_size
%%EndPageSetup
q 0 30 384 324 rectclip
1 0 0 -1 0 384 cm q
0 g
264 131.184 m 264 96 l 120 96 l 86.785 95.996 55.926 113.164 38.414 141.391
 c 20.902 169.617 19.227 204.891 33.984 234.648 c 36.941 240.586 34.523 
247.797 28.586 250.754 c 22.645 253.707 15.438 251.289 12.48 245.352 c -5.984
 208.148 -3.902 164.043 17.988 128.75 c 39.883 93.453 78.469 71.988 120 
72 c 264 72 l 264 36.816 l 264 34.488 265.348 32.371 267.457 31.383 c 269.562
 30.398 272.051 30.719 273.84 32.207 c 330.48 79.391 l 333.359 81.789 333.359
 86.207 330.48 88.605 c 273.84 135.789 l 273.84 135.793 l 272.051 137.281
 269.562 137.602 267.457 136.617 c 265.348 135.629 264 133.512 264 131.184
 c 355.441 133.246 m 361.371 130.301 368.57 132.719 371.52 138.648 c 389.984
 175.852 387.902 219.957 366.012 255.25 c 344.117 290.547 305.531 312.012
 264 312 c 120 312 l 120 347.184 l 120 349.512 118.652 351.629 116.543 352.617
 c 114.438 353.602 111.949 353.281 110.16 351.793 c 53.52 304.609 l 52.152
 303.469 51.363 301.781 51.363 300 c 51.363 298.219 52.152 296.531 53.52
 295.391 c 110.16 248.207 l 111.949 246.719 114.438 246.398 116.543 247.383
 c 118.652 248.371 120 250.488 120 252.816 c 120 288 l 264 288 l 297.223
 288.012 328.086 270.848 345.602 242.621 c 363.121 214.391 364.797 179.113
 350.039 149.352 c 347.094 143.422 349.512 136.223 355.441 133.273 c h
355.441 133.246 m f
Q Q
showpage
%%Trailer
%%EOF
