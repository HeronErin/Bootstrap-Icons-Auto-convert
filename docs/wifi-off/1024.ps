%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:14 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 22 118 746 686
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 22 118 746 686
768 768 cairo_set_page_size
%%EndPageSetup
q 22 118 724 568 rectclip
1 0 0 -1 0 768 cm q
0 g
513.887 158.113 m 471.23 148.73 427.68 144 384 144 c 252.434 144 130.703
 186.336 31.824 258.191 c 26.367 262.27 22.973 268.531 22.531 275.324 c 
22.086 282.121 24.641 288.77 29.52 293.52 c 33.727 297.633 39.246 300.133
 45.113 300.57 c 50.98 301.012 56.812 299.363 61.586 295.922 c 155.434 228.199
 268.266 191.828 384 192 c 414.273 192 443.902 194.367 472.895 199.105 c
 h
384 288 m 292.559 288 207.359 314.879 136.031 361.246 c 130.254 365.148
 126.551 371.457 125.961 378.406 c 125.375 385.352 127.965 392.191 133.008
 397.008 c 137.098 401 142.422 403.484 148.109 404.051 c 153.797 404.617
 159.508 403.234 164.305 400.129 c 215.219 367.504 272.781 346.676 332.785
 339.168 c h
508.609 355.391 m 546.289 317.711 l 576.594 329.297 605.152 343.809 631.969
 361.246 c 637.719 365.172 641.395 371.473 641.98 378.41 c 642.566 385.344
 640 392.176 634.992 397.008 c 630.902 401 625.578 403.484 619.891 404.051
 c 614.203 404.617 608.492 403.234 603.695 400.129 c 574.074 381.184 542.133
 366.148 508.656 355.391 c h
384 480 m 428.785 435.215 l 462.441 440.074 495.082 450.402 525.406 465.793
 c 539.086 472.754 541.055 490.945 530.207 501.793 c 529.488 502.512 l 525.664
 506.207 520.777 508.609 515.52 509.387 c 510.258 510.16 504.887 509.266
 500.16 506.832 c 463.992 489.148 424.258 479.969 384 480 c 619.441 244.559
 m 655.297 208.703 l 683.648 223.137 710.609 239.613 736.176 258.145 c 741.641
 262.227 745.039 268.504 745.473 275.312 c 745.906 282.121 743.332 288.773
 738.434 293.52 c 734.227 297.633 728.703 300.133 722.84 300.57 c 716.973
 301.012 711.137 299.363 706.367 295.922 c 679.023 276.18 649.926 258.988
 619.441 244.559 c 432.961 565.441 m 444.387 572.16 444.289 587.715 434.883
 597.121 c 400.945 631.008 l 396.441 635.508 390.34 638.035 383.977 638.035
 c 377.613 638.035 371.508 635.508 367.008 631.008 c 333.07 597.07 l 323.711
 587.711 323.613 572.207 334.992 565.391 c 349.828 556.609 366.758 551.98
 384 552 c 401.953 552 418.703 556.895 433.008 565.441 c h
642 90 m 648.43 83.57 657.805 81.059 666.59 83.41 c 675.375 85.766 682.234
 92.625 684.59 101.41 c 686.941 110.195 684.43 119.57 678 126 c 162 642 
l 155.57 648.43 146.195 650.941 137.41 648.59 c 128.625 646.234 121.766 
639.375 119.41 630.59 c 117.059 621.805 119.57 612.43 126 606 c h
642 90 m f
Q Q
showpage
%%Trailer
%%EOF
