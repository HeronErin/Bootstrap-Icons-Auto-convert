%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 44 237 1492 1371
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 44 237 1492 1371
1536 1536 cairo_set_page_size
%%EndPageSetup
q 44 237 1448 1134 rectclip
1 0 0 -1 0 1536 cm q
0 g
1027.777 316.223 m 942.457 297.465 855.355 288 768 288 c 504.863 288 261.406
 372.672 63.648 516.383 c 52.738 524.539 45.945 537.059 45.059 550.648 c
 44.172 564.242 49.281 577.539 59.039 587.039 c 67.449 595.27 78.496 600.262
 90.227 601.141 c 101.961 602.02 113.629 598.727 123.168 591.84 c 310.867
 456.395 536.535 383.66 768 384 c 828.543 384 887.809 388.734 945.793 398.207
 c h
768 576 m 585.121 576 414.719 629.762 272.062 722.496 c 260.504 730.297
 253.102 742.914 251.926 756.809 c 250.75 770.703 255.93 784.383 266.016
 794.016 c 274.195 802 284.848 806.965 296.219 808.098 c 307.594 809.234
 319.012 806.469 328.609 800.258 c 430.434 735.008 545.562 693.352 665.566
 678.336 c h
1017.215 710.785 m 1092.574 635.426 l 1153.184 658.594 1210.301 687.617
 1263.934 722.496 c 1263.938 722.496 l 1275.434 730.344 1282.789 742.949
 1283.961 756.816 c 1285.137 770.688 1280 784.352 1269.984 794.016 c 1261.805
 802 1251.152 806.965 1239.781 808.098 c 1228.406 809.234 1216.988 806.469
 1207.391 800.258 c 1148.152 762.367 1084.262 732.293 1017.312 710.785 c
 h
768 960 m 857.566 870.434 l 924.887 880.148 990.164 900.805 1050.816 931.586
 c 1078.176 945.508 1082.113 981.891 1060.418 1003.586 c 1058.977 1005.027
 l 1058.977 1005.023 l 1051.328 1012.414 1041.559 1017.219 1031.035 1018.77
 c 1020.516 1020.32 1009.773 1018.535 1000.32 1013.664 c 927.984 978.297
 848.52 959.941 768 960 c 1238.879 489.121 m 1310.59 417.41 l 1367.293 446.273
 1421.215 479.234 1472.352 516.289 c 1483.281 524.457 1490.078 537.004 1490.949
 550.621 c 1491.816 564.238 1486.668 577.551 1476.863 587.039 c 1468.453
 595.27 1457.41 600.262 1445.676 601.141 c 1433.941 602.02 1422.277 598.727
 1412.734 591.84 c 1358.043 552.359 1299.848 517.977 1238.879 489.121 c 
865.922 1130.879 m 888.77 1144.32 888.578 1175.422 869.762 1194.238 c 801.891
 1262.016 l 801.887 1262.016 l 792.887 1271.016 780.68 1276.07 767.953 1276.07
 c 755.223 1276.07 743.016 1271.016 734.016 1262.016 c 666.145 1194.145 
l 647.426 1175.426 647.234 1144.418 669.984 1130.785 c 699.656 1113.215 
733.516 1103.965 768 1104 c 803.902 1104 837.406 1113.793 866.016 1130.879
 c h
1284 180 m 1296.863 167.137 1315.609 162.117 1333.176 166.824 c 1350.746
 171.531 1364.469 185.254 1369.176 202.824 c 1373.883 220.391 1368.863 239.137
 1356 252 c 324 1284 l 311.137 1296.863 292.391 1301.883 274.824 1297.176
 c 257.254 1292.469 243.531 1278.746 238.824 1261.176 c 234.117 1243.609
 239.137 1224.863 252 1212 c h
1284 180 m f
Q Q
showpage
%%Trailer
%%EOF
