%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
192 192 m 192 166.539 202.113 142.121 220.117 124.117 c 238.121 106.113
 262.539 96 288 96 c 480 96 l 505.461 96 529.879 106.113 547.883 124.117
 c 565.887 142.121 576 166.539 576 192 c 576 576 l 576 601.461 565.887 625.879
 547.883 643.883 c 529.879 661.887 505.461 672 480 672 c 288 672 l 262.539
 672 238.121 661.887 220.117 643.883 c 202.113 625.879 192 601.461 192 576
 c h
432 528 m 432 510.852 422.852 495.004 408 486.43 c 393.148 477.855 374.852
 477.855 360 486.43 c 345.148 495.004 336 510.852 336 528 c 336 545.148 
345.148 560.996 360 569.57 c 374.852 578.145 393.148 578.145 408 569.57 
c 422.852 560.996 432 545.148 432 528 c 86.734 227.23 m 90.75 219.652 90.414
 210.508 85.855 203.242 c 81.297 195.977 73.211 191.695 64.641 192.012 c
 56.07 192.324 48.316 197.188 44.305 204.77 c 15.18 260.02 -0.027 321.543
 0 384 c 0 448.656 16.031 509.664 44.305 563.23 c 48.316 570.812 56.07 575.676
 64.641 575.988 c 73.211 576.305 81.297 572.023 85.855 564.758 c 90.414 
557.492 90.75 548.348 86.734 540.77 c 61.273 492.438 47.977 438.629 48 384
 c 48 327.359 62.016 273.984 86.734 227.23 c 723.695 204.766 m 723.695 204.77
 l 719.684 197.188 711.93 192.324 703.359 192.012 c 694.789 191.695 686.703
 195.977 682.145 203.242 c 677.586 210.508 677.25 219.652 681.266 227.23
 c 705.984 273.984 720 327.312 720 384 c 720 440.641 705.984 494.016 681.266
 540.77 c 677.25 548.348 677.586 557.492 682.145 564.758 c 686.703 572.023
 694.789 576.305 703.359 575.988 c 711.93 575.676 719.684 570.812 723.695
 563.23 c 752.82 507.98 768.027 446.457 768 384 c 768.027 321.543 752.82
 260.02 723.695 204.77 c 160.32 296.734 m 163.027 290.742 163.156 283.898
 160.672 277.805 c 158.191 271.715 153.32 266.906 147.195 264.512 c 141.07
 262.113 134.227 262.336 128.27 265.125 c 122.312 267.914 117.762 273.023
 115.68 279.266 c 102.66 312.648 95.988 348.168 96 384 c 96 420.91 102.961
 456.238 115.68 488.734 c 117.762 494.977 122.312 500.086 128.27 502.875
 c 134.227 505.664 141.07 505.887 147.195 503.488 c 153.32 501.094 158.191
 496.285 160.672 490.195 c 163.156 484.102 163.027 477.258 160.32 471.266
 c 149.5 443.445 143.965 413.852 144 384 c 144 353.184 149.762 323.762 160.32
 296.734 c 652.32 279.262 m 652.32 279.266 l 648.91 271.715 641.852 266.457
 633.641 265.355 c 625.434 264.25 617.234 267.461 611.953 273.844 c 606.676
 280.227 605.059 288.879 607.68 296.734 c 618.238 323.758 624 353.184 624
 384 c 624 414.816 618.238 444.238 607.68 471.266 c 605.059 479.121 606.676
 487.773 611.953 494.156 c 617.234 500.539 625.434 503.75 633.641 502.645
 c 641.852 501.543 648.91 496.285 652.32 488.734 c 665.09 456.238 672 420.91
 672 384 c 672 347.09 665.039 311.762 652.32 279.266 c f
Q Q
showpage
%%Trailer
%%EOF
