%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:42 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 74 0 694 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 74 0 694 768
768 768 cairo_set_page_size
%%EndPageSetup
q 74 0 620 768 rectclip
1 0 0 -1 0 768 cm q
0 g
240 480 m 240 624 l 528 624 l 528 480 l 480 480 l 480 504 l 480 512.574
 475.426 520.496 468 524.785 c 460.574 529.07 451.426 529.07 444 524.785
 c 436.574 520.496 432 512.574 432 504 c 432 480 l h
240 480 m f
288 96 m 288 112.367 l 265.871 120.219 244.789 130.742 225.215 143.711 
c 205.246 83.855 l 201.539 72.715 193.879 63.32 183.715 57.449 c 173.547
 51.578 161.582 49.633 150.078 51.988 c 138.578 54.344 128.336 60.828 121.297
 70.223 c 84.336 119.52 l 74.867 132.129 72.195 148.578 77.184 163.535 c
 115.727 279.07 l 102.668 312.512 95.98 348.102 96 384 c 96 648 l 96 679.824
 108.645 710.348 131.148 732.852 c 153.652 755.355 184.176 768 216 768 c
 552 768 l 583.824 768 614.348 755.355 636.852 732.852 c 659.355 710.348
 672 679.824 672 648 c 672 384 l 672 346.992 664.992 311.566 652.32 279.07
 c 690.77 163.535 l 695.77 148.586 693.117 132.137 683.664 119.52 c 646.703
 70.223 l 639.668 60.812 629.422 54.309 617.906 51.949 c 606.395 49.586 
594.418 51.531 584.242 57.41 c 574.066 63.293 566.402 72.703 562.703 83.855
 c 542.781 143.711 l 542.785 143.711 l 523.215 130.727 502.129 120.184 480
 112.32 c 480 96 l 480 61.703 461.703 30.012 432 12.863 c 402.297 -4.289
 365.703 -4.289 336 12.863 c 306.297 30.012 288 61.703 288 96 c 336 96 m
 336 78.852 345.148 63.004 360 54.43 c 374.852 45.855 393.148 45.855 408
 54.43 c 422.852 63.004 432 78.852 432 96 c 432 99.984 l 400.227 94.613 
367.773 94.613 336 99.984 c h
621.168 220.559 m 609.945 204.289 597.078 189.219 582.77 175.586 c 608.258
 99.027 l 645.219 148.324 l h
185.281 175.586 m 170.969 189.219 158.102 204.289 146.879 220.559 c 122.734
 148.32 l 159.695 99.023 l h
193.922 356.641 m 200.441 310.875 223.258 268.996 258.176 238.699 c 293.094
 208.406 337.77 191.727 384 191.727 c 430.23 191.727 474.906 208.406 509.824
 238.699 c 544.742 268.996 567.559 310.875 574.078 356.641 c 575.297 365.129
 571.895 373.621 565.152 378.922 c 558.41 384.219 549.352 385.52 541.391
 382.328 c 533.43 379.141 527.777 371.945 526.559 363.457 c 519.984 317.301
 491.469 277.188 450.039 255.805 c 408.609 234.426 359.391 234.426 317.961
 255.805 c 276.531 277.188 248.016 317.301 241.441 363.457 c 240.223 371.945
 234.57 379.141 226.609 382.328 c 218.648 385.52 209.59 384.219 202.848 
378.922 c 196.105 373.621 192.703 365.129 193.922 356.641 c 192 456 m 192
 449.637 194.527 443.531 199.031 439.031 c 203.531 434.527 209.637 432 216
 432 c 552 432 l 558.363 432 564.469 434.527 568.969 439.031 c 573.473 443.531
 576 449.637 576 456 c 576 648 l 576 654.363 573.473 660.469 568.969 664.969
 c 564.469 669.473 558.363 672 552 672 c 216 672 l 209.637 672 203.531 669.473
 199.031 664.969 c 194.527 660.469 192 654.363 192 648 c h
192 456 m f
Q Q
showpage
%%Trailer
%%EOF
