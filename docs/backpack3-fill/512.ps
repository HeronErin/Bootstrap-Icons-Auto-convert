%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 37 0 347 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 37 0 347 384
384 384 cairo_set_page_size
%%EndPageSetup
q 37 0 310 384 rectclip
1 0 0 -1 0 384 cm q
0 g
120 240 m 120 312 l 264 312 l 264 240 l 240 240 l 240 252 l 240 258.629
 234.629 264 228 264 c 221.371 264 216 258.629 216 252 c 216 240 l h
120 240 m f
144 48 m 144 56.184 l 132.938 60.109 122.395 65.371 112.609 71.855 c 102.625
 41.926 l 102.625 41.93 l 100.77 36.359 96.941 31.66 91.855 28.727 c 86.773
 25.789 80.789 24.816 75.039 25.992 c 69.289 27.172 64.168 30.414 60.648
 35.113 c 42.168 59.762 l 37.434 66.062 36.098 74.289 38.594 81.77 c 57.867
 139.539 l 57.863 139.535 l 51.336 156.258 47.988 174.051 48 192 c 48 324
 l 48 339.914 54.32 355.176 65.574 366.426 c 76.824 377.68 92.086 384 108
 384 c 276 384 l 291.914 384 307.176 377.68 318.426 366.426 c 329.68 355.176
 336 339.914 336 324 c 336 192 l 336 173.496 332.496 155.785 326.16 139.535
 c 345.383 81.766 l 345.383 81.77 l 347.887 74.293 346.559 66.066 341.832
 59.762 c 323.352 35.113 l 319.832 30.406 314.711 27.156 308.953 25.973 
c 303.199 24.793 297.207 25.766 292.121 28.707 c 287.035 31.645 283.203 
36.352 281.352 41.93 c 271.391 71.859 l 271.391 71.855 l 261.605 65.363 
251.066 60.094 240 56.16 c 240 48 l 240 30.852 230.852 15.004 216 6.43 c
 201.148 -2.145 182.852 -2.145 168 6.43 c 153.148 15.004 144 30.852 144 
48 c 168 48 m 168 39.426 172.574 31.504 180 27.215 c 187.426 22.93 196.574
 22.93 204 27.215 c 211.426 31.504 216 39.426 216 48 c 216 49.992 l 200.113
 47.305 183.887 47.305 168 49.992 c h
310.586 110.281 m 304.973 102.145 298.539 94.609 291.383 87.793 c 304.125
 49.512 l 322.605 74.16 l h
92.641 87.793 m 85.484 94.609 79.051 102.145 73.441 110.281 c 61.367 74.16
 l 79.848 49.512 l h
96.961 178.32 m 101.344 147.551 120.355 120.805 147.973 106.555 c 175.594
 92.301 208.406 92.301 236.027 106.555 c 263.645 120.805 282.656 147.551
 287.039 178.32 c 287.98 184.883 283.426 190.965 276.863 191.902 c 270.305
 192.844 264.223 188.289 263.281 181.727 c 259.992 158.652 245.734 138.594
 225.02 127.902 c 204.305 117.211 179.695 117.211 158.98 127.902 c 138.266
 138.594 124.008 158.652 120.719 181.727 c 119.777 188.289 113.695 192.844
 107.137 191.902 c 100.574 190.965 96.02 184.883 96.961 178.32 c 96 228 
m 96 221.371 101.371 216 108 216 c 276 216 l 279.184 216 282.234 217.266
 284.484 219.516 c 286.734 221.766 288 224.816 288 228 c 288 324 l 288 327.184
 286.734 330.234 284.484 332.484 c 282.234 334.734 279.184 336 276 336 c
 108 336 l 101.371 336 96 330.629 96 324 c h
96 228 m f
Q Q
showpage
%%Trailer
%%EOF
