%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:59 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 12 0 84 96
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 12 0 84 96
96 96 cairo_set_page_size
%%EndPageSetup
q 12 0 72 96 rectclip
1 0 0 -1 0 96 cm q
0 g
48 48 m 52.969 48 57 42.629 57 36 c 57 29.371 52.969 24 48 24 c 43.031 
24 39 29.371 39 36 c 39 42.629 43.031 48 48 48 c f
71.719 52.859 m 70.547 32.531 65.91 19.816 61.059 11.945 c 58.242 7.398
 55.379 4.508 53.141 2.723 c 52.27 2.02 51.34 1.391 50.363 0.836 c 50.082
 0.672 49.793 0.523 49.5 0.383 c 49.039 0.141 48.523 0.008 48 0 c 47.438
 0.008 46.891 0.16 46.402 0.438 c 46.113 0.586 45.828 0.746 45.551 0.918
 c 44.59 1.512 43.668 2.176 42.797 2.898 c 40.578 4.746 37.734 7.715 34.938
 12.32 c 30.109 20.254 25.477 32.918 24.293 52.855 c 15.312 63.812 l 15.289
 63.844 l 15.289 63.84 l 13.16 66.5 12 69.805 12 73.211 c 12 93 l 12 94.293
 12.828 95.438 14.051 95.848 c 15.277 96.254 16.625 95.832 17.398 94.801
 c 24.148 85.801 l 25.145 84.469 26.668 83.402 28.66 82.379 c 29.945 81.73
 31.145 81.227 32.41 80.691 c 33.598 80.188 l 37.797 82.754 42.898 83.996
 47.996 83.996 c 53.098 83.996 58.195 82.754 62.395 80.188 c 62.793 80.363
 63.188 80.531 63.57 80.684 c 64.848 81.223 66.047 81.727 67.332 82.375 
c 69.324 83.395 70.848 84.465 71.844 85.797 c 78.594 94.797 l 78.602 94.801
 l 79.375 95.832 80.723 96.254 81.949 95.848 c 83.172 95.438 84 94.293 84
 93 c 84 73.211 l 84 69.805 82.84 66.5 80.711 63.84 c h
72 62.672 m 72 63 l 72 68.195 70.297 72.512 67.5 75.84 c 68.375 76.223 
69.254 76.621 70.051 77.035 c 72.391 78.219 74.852 79.797 76.652 82.195 
c 78 84 l 78 73.211 l 78 71.172 77.309 69.195 76.039 67.602 c h
28.5 75.84 m 25.703 72.512 24 68.195 24 63 c 24 62.676 l 19.961 67.598 
l 18.691 69.191 18 71.172 18 73.211 c 18 84 l 19.352 82.199 l 21.152 79.801
 23.613 78.215 25.953 77.035 c 26.75 76.629 27.629 76.227 28.504 75.84 c
 48.055 6.438 m 48.438 6.676 48.891 7.004 49.41 7.414 c 51.113 8.77 53.508
 11.141 55.949 15.094 c 60.82 23.016 66 37.422 66 63 c 66 68.148 63.758 
71.879 60.344 74.359 c 57.102 76.715 52.688 78 48 78 c 43.312 78 38.898 
76.715 35.656 74.359 c 32.238 71.875 30 68.148 30 63 c 30 37.906 35.16 23.484
 40.062 15.434 c 42.516 11.414 44.922 8.941 46.637 7.512 c 47.18 7.059 47.652
 6.699 48.051 6.434 c h
48.055 6.438 m f
56.875 86.164 m 53.996 86.723 50.996 87 48 87 c 45.008 87 42.008 86.723
 39.125 86.164 c 45.602 94.801 l 46.168 95.555 47.055 96 48 96 c 48.945 
96 49.832 95.555 50.398 94.801 c h
56.875 86.164 m f
Q Q
showpage
%%Trailer
%%EOF
