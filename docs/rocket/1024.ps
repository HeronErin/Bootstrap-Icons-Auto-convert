%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 384 m 423.742 384 456 341.039 456 288 c 456 234.961 423.742 192 384
 192 c 344.258 192 312 234.961 312 288 c 312 341.039 344.258 384 384 384
 c f
573.742 422.879 m 564.383 260.254 527.277 158.543 488.445 95.566 c 465.938
 59.184 443.039 36.047 425.137 21.793 c 418.145 16.168 410.711 11.109 402.91
 6.672 c 400.656 5.379 398.352 4.18 396 3.07 c 392.301 1.109 388.188 0.059
 384 0 c 379.516 0.066 375.121 1.27 371.23 3.504 c 368.91 4.691 366.637 
5.973 364.414 7.344 c 356.707 12.098 349.344 17.391 342.383 23.184 c 324.621
 37.969 301.871 61.727 279.504 98.543 c 240.863 162 203.809 263.328 194.352
 422.832 c 122.496 510.48 l 122.305 510.719 l 105.277 532 96 558.441 96 
585.695 c 96 744 l 96 750.758 98.852 757.207 103.852 761.754 c 108.852 766.301
 115.539 768.531 122.266 767.895 c 128.996 767.254 135.145 763.809 139.199
 758.398 c 193.199 686.398 l 201.168 675.742 213.359 667.199 229.297 659.039
 c 239.57 653.855 249.168 649.824 259.297 645.551 c 268.801 641.52 l 302.402
 662.062 343.199 672 384 672 c 424.801 672 465.602 662.062 499.199 641.52
 c 502.398 642.926 505.535 644.254 508.605 645.504 c 518.828 649.824 528.43
 653.855 538.703 659.039 c 554.641 667.199 566.832 675.742 574.801 686.398
 c 628.801 758.398 l 632.855 763.809 639.004 767.254 645.734 767.895 c 652.461
 768.531 659.148 766.301 664.148 761.754 c 669.148 757.207 672 750.758 672
 744 c 672 585.695 l 672 558.441 662.723 532 645.695 510.719 c h
576 501.359 m 576 504 l 576 545.566 562.367 580.078 540 606.719 c 547.008
 609.789 554.016 612.957 560.398 616.27 c 579.117 625.727 598.797 638.348
 613.199 657.551 c 624 672 l 624 585.695 l 624 569.391 618.469 553.566 608.305
 540.816 c h
228 606.719 m 205.633 580.078 192 545.566 192 504 c 192 501.406 l 159.695
 540.766 l 159.695 540.77 l 149.523 553.531 143.988 569.375 144 585.695 
c 144 672 l 154.801 657.602 l 169.199 638.402 188.879 625.73 207.602 616.273
 c 213.984 613.008 220.992 609.793 228 606.723 c 384.434 51.504 m 387.504
 53.426 391.121 56.031 395.281 59.328 c 408.914 70.176 428.066 89.137 447.602
 120.77 c 486.574 184.129 528 299.375 528 504 c 528 545.184 510.047 575.039
 482.734 594.863 c 456.816 613.727 421.488 624 384 624 c 346.512 624 311.184
 613.727 285.266 594.863 c 257.902 574.992 240 545.184 240 504 c 240 303.266
 281.281 187.871 320.496 123.457 c 340.129 91.297 359.375 71.52 373.105 
60.098 c 377.457 56.48 381.234 53.602 384.434 51.457 c h
384.434 51.504 m f
454.992 689.328 m 431.953 693.793 407.953 696 384 696 c 360.047 696 336.047
 693.793 313.008 689.328 c 364.801 758.398 l 369.332 764.441 376.445 768
 384 768 c 391.555 768 398.668 764.441 403.199 758.398 c h
454.992 689.328 m f
Q Q
showpage
%%Trailer
%%EOF
