%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:00 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 48 0 336 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 48 0 336 384
384 384 cairo_set_page_size
%%EndPageSetup
q 48 0 288 384 rectclip
1 0 0 -1 0 384 cm q
0 g
192 192 m 211.871 192 228 170.52 228 144 c 228 117.48 211.871 96 192 96
 c 172.129 96 156 117.48 156 144 c 156 170.52 172.129 192 192 192 c f
286.871 211.441 m 282.191 130.129 263.641 79.273 244.223 47.785 c 232.969
 29.594 221.52 18.023 212.566 10.895 c 209.07 8.082 205.355 5.555 201.457
 3.336 c 200.328 2.691 199.176 2.09 198 1.535 c 196.148 0.555 194.094 0.027
 192 0 c 189.758 0.031 187.562 0.637 185.617 1.754 c 184.453 2.344 183.316
 2.984 182.207 3.672 c 178.355 6.051 174.672 8.695 171.191 11.594 c 162.312
 18.984 150.934 30.867 139.75 49.273 c 120.43 81 101.902 131.664 97.176 
211.418 c 61.246 255.242 l 61.148 255.363 l 61.152 255.359 l 52.637 266 
48 279.223 48 292.848 c 48 372 l 48 377.164 51.305 381.75 56.207 383.383
 c 61.105 385.016 66.5 383.332 69.602 379.199 c 96.602 343.199 l 100.586
 337.871 106.68 333.598 114.648 329.52 c 119.785 326.926 124.586 324.91 
129.648 322.777 c 134.402 320.762 l 151.203 331.035 171.602 336 192.004 
336 c 212.402 336 232.805 331.031 249.605 320.762 c 251.207 321.465 252.773
 322.129 254.309 322.754 c 259.422 324.914 264.219 326.93 269.355 329.523
 c 277.324 333.602 283.418 337.875 287.402 343.203 c 314.402 379.203 l 314.398
 379.199 l 317.5 383.332 322.895 385.016 327.793 383.383 c 332.695 381.75
 336 377.164 336 372 c 336 292.848 l 336 279.223 331.363 266 322.848 255.359
 c h
288 250.68 m 288 252 l 288 272.785 281.184 290.039 270 303.359 c 273.504
 304.895 277.008 306.48 280.199 308.137 c 289.559 312.863 299.398 319.176
 306.598 328.777 c 312 336 l 312 292.848 l 312 284.695 309.234 276.785 304.152
 270.406 c h
114 303.359 m 102.816 290.039 96 272.785 96 252 c 96 250.703 l 79.848 270.383
 l 74.762 276.766 71.992 284.688 72 292.848 c 72 336 l 77.398 328.801 l 
84.598 319.199 94.438 312.863 103.797 308.137 c 106.988 306.504 110.492 
304.898 113.996 303.359 c 192.215 25.754 m 193.75 26.715 195.559 28.02 197.641
 29.664 c 204.457 35.09 214.031 44.566 223.801 60.383 c 243.289 92.062 264
 149.688 264 252 c 264 272.594 255.023 287.52 241.367 297.434 c 228.406 
306.863 210.742 312 192 312 c 173.258 312 155.594 306.863 142.633 297.434
 c 128.953 287.496 120 272.594 120 252 c 120 151.633 140.641 93.938 160.246
 61.727 c 170.062 45.648 179.688 35.758 186.551 30.047 c 188.727 28.238 
190.613 26.801 192.215 25.727 c h
192.215 25.754 m f
227.496 344.664 m 215.977 346.895 203.977 348 192 348 c 180.023 348 168.023
 346.895 156.504 344.664 c 182.398 379.199 l 184.668 382.223 188.223 384
 192 384 c 195.777 384 199.332 382.223 201.602 379.199 c h
227.496 344.664 m f
Q Q
showpage
%%Trailer
%%EOF
