%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 672 672 rectclip
1 0 0 -1 0 768 cm q
0 g
528 240 m 528 291.445 500.555 338.984 456 364.707 c 411.445 390.43 356.555
 390.43 312 364.707 c 267.445 338.984 240 291.445 240 240 c 240 188.555 
267.445 141.016 312 115.293 c 356.555 89.57 411.445 89.57 456 115.293 c 
500.555 141.016 528 188.555 528 240 c 96 624 m 96 672 144 672 144 672 c 
396.289 672 l 388.133 648.871 383.98 624.523 384 600 c 384 569.133 390.613
 538.625 403.398 510.531 c 416.184 482.438 434.84 457.41 458.113 437.137
 c 435.711 433.777 411.008 432.062 384 432 c 144 432 96 576 96 624 c f
768 600 m 768 644.555 750.301 687.289 718.793 718.793 c 687.289 750.301
 644.555 768 600 768 c 555.445 768 512.711 750.301 481.207 718.793 c 449.699
 687.289 432 644.555 432 600 c 432 555.445 449.699 512.711 481.207 481.207
 c 512.711 449.699 555.445 432 600 432 c 644.555 432 687.289 449.699 718.793
 481.207 c 750.301 512.711 768 555.445 768 600 c 600 504 m 593.637 504 587.531
 506.527 583.031 511.031 c 578.527 515.531 576 521.637 576 528 c 576 600
 l 576 608.574 580.574 616.496 588 620.785 c 595.426 625.07 604.574 625.07
 612 620.785 c 619.426 616.496 624 608.574 624 600 c 624 528 l 624 521.637
 621.473 515.531 616.969 511.031 c 612.469 506.527 606.363 504 600 504 c
 600 696 m 608.574 696 616.496 691.426 620.785 684 c 625.07 676.574 625.07
 667.426 620.785 660 c 616.496 652.574 608.574 648 600 648 c 591.426 648
 583.504 652.574 579.215 660 c 574.93 667.426 574.93 676.574 579.215 684
 c 583.504 691.426 591.426 696 600 696 c f
Q Q
showpage
%%Trailer
%%EOF
