%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:39 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 216 768 576
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 216 768 576
768 768 cairo_set_page_size
%%EndPageSetup
q 0 216 768 360 rectclip
1 0 0 -1 0 768 cm q
0 g
272.641 278.016 m 352.559 372 l 272.688 465.984 l 247.836 490.492 214.293
 504.16 179.391 504 c 144.488 503.836 111.07 489.859 86.445 465.121 c 61.824
 440.387 48 406.902 48 372 c 48 337.098 61.824 303.613 86.445 278.879 c 
111.07 254.141 144.488 240.164 179.391 240 c 214.293 239.84 247.836 253.508
 272.688 278.016 c h
384 334.945 m 307.969 245.426 l 307.297 244.707 l 307.297 244.703 l 273.535
 210.953 227.754 191.996 180.02 192 c 132.281 192.004 86.5 210.969 52.75
 244.727 c 18.996 278.484 0.035 324.266 0.035 372 c 0.035 419.734 18.996
 465.516 52.75 499.273 c 86.5 533.031 132.281 551.996 180.02 552 c 227.754
 552.004 273.535 533.047 307.297 499.297 c 307.969 498.578 l 384 409.055
 l 460.031 498.574 l 460.703 499.293 l 460.703 499.297 l 494.465 533.047
 540.246 552.004 587.98 552 c 635.719 551.996 681.5 533.031 715.25 499.273
 c 749.004 465.516 767.965 419.734 767.965 372 c 767.965 324.266 749.004
 278.484 715.25 244.727 c 681.5 210.969 635.719 192.004 587.98 192 c 540.246
 191.996 494.465 210.953 460.703 244.703 c 460.031 245.422 l h
415.488 372 m 495.312 278.016 l 520.164 253.508 553.707 239.84 588.609 
240 c 623.512 240.164 656.93 254.141 681.555 278.879 c 706.176 303.613 720
 337.098 720 372 c 720 406.902 706.176 440.387 681.555 465.121 c 656.93 
489.859 623.512 503.836 588.609 504 c 553.707 504.16 520.164 490.492 495.312
 465.984 c h
415.488 372 m f
Q Q
showpage
%%Trailer
%%EOF
