%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 432 1536 1152
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 432 1536 1152
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 432 1536 720 rectclip
1 0 0 -1 0 1536 cm q
0 g
545.281 556.031 m 705.121 744 l 545.375 931.969 l 495.676 980.984 428.582
 1008.32 358.777 1007.996 c 288.973 1007.676 222.137 979.719 172.895 930.242
 c 123.648 880.77 96 813.805 96 744 c 96 674.195 123.648 607.23 172.895 
557.758 c 222.137 508.281 288.973 480.324 358.777 480.004 c 428.582 479.68
 495.676 507.016 545.375 556.031 c h
768 669.887 m 615.938 490.848 l 614.594 489.406 l 547.074 421.906 455.508
 383.992 360.035 384 c 264.562 384.008 173.004 421.941 105.496 489.453 c
 37.992 556.965 0.066 648.527 0.066 744 c 0.066 839.473 37.992 931.035 105.496
 998.547 c 173.004 1066.059 264.562 1103.992 360.035 1104 c 455.508 1104.008
 547.074 1066.094 614.594 998.594 c 615.938 997.152 l 768 818.113 l 920.062
 997.152 l 921.406 998.594 l 988.926 1066.094 1080.492 1104.008 1175.965
 1104 c 1271.438 1103.992 1362.996 1066.059 1430.504 998.547 c 1498.008 
931.035 1535.934 839.473 1535.934 744 c 1535.934 648.527 1498.008 556.965
 1430.504 489.453 c 1362.996 421.941 1271.438 384.008 1175.965 384 c 1080.492
 383.992 988.926 421.906 921.406 489.406 c 920.062 490.848 l h
830.977 744 m 990.625 556.031 l 1040.324 507.016 1107.418 479.68 1177.223
 480.004 c 1247.027 480.324 1313.863 508.281 1363.105 557.758 c 1412.352
 607.23 1440 674.195 1440 744 c 1440 813.805 1412.352 880.77 1363.105 930.242
 c 1313.863 979.719 1247.027 1007.676 1177.223 1007.996 c 1107.418 1008.32
 1040.324 980.984 990.625 931.969 c h
830.977 744 m f
Q Q
showpage
%%Trailer
%%EOF
