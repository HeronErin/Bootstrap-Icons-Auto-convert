%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 373 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 373 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 373 384 rectclip
1 0 0 -1 0 384 cm q
0 g
321.215 81.793 m 334.055 88.418 350.496 109.441 358.559 128.906 c 358.559
 128.902 l 370.297 158.59 374.445 190.738 370.633 222.434 c 369.793 229.656
 l 361.836 275.562 336.953 316.82 300.066 345.277 c 263.176 373.734 216.957
 387.332 170.531 383.375 c 124.109 379.422 80.855 358.207 49.309 323.918
 c 17.766 289.629 0.223 244.758 0.145 198.168 c 0.145 197.207 l 0.543 188.488
 1.457 179.832 2.879 171.238 c 3.117 169.461 4.68 161.16 5.039 159.504 c
 5.277 158.281 l 5.281 158.281 l 9.832 138.023 18.32 118.859 30.266 101.879
 c 35.496 94.438 41.297 87.48 47.664 81 c 53.266 75.273 59.328 70.07 65.855
 65.398 c 67.824 64.102 69.914 63 72.098 62.113 c 71.664 68.547 71.137 99.387
 78.531 108.746 c 78.602 108.746 l 78.602 108.742 l 90.965 94.199 106.234
 82.402 123.434 74.113 c 119.531 89.051 119.703 104.766 123.938 119.617 
c 125.617 120.738 127.219 121.953 128.738 123.266 c 131.305 125.426 134.164
 128.234 139.633 133.656 c 141.266 135.242 l 141.48 135.457 l 143.082 137.012
 144.789 138.457 146.594 139.777 c 155.785 146.664 169.227 153.289 177.938
 157.562 c 182.762 159.961 186.145 161.594 186.555 162.195 c 186.652 162.387
 l 186.363 167.02 169.973 182.98 164.262 182.98 c 111.316 182.98 102.727
 215.02 102.727 215.02 c 104.816 238.949 119.863 259.156 139.133 271.586
 c 139.129 271.586 l 142.516 273.73 146.035 275.66 149.664 277.367 c 151.488
 278.168 153.312 278.918 155.137 279.625 c 162.938 282.387 171.098 283.945
 179.375 284.281 c 252.406 287.715 279.094 216.984 254.473 170.402 c 254.473
 170.375 l 250.086 162.105 244.125 154.766 236.93 148.777 c 232.711 145.305
 228.113 142.328 223.223 139.895 c 223.152 139.848 l 238.945 137.797 254.938
 141.68 268.031 150.742 c 259.844 136.336 247.992 124.344 233.68 115.988
 c 219.367 107.629 203.102 103.203 186.527 103.152 c 184.672 103.168 182.832
 103.25 181.008 103.391 c 180 103.461 l 180 103.441 l 179.953 103.441 l 
173.453 103.906 167.02 105.031 160.754 106.801 c 158.172 104.203 155.504
 101.688 152.762 99.266 c 151.238 97.949 149.637 96.73 147.961 95.617 c 
147.105 92.59 146.402 89.52 145.848 86.426 c 156.289 82.621 167.211 80.285
 178.297 79.488 c 179.496 79.418 l 180.742 79.32 182.496 79.18 184.418 79.129
 c 191.902 53.09 209.594 20.23 244.078 0.047 c 244.008 0.168 l 244.078 0.145
 l 244.125 0.098 l 244.172 0.098 l 244.219 0.051 l 244.578 0.051 l 244.586
 0.047 l 244.695 0.066 244.801 0.129 244.871 0.215 c 246.098 4.223 247.754
 8.086 249.816 11.734 c 251.258 14.184 252.719 16.559 254.207 18.863 c 265.969
 37.438 278.758 51.961 291.238 66.094 c 309.742 87.07 327.527 107.254 340.102
 138.574 c 340.078 138.262 l 340.078 138.266 l 336.766 118.574 330.402 99.52
 321.215 81.793 c f
Q Q
showpage
%%Trailer
%%EOF
