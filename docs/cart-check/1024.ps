%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 720 720 rectclip
1 0 0 -1 0 768 cm q
0 g
544.992 304.992 m 551.062 298.922 553.434 290.074 551.211 281.781 c 548.988
 273.488 542.512 267.012 534.219 264.789 c 525.926 262.566 517.078 264.938
 511.008 271.008 c 384 398.062 l 328.992 343.008 l 322.922 336.938 314.074
 334.566 305.781 336.789 c 297.488 339.012 291.012 345.488 288.789 353.781
 c 286.566 362.074 288.938 370.922 295.008 376.992 c 367.008 448.992 l 371.512
 453.508 377.625 456.043 384 456.043 c 390.375 456.043 396.488 453.508 400.992
 448.992 c h
544.992 304.992 m f
24 48 m 15.426 48 7.504 52.574 3.215 60 c -1.07 67.426 -1.07 76.574 3.215
 84 c 7.504 91.426 15.426 96 24 96 c 77.281 96 l 96.527 173.137 l 168.43
 556.418 l 168.434 556.414 l 169.461 561.914 172.379 566.883 176.684 570.457
 c 180.988 574.035 186.406 575.996 192 576 c 240 576 l 205.703 576 174.012
 594.297 156.863 624 c 139.711 653.703 139.711 690.297 156.863 720 c 174.012
 749.703 205.703 768 240 768 c 274.297 768 305.988 749.703 323.137 720 c
 340.289 690.297 340.289 653.703 323.137 624 c 305.988 594.297 274.297 576
 240 576 c 576 576 l 541.703 576 510.012 594.297 492.863 624 c 475.711 653.703
 475.711 690.297 492.863 720 c 510.012 749.703 541.703 768 576 768 c 610.297
 768 641.988 749.703 659.137 720 c 676.289 690.297 676.289 653.703 659.137
 624 c 641.988 594.297 610.297 576 576 576 c 624 576 l 629.594 575.996 635.012
 574.035 639.316 570.457 c 643.621 566.883 646.539 561.914 647.566 556.414
 c 719.566 172.414 l 720.879 165.402 719.004 158.172 714.449 152.68 c 709.895
 147.188 703.133 144.008 696 144 c 138.719 144 l 119.277 66.191 l 119.281
 66.191 l 117.984 60.996 114.988 56.387 110.77 53.09 c 106.555 49.793 101.352
 48 96 48 c h
211.922 528 m 148.895 192 l 667.102 192 l 604.078 528 l h
288 672 m 288 689.148 278.852 704.996 264 713.57 c 249.148 722.145 230.852
 722.145 216 713.57 c 201.148 704.996 192 689.148 192 672 c 192 654.852 
201.148 639.004 216 630.43 c 230.852 621.855 249.148 621.855 264 630.43 
c 278.852 639.004 288 654.852 288 672 c 624 672 m 624 689.148 614.852 704.996
 600 713.57 c 585.148 722.145 566.852 722.145 552 713.57 c 537.148 704.996
 528 689.148 528 672 c 528 654.852 537.148 639.004 552 630.43 c 566.852 
621.855 585.148 621.855 600 630.43 c 614.852 639.004 624 654.852 624 672
 c f
Q Q
showpage
%%Trailer
%%EOF
