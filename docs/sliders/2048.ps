%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:51 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1441
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1441
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1441 rectclip
1 0 0 -1 0 1536 cm q
0 g
1104 192 m 1052.555 192 1005.016 219.445 979.293 264 c 953.57 308.555 953.57
 363.445 979.293 408 c 1005.016 452.555 1052.555 480 1104 480 c 1155.445
 480 1202.984 452.555 1228.707 408 c 1254.43 363.445 1254.43 308.555 1228.707
 264 c 1202.984 219.445 1155.445 192 1104 192 c 868.801 288 m 879.816 233.746
 909.25 184.969 952.117 149.934 c 994.98 114.898 1048.641 95.758 1104 95.758
 c 1159.359 95.758 1213.02 114.898 1255.883 149.934 c 1298.75 184.969 1328.184
 233.746 1339.199 288 c 1536 288 l 1536 384 l 1339.199 384 l 1328.184 438.254
 1298.75 487.031 1255.883 522.066 c 1213.02 557.102 1159.359 576.242 1104
 576.242 c 1048.641 576.242 994.98 557.102 952.117 522.066 c 909.25 487.031
 879.816 438.254 868.801 384 c 0 384 l 0 288 l h
432 672 m 380.555 672 333.016 699.445 307.293 744 c 281.57 788.555 281.57
 843.445 307.293 888 c 333.016 932.555 380.555 960 432 960 c 483.445 960
 530.984 932.555 556.707 888 c 582.43 843.445 582.43 788.555 556.707 744
 c 530.984 699.445 483.445 672 432 672 c 196.801 768 m 207.816 713.746 237.25
 664.969 280.117 629.934 c 322.98 594.898 376.641 575.758 432 575.758 c 
487.359 575.758 541.02 594.898 583.883 629.934 c 626.75 664.969 656.184 
713.746 667.199 768 c 1536 768 l 1536 864 l 667.199 864 l 656.184 918.254
 626.75 967.031 583.883 1002.066 c 541.02 1037.102 487.359 1056.242 432 
1056.242 c 376.641 1056.242 322.98 1037.102 280.117 1002.066 c 237.25 967.031
 207.816 918.254 196.801 864 c 0 864 l 0 768 l h
1104 1152 m 1052.555 1152 1005.016 1179.445 979.293 1224 c 953.57 1268.555
 953.57 1323.445 979.293 1368 c 1005.016 1412.555 1052.555 1440 1104 1440
 c 1155.445 1440 1202.984 1412.555 1228.707 1368 c 1254.43 1323.445 1254.43
 1268.555 1228.707 1224 c 1202.984 1179.445 1155.445 1152 1104 1152 c 868.801
 1248 m 879.816 1193.746 909.25 1144.969 952.117 1109.934 c 994.98 1074.898
 1048.641 1055.758 1104 1055.758 c 1159.359 1055.758 1213.02 1074.898 1255.883
 1109.934 c 1298.75 1144.969 1328.184 1193.746 1339.199 1248 c 1536 1248
 l 1536 1344 l 1339.199 1344 l 1328.184 1398.254 1298.75 1447.031 1255.883
 1482.066 c 1213.02 1517.102 1159.359 1536.242 1104 1536.242 c 1048.641 
1536.242 994.98 1517.102 952.117 1482.066 c 909.25 1447.031 879.816 1398.254
 868.801 1344 c 0 1344 l 0 1248 l h
868.801 1248 m f*
Q Q
showpage
%%Trailer
%%EOF
