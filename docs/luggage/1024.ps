%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 720 rectclip
1 0 0 -1 0 768 cm q
0 g
120 48 m 113.637 48 107.531 50.527 103.031 55.031 c 98.527 59.531 96 65.637
 96 72 c 96 240 l 72 240 l 52.906 240 34.59 247.586 21.09 261.09 c 7.586
 274.59 0 292.906 0 312 c 0 648 l -0.008 662.895 4.605 677.426 13.203 689.59
 c 21.797 701.758 33.957 710.953 48 715.922 c 48 732 l 48 744.863 54.863
 756.746 66 763.176 c 77.137 769.609 90.863 769.609 102 763.176 c 113.137
 756.746 120 744.863 120 732 c 120 720 l 192 720 l 192 672 l 72 672 l 65.637
 672 59.531 669.473 55.031 664.969 c 50.527 660.469 48 654.363 48 648 c 
48 312 l 48 305.637 50.527 299.531 55.031 295.031 c 59.531 290.527 65.637
 288 72 288 c 312 288 l 318.363 288 324.469 290.527 328.969 295.031 c 333.473
 299.531 336 305.637 336 312 c 336 336 l 384 336 l 384 312 l 384 292.906
 376.414 274.59 362.91 261.09 c 349.41 247.586 331.094 240 312 240 c 288
 240 l 288 72 l 288 65.637 285.473 59.531 280.969 55.031 c 276.469 50.527
 270.363 48 264 48 c h
240 240 m 144 240 l 144 96 l 240 96 l h
240 240 m f
144 360 m 144 351.426 139.426 343.504 132 339.215 c 124.574 334.93 115.426
 334.93 108 339.215 c 100.574 343.504 96 351.426 96 360 c 96 600 l 96 608.574
 100.574 616.496 108 620.785 c 115.426 625.07 124.574 625.07 132 620.785
 c 139.426 616.496 144 608.574 144 600 c h
528 288 m 547.094 288 565.41 295.586 578.91 309.09 c 592.414 322.59 600
 340.906 600 360 c 600 384 l 696 384 l 715.094 384 733.41 391.586 746.91
 405.09 c 760.414 418.59 768 436.906 768 456 c 768 696 l 768 715.094 760.414
 733.41 746.91 746.91 c 733.41 760.414 715.094 768 696 768 c 312 768 l 292.906
 768 274.59 760.414 261.09 746.91 c 247.586 733.41 240 715.094 240 696 c
 240 456 l 240 436.906 247.586 418.59 261.09 405.09 c 274.59 391.586 292.906
 384 312 384 c 408 384 l 408 360 l 408 340.906 415.586 322.59 429.09 309.09
 c 442.59 295.586 460.906 288 480 288 c h
456 360 m 456 384 l 552 384 l 552 360 l 552 353.637 549.473 347.531 544.969
 343.031 c 540.469 338.527 534.363 336 528 336 c 480 336 l 473.637 336 467.531
 338.527 463.031 343.031 c 458.527 347.531 456 353.637 456 360 c 288 456
 m 288 696 l 288 702.363 290.527 708.469 295.031 712.969 c 299.531 717.473
 305.637 720 312 720 c 336 720 l 336 432 l 312 432 l 305.637 432 299.531
 434.527 295.031 439.031 c 290.527 443.531 288 449.637 288 456 c 624 720
 m 624 432 l 384 432 l 384 720 l h
696 720 m 702.363 720 708.469 717.473 712.969 712.969 c 717.473 708.469
 720 702.363 720 696 c 720 456 l 720 449.637 717.473 443.531 712.969 439.031
 c 708.469 434.527 702.363 432 696 432 c 672 432 l 672 720 l h
696 720 m f
Q Q
showpage
%%Trailer
%%EOF
