%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 47 0 625 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 47 0 625 768
768 768 cairo_set_page_size
%%EndPageSetup
q 47 0 578 768 rectclip
1 0 0 -1 0 768 cm q
0 g
367.535 299.855 m 372.816 284.016 395.184 284.016 400.465 299.855 c 431.426
 392.832 l 445.242 434.27 477.77 466.781 519.215 480.574 c 612.145 511.535
 l 627.984 516.816 627.984 539.184 612.145 544.465 c 519.168 575.426 l 477.73
 589.242 445.219 621.77 431.426 663.215 c 400.465 756.145 l 398.938 760.797
 395.508 764.59 391.031 766.578 c 386.555 768.566 381.445 768.566 376.969
 766.578 c 372.492 764.59 369.062 760.797 367.535 756.145 c 336.574 663.168
 l 322.77 621.738 290.262 589.23 248.832 575.426 c 155.855 544.465 l 151.203
 542.938 147.41 539.508 145.422 535.031 c 143.434 530.555 143.434 525.445
 145.422 520.969 c 147.41 516.492 151.203 513.062 155.855 511.535 c 248.832
 480.574 l 290.262 466.77 322.77 434.262 336.574 392.832 c h
182.113 55.105 m 183.523 50.84 187.508 47.961 192 47.961 c 196.492 47.961
 200.477 50.84 201.887 55.105 c 220.461 110.883 l 228.766 135.746 248.254
 155.234 273.117 163.539 c 328.895 182.113 l 333.16 183.523 336.039 187.508
 336.039 192 c 336.039 196.492 333.16 200.477 328.895 201.887 c 273.117 
220.461 l 273.121 220.465 l 248.242 228.723 228.723 248.242 220.465 273.121
 c 201.891 328.898 l 201.887 328.895 l 200.477 333.16 196.492 336.039 192
 336.039 c 187.508 336.039 183.523 333.16 182.113 328.895 c 163.535 273.121
 l 155.277 248.242 135.758 228.723 110.879 220.465 c 55.102 201.891 l 55.105
 201.887 l 50.84 200.477 47.961 196.492 47.961 192 c 47.961 187.508 50.84
 183.523 55.105 182.113 c 110.883 163.539 l 110.879 163.535 l 135.758 155.277
 155.277 135.758 163.535 110.879 c h
521.426 4.754 m 522.395 1.949 525.035 0.07 528 0.07 c 530.965 0.07 533.605
 1.949 534.574 4.754 c 546.957 41.906 l 552.477 58.516 565.484 71.523 582.094
 77.043 c 619.246 89.426 l 622.051 90.395 623.93 93.035 623.93 96 c 623.93
 98.965 622.051 101.605 619.246 102.574 c 582.094 114.957 l 582.098 114.961
 l 565.52 120.508 552.508 133.52 546.961 150.098 c 534.578 187.25 l 534.574
 187.246 l 533.605 190.051 530.965 191.93 528 191.93 c 525.035 191.93 522.395
 190.051 521.426 187.246 c 509.043 150.094 l 509.039 150.098 l 503.492 133.52
 490.48 120.508 473.902 114.961 c 436.801 102.574 l 434 101.605 432.121 
98.965 432.121 96 c 432.121 93.035 434 90.395 436.801 89.426 c 473.953 77.043
 l 490.562 71.523 503.57 58.516 509.09 41.906 c h
521.426 4.754 m f
Q Q
showpage
%%Trailer
%%EOF
