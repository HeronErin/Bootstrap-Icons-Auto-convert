%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 528 768 l 528 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
76.801 568.801 m 0 568.801 l 0 760.754 l 37.969 760.754 l 37.969 696.34
 l 76.512 696.34 l 90.273 696.34 101.984 693.57 111.648 688.035 c 121.41
 682.434 128.816 674.852 133.871 665.281 c 139.141 655.27 141.801 644.094
 141.602 632.785 c 141.602 620.785 139.074 609.953 134.016 600.289 c 128.949
 590.734 121.301 582.801 111.938 577.391 c 102.336 571.629 90.625 568.766
 76.801 568.797 c 102.961 632.781 m 102.961 632.785 l 103.121 639.105 101.723
 645.371 98.879 651.023 c 96.332 655.949 92.348 659.984 87.457 662.594 c
 81.863 665.344 75.688 666.695 69.457 666.527 c 37.824 666.527 l 37.824 
599.039 l 69.504 599.039 l 79.969 599.039 88.16 601.934 94.078 607.727 c
 100 613.582 102.957 621.934 102.957 632.781 c 238.172 568.797 m 161.371
 568.797 l 161.371 760.75 l 199.34 760.75 l 199.34 696.336 l 237.883 696.336
 l 251.645 696.336 263.355 693.566 273.02 688.031 c 282.781 682.43 290.188
 674.848 295.242 665.277 c 300.426 655.613 303.004 644.781 302.969 632.781
 c 302.969 620.781 300.441 609.949 295.383 600.285 c 295.391 600.289 l 290.328
 590.734 282.676 582.801 273.312 577.391 c 263.711 571.629 252 568.766 238.176
 568.797 c 264.336 632.781 m 264.336 632.785 l 264.5 639.105 263.098 645.371
 260.258 651.023 c 257.707 655.949 253.723 659.984 248.832 662.594 c 243.242
 665.344 237.062 666.695 230.832 666.527 c 199.199 666.527 l 199.199 599.039
 l 230.879 599.039 l 241.344 599.039 249.535 601.934 255.453 607.727 c 261.375
 613.582 264.332 621.934 264.332 632.781 c 397.148 600.621 m 397.148 760.75
 l 359.039 760.754 l 359.039 600.578 l 304.609 600.574 l 304.609 568.797
 l 451.73 568.797 l 451.73 600.574 l h
397.148 600.621 m f*
Q Q
showpage
%%Trailer
%%EOF
