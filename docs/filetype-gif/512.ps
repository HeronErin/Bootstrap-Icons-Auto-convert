%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 336 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 336 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 336 384 rectclip
1 0 0 -1 0 384 cm q
0 g
336 108 m 336 336 l 336 348.73 330.941 360.938 321.941 369.941 c 312.938
 378.941 300.73 384 288 384 c 216 384 l 216 360 l 288 360 l 294.363 360 
300.469 357.473 304.969 352.969 c 309.473 348.469 312 342.363 312 336 c 
312 108 l 264 108 l 254.453 108 245.297 104.207 238.543 97.457 c 231.793
 90.703 228 81.547 228 72 c 228 24 l 96 24 l 89.637 24 83.531 26.527 79.031
 31.031 c 74.527 35.531 72 41.637 72 48 c 72 264 l 48 264 l 48 48 l 48 35.27
 53.059 23.062 62.059 14.059 c 71.062 5.059 83.27 0 96 0 c 228 0 l h
78.672 314.977 m 78.285 310.867 77.148 306.863 75.312 303.168 c 73.477 
299.441 70.914 296.121 67.777 293.398 c 64.379 290.504 60.473 288.266 56.258
 286.801 c 51.34 285.137 46.18 284.324 40.992 284.398 c 32.32 284.398 24.914
 286.23 18.77 289.895 c 12.723 293.477 7.859 298.75 4.777 305.062 c 1.426
 312.188 -0.211 319.996 0 327.863 c 0 340.008 l 0 346.535 0.84 352.496 2.52
 357.887 c 4.199 363.262 6.758 367.902 10.199 371.809 c 13.605 375.695 17.871
 378.711 22.992 380.855 c 28.16 382.969 34.184 384.023 41.062 384.023 c 
47.496 384.023 53.07 383.137 57.789 381.359 c 57.793 381.359 l 66.543 378.336
 73.48 371.559 76.703 362.879 c 78.254 358.703 79.031 354.293 79.031 349.656
 c 79.031 330.527 l 41.207 330.527 l 41.207 344.664 l 60.961 344.664 l 60.961
 350.785 l 60.961 353.969 60.242 356.875 58.801 359.496 c 57.273 362.195
 54.996 364.395 52.246 365.832 c 48.824 367.453 45.066 368.246 41.281 368.137
 c 36.863 368.316 32.5 367.09 28.824 364.633 c 25.473 362.109 22.93 358.664
 21.504 354.719 c 19.883 349.973 19.105 344.977 19.199 339.961 c 19.199 
327.984 l 19.199 319.23 21.07 312.434 24.816 307.586 c 28.609 302.785 33.93
 300.379 40.777 300.363 c 40.777 300.359 l 43.215 300.344 45.645 300.699
 47.977 301.414 c 50.152 302.117 52.039 303.125 53.641 304.438 c 53.641 
304.441 l 55.27 305.699 56.652 307.242 57.719 309 c 58.828 310.855 59.613
 312.883 60.047 315 c h
111.145 382.199 m 111.145 286.223 l 92.16 286.223 l 92.16 382.223 l 111.121
 382.223 l h
146.977 344.039 m 146.977 382.199 l 127.992 382.199 l 127.992 286.223 l
 189.121 286.223 l 189.121 301.895 l 146.977 301.895 l 146.977 328.703 l
 185.496 328.703 l 185.496 344.016 l h
146.977 344.039 m f*
Q Q
showpage
%%Trailer
%%EOF
