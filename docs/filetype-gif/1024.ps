%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 432 768 l 432 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
157.344 629.953 m 156.574 621.734 154.297 613.727 150.625 606.336 c 146.949
 598.887 141.828 592.242 135.551 586.801 c 128.758 581.008 120.945 576.535
 112.512 573.602 c 102.684 570.273 92.359 568.652 81.984 568.801 c 64.641
 568.801 49.824 572.465 37.535 579.793 c 25.449 586.957 15.719 597.5 9.551
 610.129 c 2.852 624.375 -0.422 639.992 0 655.727 c 0 680.016 l 0 693.07
 1.68 704.992 5.039 715.777 c 8.398 726.531 13.52 735.809 20.398 743.617
 c 27.215 751.395 35.742 757.426 45.984 761.715 c 56.32 765.938 68.367 768.051
 82.129 768.051 c 94.992 768.051 106.145 766.273 115.586 762.723 c 115.586
 762.719 l 133.082 756.676 146.961 743.113 153.406 725.762 c 156.512 717.41
 158.062 708.594 158.062 699.312 c 158.062 661.055 l 82.414 661.055 l 82.414
 689.328 l 121.918 689.328 l 121.918 701.566 l 121.918 707.934 120.477 713.742
 117.598 718.992 c 117.602 718.992 l 114.547 724.391 109.996 728.793 104.496
 731.664 c 97.648 734.91 90.133 736.488 82.559 736.273 c 73.723 736.633 
65 734.18 57.648 729.266 c 50.945 724.219 45.859 717.328 43.008 709.441 
c 39.77 699.941 38.211 689.953 38.398 679.922 c 38.398 655.969 l 38.398 
638.465 42.141 624.863 49.629 615.168 c 57.215 605.566 67.852 600.754 81.551
 600.719 c 86.43 600.688 91.289 601.398 95.953 602.832 c 100.305 604.238
 104.082 606.258 107.281 608.879 c 110.535 611.395 113.301 614.484 115.441
 618 c 117.656 621.711 119.23 625.766 120.098 630 c h
222.289 764.402 m 222.289 572.449 l 184.32 572.449 l 184.32 764.449 l 222.242
 764.449 l h
293.953 688.082 m 293.953 764.402 l 255.984 764.402 l 255.984 572.449 l
 378.238 572.449 l 378.238 603.793 l 293.953 603.793 l 293.953 657.41 l 
370.992 657.41 l 370.992 688.035 l h
293.953 688.082 m f*
Q Q
showpage
%%Trailer
%%EOF
