%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:00 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1344 l 1344 1377.703 1335.129 1410.812 1318.277 1440 c 
1301.426 1469.188 1277.188 1493.426 1248 1510.277 c 1218.812 1527.129 1185.703
 1536 1152 1536 c 864 1536 l 864 1440 l 1152 1440 l 1177.461 1440 1201.879
 1429.887 1219.883 1411.883 c 1237.887 1393.879 1248 1369.461 1248 1344 
c 1248 432 l 1056 432 l 1017.809 432 981.184 416.828 954.176 389.824 c 927.172
 362.816 912 326.191 912 288 c 912 96 l 384 96 l 358.539 96 334.121 106.113
 316.117 124.117 c 298.113 142.121 288 166.539 288 192 c 288 1056 l 192 
1056 l 192 192 l 192 141.078 212.227 92.242 248.234 56.234 c 284.242 20.227
 333.078 0 384 0 c 912 0 l h
314.688 1259.902 m 313.148 1243.469 308.59 1227.457 301.246 1212.672 c 
293.902 1197.77 283.652 1184.488 271.105 1173.602 c 257.512 1162.02 241.887
 1153.066 225.023 1147.199 c 205.367 1140.551 184.719 1137.305 163.969 1137.602
 c 129.281 1137.602 99.648 1144.93 75.074 1159.586 c 75.07 1159.586 l 50.895
 1173.914 31.441 1195.004 19.105 1220.258 c 5.703 1248.746 -0.84 1279.98
 0 1311.457 c 0 1360.031 l 0 1386.145 3.359 1409.984 10.078 1431.551 c 16.797
 1453.055 27.039 1471.613 40.797 1487.23 c 54.43 1502.781 71.484 1514.848
 91.965 1523.422 c 112.637 1531.871 136.734 1536.094 164.254 1536.094 c 
189.98 1536.094 212.285 1532.543 231.164 1525.438 c 231.168 1525.441 l 266.168
 1513.348 293.918 1486.23 306.816 1451.52 c 313.023 1434.816 316.129 1417.184
 316.129 1398.625 c 316.129 1322.113 l 164.832 1322.113 l 164.832 1378.656
 l 243.84 1378.656 l 243.84 1403.137 l 243.84 1415.871 240.961 1427.488 
235.199 1437.984 c 229.09 1448.781 219.988 1457.586 208.992 1463.328 c 195.301
 1469.82 180.266 1472.977 165.121 1472.543 c 147.445 1473.266 130 1468.359
 115.297 1458.527 c 101.895 1448.434 91.719 1434.66 86.016 1418.879 c 79.539
 1399.883 76.422 1379.906 76.801 1359.84 c 76.801 1311.938 l 76.801 1276.93
 84.289 1249.73 99.266 1230.336 c 114.434 1211.137 135.715 1201.504 163.105
 1201.441 c 172.863 1201.375 182.574 1202.801 191.902 1205.664 c 200.605
 1208.48 208.16 1212.512 214.559 1217.762 c 221.07 1222.789 226.602 1228.973
 230.879 1236 c 235.312 1243.418 238.461 1251.531 240.191 1260 c h
444.574 1528.797 m 444.574 1144.895 l 368.641 1144.895 l 368.641 1528.895
 l 444.48 1528.895 l h
587.902 1376.156 m 587.902 1528.797 l 511.965 1528.797 l 511.965 1144.895
 l 756.48 1144.895 l 756.48 1207.582 l 587.902 1207.586 l 587.902 1314.816
 l 741.98 1314.816 l 741.98 1376.062 l h
587.902 1376.156 m f*
Q Q
showpage
%%Trailer
%%EOF
