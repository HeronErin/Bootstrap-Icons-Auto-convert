%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:03 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 144 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 144 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 144 1536 1200 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 384 m 0 384 0 192 192 192 c 1344 192 l 1344 192 1536 192 1536 384 c 1536
 960 l 1536 960 1536 1152 1344 1152 c 960 1152 l 960 1216 968 1264 984 1296
 c 1056 1296 l 1073.148 1296 1088.996 1305.148 1097.57 1320 c 1106.145 1334.852
 1106.145 1353.148 1097.57 1368 c 1088.996 1382.852 1073.148 1392 1056 1392
 c 480 1392 l 462.852 1392 447.004 1382.852 438.43 1368 c 429.855 1353.148
 429.855 1334.852 438.43 1320 c 447.004 1305.148 462.852 1296 480 1296 c
 552 1296 l 568 1264 576 1216 576 1152 c 192 1152 l 192 1152 0 1152 0 960
 c h
134.207 301.922 m 123.668 309.27 115.258 319.27 109.824 330.91 c 101.738
 347.855 97.039 366.215 96 384.961 c 96 960 l 96 991.199 103.488 1008.191
 109.922 1017.793 c 116.641 1027.777 126.305 1035.906 138.914 1042.176 c
 138.91 1042.176 l 155.121 1049.934 172.637 1054.59 190.559 1055.902 c 192.961
 1056 l 1344 1056 l 1375.199 1056 1392.191 1048.512 1401.793 1042.078 c 
1412.332 1034.73 1420.742 1024.73 1426.176 1013.09 c 1433.934 996.879 1438.59
 979.363 1439.902 961.441 c 1440 959.039 l 1440 384 l 1440 352.801 1432.512
 335.809 1426.078 326.207 c 1418.73 315.668 1408.73 307.258 1397.09 301.824
 c 1380.145 293.738 1361.785 289.039 1343.039 288 c 192 288 l 160.801 288
 143.809 295.488 134.207 301.922 c f
Q Q
showpage
%%Trailer
%%EOF
