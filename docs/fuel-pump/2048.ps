%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:52 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
288 240 m 288 227.27 293.059 215.062 302.059 206.059 c 311.062 197.059 
323.27 192 336 192 c 816 192 l 828.73 192 840.938 197.059 849.941 206.059
 c 858.941 215.062 864 227.27 864 240 c 864 720 l 864 732.73 858.941 744.938
 849.941 753.941 c 840.938 762.941 828.73 768 816 768 c 336 768 l 323.27
 768 311.062 762.941 302.059 753.941 c 293.059 744.938 288 732.73 288 720
 c h
288 240 m f
96 192 m 96 141.078 116.227 92.242 152.234 56.234 c 188.242 20.227 237.078
 0 288 0 c 864 0 l 897.703 0 930.812 8.871 960 25.723 c 989.188 42.574 1013.426
 66.812 1030.277 96 c 1047.129 125.188 1056 158.297 1056 192 c 1056 960 
l 1089.703 960 1122.812 968.871 1152 985.723 c 1181.188 1002.574 1205.426
 1026.812 1222.277 1056 c 1239.129 1085.188 1248 1118.297 1248 1152 c 1248
 1200 l 1248 1217.148 1257.148 1232.996 1272 1241.57 c 1286.852 1250.145
 1305.148 1250.145 1320 1241.57 c 1334.852 1232.996 1344 1217.148 1344 1200
 c 1344 768 l 1296 768 l 1283.27 768 1271.062 762.941 1262.059 753.941 c
 1253.059 744.938 1248 732.73 1248 720 c 1248 420 l 1248 407.27 1253.059
 395.062 1262.059 386.059 c 1271.062 377.059 1283.27 372 1296 372 c 1439.52
 372 l 1438.465 326.305 1434.43 286.176 1420.223 254.688 c 1412.617 236.379
 1399.367 220.977 1382.398 210.719 c 1364.734 200.16 1337.855 192 1296 192
 c 1278.852 192 1263.004 182.852 1254.43 168 c 1245.855 153.148 1245.855
 134.852 1254.43 120 c 1263.004 105.148 1278.852 96 1296 96 c 1350.145 95.871
 1395.328 106.625 1431.551 128.258 c 1468.32 150.145 1492.414 181.152 1507.773
 215.328 c 1536.094 278.207 1535.996 355.969 1535.996 415.105 c 1535.996
 719.906 l 1536 719.902 l 1536.027 732.652 1530.98 744.883 1521.977 753.906
 c 1512.969 762.93 1500.746 768 1488 768 c 1440 768 l 1440 1200 l 1440 1251.445
 1412.555 1298.984 1368 1324.707 c 1323.445 1350.43 1268.555 1350.43 1224
 1324.707 c 1179.445 1298.984 1152 1251.445 1152 1200 c 1152 1152 l 1152
 1126.539 1141.887 1102.121 1123.883 1084.117 c 1105.879 1066.113 1081.461
 1056 1056 1056 c 1056 1440 l 1104 1440 l 1121.148 1440 1136.996 1449.148
 1145.57 1464 c 1154.145 1478.852 1154.145 1497.148 1145.57 1512 c 1136.996
 1526.852 1121.148 1536 1104 1536 c 48 1536 l 30.852 1536 15.004 1526.852
 6.43 1512 c -2.145 1497.148 -2.145 1478.852 6.43 1464 c 15.004 1449.148
 30.852 1440 48 1440 c 96 1440 l h
960 192 m 960 166.539 949.887 142.121 931.883 124.117 c 913.879 106.113
 889.461 96 864 96 c 288 96 l 262.539 96 238.121 106.113 220.117 124.117
 c 202.113 142.121 192 166.539 192 192 c 192 1440 l 960 1440 l h
960 192 m f
Q Q
showpage
%%Trailer
%%EOF
