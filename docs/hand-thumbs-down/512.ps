%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 48 6 348 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 48 6 348 384
384 384 cairo_set_page_size
%%EndPageSetup
q 48 6 300 378 rectclip
1 0 0 -1 0 384 cm q
0 g
212.734 376.176 m 189.789 381.938 168.504 364.559 166.941 342.098 c 165.215
 316.898 161.422 293.738 156.668 279.938 c 153.668 271.297 145.172 255.648
 131.707 240.625 c 118.34 225.648 100.938 212.328 80.562 206.785 c 64.441
 202.367 48 188.398 48 168 c 48 72 l 48 51.719 64.367 36.863 82.754 34.895
 c 108.434 32.184 120.289 24.934 132.387 17.543 c 133.539 16.848 l 140.066
 12.863 147.41 8.473 156.82 5.23 c 166.344 1.922 177.48 0 192 0 c 276 0 
l 298.488 0 314.375 11.473 322.414 25.535 c 326.352 32.422 328.512 40.102
 328.512 47.445 c 328.512 51.094 327.961 54.934 326.664 58.582 c 331.488
 64.871 335.785 72.43 338.375 80.184 c 341.016 88.105 342.504 98.473 338.473
 107.785 c 340.129 110.906 341.352 114.219 342.289 117.457 c 344.137 123.938
 345 131.066 345 138 c 345 144.938 344.137 152.062 342.289 158.543 c 341.449
 161.422 340.367 164.398 338.977 167.254 c 348.434 180.957 349.008 196.055
 344.594 208.848 c 339.648 223.055 328.227 235.246 315.793 239.375 c 295.465
 246.168 272.52 246 255.41 244.438 c 255.406 244.441 l 251.855 244.117 248.312
 243.719 244.777 243.238 c 253.109 278.902 252.602 316.062 243.289 351.48
 c 239.977 363.672 230.09 371.832 219 374.617 c h
276 24 m 192 24 l 179.762 24 171.289 25.633 164.641 27.91 c 157.898 30.238
 152.496 33.406 146.016 37.344 c 145.055 37.945 l 131.734 46.059 116.301
 55.465 85.293 58.777 c 77.301 59.617 71.996 65.738 71.996 71.977 c 72 168
 l 72 174.121 77.426 181.031 86.879 183.602 c 113.16 190.801 134.328 207.531
 149.613 224.617 c 164.852 241.656 175.148 260.016 179.324 272.066 c 185.156
 288.867 189.094 314.5 190.891 340.465 c 191.492 349.152 199.531 354.746
 206.898 352.898 c 213.188 351.34 l 217.027 350.379 219.379 347.883 220.098
 345.219 c 220.105 345.215 l 229.91 307.863 228.703 268.473 216.625 231.793
 c 215.242 227.641 216.23 223.066 219.203 219.855 c 222.176 216.645 226.656
 215.305 230.902 216.359 c 230.973 216.359 l 231.309 216.457 l 232.699 216.77
 l 232.703 216.77 l 240.91 218.504 249.215 219.766 257.566 220.535 c 273.477
 221.977 292.535 221.832 308.207 216.625 c 312.406 215.211 319.008 209.402
 321.887 201 c 324.453 193.609 323.977 184.922 315.504 176.496 c 307.031
 168 l 315.504 159.504 l 316.535 158.496 318.023 156.145 319.199 151.945
 c 320.352 147.938 321 143.066 321 138 c 321 132.938 320.352 128.062 319.199
 124.055 c 318 119.879 316.535 117.504 315.504 116.496 c 307.031 108 l 315.504
 99.504 l 316.633 98.375 318.121 95.281 315.625 87.793 c 313.035 80.555 
308.898 73.969 303.504 68.496 c 295.031 60 l 303.504 51.504 l 303.648 51.383
 304.488 50.305 304.488 47.426 c 304.344 43.918 303.348 40.5 301.586 37.465
 c 297.602 30.527 289.512 24 276 24 c f
Q Q
showpage
%%Trailer
%%EOF
