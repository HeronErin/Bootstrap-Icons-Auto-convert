%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
624 192 m 606.852 192 591.004 201.148 582.43 216 c 573.855 230.852 573.855
 249.148 582.43 264 c 591.004 278.852 606.852 288 624 288 c 912 288 l 929.148
 288 944.996 278.852 953.57 264 c 962.145 249.148 962.145 230.852 953.57
 216 c 944.996 201.148 929.148 192 912 192 c h
1056 768 m 1056 844.383 1025.656 917.637 971.648 971.648 c 917.637 1025.656
 844.383 1056 768 1056 c 691.617 1056 618.363 1025.656 564.352 971.648 c
 510.344 917.637 480 844.383 480 768 c 480 691.617 510.344 618.363 564.352
 564.352 c 618.363 510.344 691.617 480 768 480 c 844.383 480 917.637 510.344
 971.648 564.352 c 1025.656 618.363 1056 691.617 1056 768 c f
432 0 m 368.348 0 307.305 25.285 262.293 70.293 c 217.285 115.305 192 176.348
 192 240 c 192 1344 l 192 1377.703 200.871 1410.812 217.723 1440 c 234.574
 1469.188 258.812 1493.426 288 1510.277 c 317.188 1527.129 350.297 1536 
384 1536 c 1152 1536 l 1185.703 1536 1218.812 1527.129 1248 1510.277 c 1277.188
 1493.426 1301.426 1469.188 1318.277 1440 c 1335.129 1410.812 1344 1377.703
 1344 1344 c 1344 240 l 1344 197.871 1332.91 156.484 1311.848 120 c 1290.781
 83.516 1260.484 53.219 1224 32.152 c 1187.516 11.09 1146.129 0 1104 0 c
 h
288 240 m 288 201.809 303.172 165.184 330.176 138.176 c 357.184 111.172
 393.809 96 432 96 c 1104 96 l 1142.191 96 1178.816 111.172 1205.824 138.176
 c 1232.828 165.184 1248 201.809 1248 240 c 1248 1276.32 l 1224.969 1257.898
 1199.988 1242.059 1173.504 1229.09 c 1093.633 1189.152 966.047 1152 768
 1152 c 569.953 1152 442.367 1189.152 362.496 1229.09 c 336.012 1242.059
 311.031 1257.898 288 1276.32 c h
288 240 m f
Q Q
showpage
%%Trailer
%%EOF
