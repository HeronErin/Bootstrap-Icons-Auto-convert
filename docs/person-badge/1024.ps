%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:11 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
312 96 m 303.426 96 295.504 100.574 291.215 108 c 286.93 115.426 286.93
 124.574 291.215 132 c 295.504 139.426 303.426 144 312 144 c 456 144 l 464.574
 144 472.496 139.426 476.785 132 c 481.07 124.574 481.07 115.426 476.785
 108 c 472.496 100.574 464.574 96 456 96 c h
528 384 m 528 435.445 500.555 482.984 456 508.707 c 411.445 534.43 356.555
 534.43 312 508.707 c 267.445 482.984 240 435.445 240 384 c 240 332.555 
267.445 285.016 312 259.293 c 356.555 233.57 411.445 233.57 456 259.293 
c 500.555 285.016 528 332.555 528 384 c f
216 0 m 184.176 0 153.652 12.645 131.148 35.148 c 108.645 57.652 96 88.176
 96 120 c 96 672 l 96 697.461 106.113 721.879 124.117 739.883 c 142.121 
757.887 166.539 768 192 768 c 576 768 l 601.461 768 625.879 757.887 643.883
 739.883 c 661.887 721.879 672 697.461 672 672 c 672 120 l 672 88.176 659.355
 57.652 636.852 35.148 c 614.348 12.645 583.824 0 552 0 c h
144 120 m 144 100.906 151.586 82.59 165.09 69.09 c 178.59 55.586 196.906
 48 216 48 c 552 48 l 571.094 48 589.41 55.586 602.91 69.09 c 616.414 82.59
 624 100.906 624 120 c 624 638.16 l 612.484 628.949 599.996 621.031 586.754
 614.543 c 546.816 594.574 483.023 576 384 576 c 284.977 576 221.184 594.574
 181.246 614.543 c 168.004 621.031 155.516 628.949 144 638.16 c h
144 120 m f
Q Q
showpage
%%Trailer
%%EOF
