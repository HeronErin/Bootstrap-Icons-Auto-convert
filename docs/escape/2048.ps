%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:08 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 96 1440 1439
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 96 1440 1439
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 96 1344 1343 rectclip
1 0 0 -1 0 1536 cm q
0 g
819.648 97.922 m 802.535 96.617 786.023 104.543 776.34 118.711 c 766.652
 132.883 765.262 151.145 772.691 166.617 c 780.117 182.09 795.238 192.426
 812.352 193.727 c 959.551 205.117 1096.758 272.594 1195.641 382.227 c 1294.527
 491.855 1347.539 635.273 1343.73 782.863 c 1339.926 930.453 1279.59 1070.949
 1175.184 1175.336 c 1070.781 1279.727 930.277 1340.039 782.688 1343.824
 c 635.094 1347.605 491.688 1294.574 382.07 1195.672 c 272.453 1096.77 204.996
 959.555 193.633 812.352 c 192.094 795.441 181.734 780.602 166.391 773.328
 c 151.043 766.055 133 767.43 118.934 776.945 c 104.867 786.461 96.879 802.699
 97.922 819.648 c 111.176 991.391 189.879 1151.484 317.773 1266.871 c 445.668
 1382.258 612.984 1444.129 785.184 1439.703 c 957.379 1435.281 1121.301 
1364.902 1243.102 1243.102 c 1364.902 1121.301 1435.281 957.379 1439.703
 785.184 c 1444.129 612.984 1382.258 445.668 1266.871 317.773 c 1151.484
 189.879 991.391 111.176 819.648 97.922 c f
681.215 751.488 m 693.406 763.262 710.906 767.734 727.254 763.254 c 743.602
 758.773 756.371 746 760.855 729.652 c 765.336 713.309 760.863 695.809 749.09
 683.617 c 259.871 194.398 l 525.602 194.398 l 542.75 194.398 558.594 185.25
 567.168 170.398 c 575.742 155.547 575.742 137.25 567.168 122.398 c 558.594
 107.547 542.75 98.398 525.602 98.398 c 144 98.398 l 131.27 98.398 119.062
 103.457 110.059 112.457 c 101.059 121.461 96 133.668 96 146.398 c 96 528
 l 96 545.148 105.148 560.996 120 569.57 c 134.852 578.145 153.148 578.145
 168 569.57 c 182.852 560.996 192 545.148 192 528 c 192 262.273 l h
681.215 751.488 m f
Q Q
showpage
%%Trailer
%%EOF
