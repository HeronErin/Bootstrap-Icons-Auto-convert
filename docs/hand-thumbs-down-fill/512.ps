%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 48 0 348 378
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 48 0 348 378
384 384 cairo_set_page_size
%%EndPageSetup
q 48 0 300 378 rectclip
1 0 0 -1 0 384 cm q
0 g
166.945 348.816 m 168.504 371.281 189.793 388.633 212.738 382.895 c 219.004
 381.336 l 219 381.336 l 224.746 379.988 230.023 377.133 234.293 373.059
 c 238.566 368.988 241.668 363.852 243.289 358.176 c 248.57 338.59 256.082
 297.887 244.777 249.938 c 248.059 250.418 251.602 250.824 255.41 251.16
 c 272.523 252.719 295.465 252.863 315.793 246.098 c 328.227 241.945 339.648
 229.777 344.594 215.57 c 344.594 215.566 l 349.598 201.609 347.504 186.086
 338.977 173.953 c 340.367 171.121 341.449 168.145 342.289 165.266 c 344.137
 158.785 345 151.633 345 144.723 c 345 137.762 344.137 130.66 342.289 124.156
 c 342.289 124.152 l 341.363 120.797 340.074 117.555 338.449 114.48 c 342.504
 105.191 341.016 94.801 338.379 86.906 c 338.375 86.902 l 335.656 79.121
 331.703 71.828 326.664 65.305 c 327.961 61.633 328.488 57.793 328.488 54.145
 c 328.387 46.445 326.293 38.906 322.414 32.258 c 314.398 18.168 298.488
 6.719 276 6.719 c 192 6.719 l 177.48 6.719 166.32 8.641 156.816 11.926 
c 156.816 11.93 l 148.641 14.918 140.832 18.82 133.535 23.566 c 132.383 
24.262 l 120.285 31.652 108.406 38.902 82.75 41.613 c 64.367 43.559 48 58.414
 48 78.695 c 48 174.695 l 48 195.121 64.441 209.086 80.566 213.48 c 100.941
 219.047 118.344 232.367 131.734 247.32 c 145.176 262.344 153.672 278.039
 156.672 286.633 c 161.449 300.434 165.215 323.594 166.945 348.816 c f
Q Q
showpage
%%Trailer
%%EOF
