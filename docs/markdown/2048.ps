%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 288 m 1369.461 288 1393.879 298.113 1411.883 316.117 c 1429.887 334.121
 1440 358.539 1440 384 c 1440 1152 l 1440 1177.461 1429.887 1201.879 1411.883
 1219.883 c 1393.879 1237.887 1369.461 1248 1344 1248 c 192 1248 l 166.539
 1248 142.121 1237.887 124.117 1219.883 c 106.113 1201.879 96 1177.461 96
 1152 c 96 384 l 96 358.539 106.113 334.121 124.117 316.117 c 142.121 298.113
 166.539 288 192 288 c h
192 192 m 141.078 192 92.242 212.227 56.234 248.234 c 20.227 284.242 0 
333.078 0 384 c 0 1152 l 0 1185.703 8.871 1218.812 25.723 1248 c 42.574 
1277.188 66.812 1301.426 96 1318.277 c 125.188 1335.129 158.297 1344 192
 1344 c 1344 1344 l 1377.703 1344 1410.812 1335.129 1440 1318.277 c 1469.188
 1301.426 1493.426 1277.188 1510.277 1248 c 1527.129 1218.812 1536 1185.703
 1536 1152 c 1536 384 l 1536 350.297 1527.129 317.188 1510.277 288 c 1493.426
 258.812 1469.188 234.574 1440 217.723 c 1410.812 200.871 1377.703 192 1344
 192 c h
192 192 m f
878.016 782.016 m 887.02 772.988 899.25 767.914 912 767.914 c 924.75 767.914
 936.98 772.988 945.984 782.016 c 1104 940.129 l 1262.016 782.016 l 1274.156
 769.875 1291.855 765.133 1308.438 769.578 c 1325.023 774.02 1337.98 786.977
 1342.422 803.562 c 1346.867 820.145 1342.125 837.844 1329.984 849.984 c
 1137.984 1041.984 l 1128.98 1051.012 1116.75 1056.086 1104 1056.086 c 1091.25
 1056.086 1079.02 1051.012 1070.016 1041.984 c 878.016 849.984 l 868.988
 840.98 863.914 828.75 863.914 816 c 863.914 803.25 868.988 791.02 878.016
 782.016 c f*
1104 480 m 1116.73 480 1128.938 485.059 1137.941 494.059 c 1146.941 503.062
 1152 515.27 1152 528 c 1152 912 l 1152 929.148 1142.852 944.996 1128 953.57
 c 1113.148 962.145 1094.852 962.145 1080 953.57 c 1065.148 944.996 1056
 929.148 1056 912 c 1056 528 l 1056 515.27 1061.059 503.062 1070.059 494.059
 c 1079.062 485.059 1091.27 480 1104 480 c f*
341.762 1056 m 341.762 672.961 l 347.137 672.961 l 484.227 983.906 l 558.531
 983.906 l 694.852 672.867 l 700.227 672.867 l 700.223 1056 l 803.23 1056
 l 803.23 480.098 l 688.031 480.098 l 523.871 853.922 l 520.129 853.922 
l 355.969 480.098 l 240 480.098 l 240 1056 l h
341.762 1056 m f
Q Q
showpage
%%Trailer
%%EOF
