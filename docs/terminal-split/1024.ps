%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
103.008 151.008 m 107.512 146.492 113.625 143.957 120 143.957 c 126.375
 143.957 132.488 146.492 136.992 151.008 c 176.496 190.559 l 183.238 197.309
 187.023 206.461 187.023 216 c 187.023 225.539 183.238 234.691 176.496 241.441
 c 136.992 280.992 l 130.922 287.062 122.074 289.434 113.781 287.211 c 105.488
 284.988 99.012 278.512 96.789 270.219 c 94.566 261.926 96.938 253.078 103.008
 247.008 c 134.062 216 l 103.008 184.992 l 98.492 180.488 95.957 174.375
 95.957 168 c 95.957 161.625 98.492 155.512 103.008 151.008 c 192 288 m 
192 281.637 194.527 275.531 199.031 271.031 c 203.531 266.527 209.637 264
 216 264 c 264 264 l 272.574 264 280.496 268.574 284.785 276 c 289.07 283.426
 289.07 292.574 284.785 300 c 280.496 307.426 272.574 312 264 312 c 216 
312 l 209.637 312 203.531 309.473 199.031 304.969 c 194.527 300.469 192 
294.363 192 288 c 496.992 151.008 m 490.922 144.938 482.074 142.566 473.781
 144.789 c 465.488 147.012 459.012 153.488 456.789 161.781 c 454.566 170.074
 456.938 178.922 463.008 184.992 c 494.062 216 l 463.008 247.008 l 456.938
 253.078 454.566 261.926 456.789 270.219 c 459.012 278.512 465.488 284.988
 473.781 287.211 c 482.074 289.434 490.922 287.062 496.992 280.992 c 536.496
 241.441 l 543.238 234.691 547.023 225.539 547.023 216 c 547.023 206.461
 543.238 197.309 536.496 190.559 c h
576 264 m 567.426 264 559.504 268.574 555.215 276 c 550.93 283.426 550.93
 292.574 555.215 300 c 559.504 307.426 567.426 312 576 312 c 624 312 l 632.574
 312 640.496 307.426 644.785 300 c 649.07 292.574 649.07 283.426 644.785
 276 c 640.496 268.574 632.574 264 624 264 c h
576 264 m f
0 144 m 0 118.539 10.113 94.121 28.117 76.117 c 46.121 58.113 70.539 48
 96 48 c 672 48 l 697.461 48 721.879 58.113 739.883 76.117 c 757.887 94.121
 768 118.539 768 144 c 768 624 l 768 649.461 757.887 673.879 739.883 691.883
 c 721.879 709.887 697.461 720 672 720 c 96 720 l 70.539 720 46.121 709.887
 28.117 691.883 c 10.113 673.879 0 649.461 0 624 c h
96 96 m 83.27 96 71.062 101.059 62.059 110.059 c 53.059 119.062 48 131.27
 48 144 c 48 624 l 48 636.73 53.059 648.938 62.059 657.941 c 71.062 666.941
 83.27 672 96 672 c 360 672 l 360 96 l h
408 96 m 408 672 l 672 672 l 684.73 672 696.938 666.941 705.941 657.941
 c 714.941 648.938 720 636.73 720 624 c 720 144 l 720 131.27 714.941 119.062
 705.941 110.059 c 696.938 101.059 684.73 96 672 96 c h
408 96 m f
Q Q
showpage
%%Trailer
%%EOF
