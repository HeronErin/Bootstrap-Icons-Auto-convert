%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:24 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
206.016 302.016 m 215.02 292.988 227.25 287.914 240 287.914 c 252.75 287.914
 264.98 292.988 273.984 302.016 c 352.992 381.121 l 366.477 394.621 374.047
 412.922 374.047 432 c 374.047 451.078 366.477 469.379 352.992 482.879 c
 273.984 561.984 l 261.844 574.125 244.145 578.867 227.562 574.422 c 210.977
 569.98 198.02 557.023 193.578 540.438 c 189.133 523.855 193.875 506.156
 206.016 494.016 c 268.129 432 l 206.016 369.984 l 196.988 360.98 191.914
 348.75 191.914 336 c 191.914 323.25 196.988 311.02 206.016 302.016 c 384
 576 m 384 563.27 389.059 551.062 398.059 542.059 c 407.062 533.059 419.27
 528 432 528 c 528 528 l 545.148 528 560.996 537.148 569.57 552 c 578.145
 566.852 578.145 585.148 569.57 600 c 560.996 614.852 545.148 624 528 624
 c 432 624 l 419.27 624 407.062 618.941 398.059 609.941 c 389.059 600.938
 384 588.73 384 576 c 993.984 302.016 m 981.844 289.875 964.145 285.133 
947.562 289.578 c 930.977 294.02 918.02 306.977 913.578 323.562 c 909.133
 340.145 913.875 357.844 926.016 369.984 c 988.129 432 l 926.016 494.016
 l 913.875 506.156 909.133 523.855 913.578 540.438 c 918.02 557.023 930.977
 569.98 947.562 574.422 c 964.145 578.867 981.844 574.125 993.984 561.984
 c 1072.992 482.879 l 1086.477 469.379 1094.047 451.078 1094.047 432 c 1094.047
 412.922 1086.477 394.621 1072.992 381.121 c h
1152 528 m 1134.852 528 1119.004 537.148 1110.43 552 c 1101.855 566.852
 1101.855 585.148 1110.43 600 c 1119.004 614.852 1134.852 624 1152 624 c
 1248 624 l 1265.148 624 1280.996 614.852 1289.57 600 c 1298.145 585.148
 1298.145 566.852 1289.57 552 c 1280.996 537.148 1265.148 528 1248 528 c
 h
1152 528 m f
0 288 m 0 237.078 20.227 188.242 56.234 152.234 c 92.242 116.227 141.078
 96 192 96 c 1344 96 l 1377.703 96 1410.812 104.871 1440 121.723 c 1469.188
 138.574 1493.426 162.812 1510.277 192 c 1527.129 221.188 1536 254.297 1536
 288 c 1536 1248 l 1536 1281.703 1527.129 1314.812 1510.277 1344 c 1493.426
 1373.188 1469.188 1397.426 1440 1414.277 c 1410.812 1431.129 1377.703 1440
 1344 1440 c 192 1440 l 141.078 1440 92.242 1419.773 56.234 1383.766 c 20.227
 1347.758 0 1298.922 0 1248 c h
192 192 m 166.539 192 142.121 202.113 124.117 220.117 c 106.113 238.121
 96 262.539 96 288 c 96 1248 l 96 1273.461 106.113 1297.879 124.117 1315.883
 c 142.121 1333.887 166.539 1344 192 1344 c 720 1344 l 720 192 l h
816 192 m 816 1344 l 1344 1344 l 1369.461 1344 1393.879 1333.887 1411.883
 1315.883 c 1429.887 1297.879 1440 1273.461 1440 1248 c 1440 288 l 1440 
262.539 1429.887 238.121 1411.883 220.117 c 1393.879 202.113 1369.461 192
 1344 192 c h
816 192 m f
Q Q
showpage
%%Trailer
%%EOF
