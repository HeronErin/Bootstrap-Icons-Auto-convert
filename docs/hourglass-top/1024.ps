%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 48 672 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 48 672 720
768 768 cairo_set_page_size
%%EndPageSetup
q 96 48 576 672 rectclip
1 0 0 -1 0 768 cm q
0 g
96 696 m 96 702.363 98.527 708.469 103.031 712.969 c 107.531 717.473 113.637
 720 120 720 c 648 720 l 656.574 720 664.496 715.426 668.785 708 c 673.07
 700.574 673.07 691.426 668.785 684 c 664.496 676.574 656.574 672 648 672
 c 600 672 l 600 624 l 600.012 583.246 588.492 543.32 566.773 508.836 c 
545.055 474.352 514.023 446.715 477.266 429.121 c 463.344 422.449 456 411.023
 456 400.801 c 456 367.199 l 456 356.977 463.391 345.551 477.266 338.879
 c 514.023 321.285 545.055 293.648 566.773 259.164 c 588.492 224.68 600.012
 184.754 600 144 c 600 96 l 648 96 l 656.574 96 664.496 91.426 668.785 84
 c 673.07 76.574 673.07 67.426 668.785 60 c 664.496 52.574 656.574 48 648
 48 c 120 48 l 111.426 48 103.504 52.574 99.215 60 c 94.93 67.426 94.93 
76.574 99.215 84 c 103.504 91.426 111.426 96 120 96 c 168 96 l 168 144 l
 167.988 184.754 179.508 224.68 201.227 259.164 c 222.945 293.648 253.977
 321.285 290.734 338.879 c 304.656 345.551 312 356.977 312 367.199 c 312
 400.801 l 312 411.023 304.609 422.449 290.734 429.121 c 253.977 446.715
 222.945 474.352 201.227 508.836 c 179.508 543.32 167.988 583.246 168 624
 c 168 672 l 120 672 l 113.637 672 107.531 674.527 103.031 679.031 c 98.527
 683.531 96 689.637 96 696 c 216 672 m 216 624 l 215.992 592.301 224.953
 561.242 241.844 534.422 c 258.738 507.598 282.879 486.102 311.473 472.414
 c 337.059 460.125 360 434.492 360 400.848 c 360 367.152 l 360 367.152 368.641
 372 384 372 c 399.359 372 408 367.199 408 367.199 c 408 400.801 l 408 434.449
 430.945 460.129 456.527 472.418 c 456.527 472.414 l 485.121 486.102 509.262
 507.598 526.156 534.422 c 543.047 561.242 552.008 592.301 552 624 c 552
 672 l h
216 672 m f
Q Q
showpage
%%Trailer
%%EOF
