%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 336
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 288 rectclip
1 0 0 -1 0 384 cm q
0 g
224.496 101.832 m 225.098 99.828 224.258 97.668 222.457 96.602 c 220.652
 95.547 218.359 95.887 216.938 97.414 c 145.223 173.902 l 144.008 175.215
 143.676 177.117 144.383 178.762 c 145.09 180.402 146.699 181.473 148.488
 181.488 c 178.273 181.488 l 162.121 234.168 l 161.52 236.172 162.359 238.332
 164.16 239.398 c 165.961 240.43 168.238 240.117 169.68 238.582 c 238.801
 162.094 l 238.801 162.098 l 240.02 160.785 240.348 158.875 239.637 157.23
 c 238.922 155.586 237.305 154.52 235.512 154.512 c 205.727 154.512 l h
224.496 101.832 m f
115.656 48 m 103.91 47.996 92.418 51.438 82.613 57.898 c 72.805 64.363 
65.109 73.562 60.48 84.359 c 41.473 128.711 l 39.684 132.93 36.449 136.367
 32.352 138.406 c 20.352 144.406 11.832 155.566 9.191 168.695 c 1.199 208.992
 l 0.422 212.863 0.027 216.805 0.023 220.754 c 0.023 230.664 l 0.023 250.199
 9.383 267.695 24.023 278.594 c 24.023 324 l 24.023 327.184 25.289 330.234
 27.539 332.484 c 29.789 334.734 32.84 336 36.023 336 c 84.023 336 l 87.207
 336 90.258 334.734 92.508 332.484 c 94.758 330.234 96.023 327.184 96.023
 324 c 96.023 291.887 l 127.031 293.039 161.902 294 192.023 294 c 222.145
 294 257.016 293.039 288.023 291.887 c 288.023 324 l 288.023 327.184 289.289
 330.234 291.539 332.484 c 293.789 334.734 296.84 336 300.023 336 c 348.023
 336 l 351.207 336 354.258 334.734 356.508 332.484 c 358.758 330.234 360.023
 327.184 360.023 324 c 360.023 278.594 l 374.664 267.699 384.023 250.203
 384.023 230.664 c 384.023 220.754 l 384.023 216.785 383.633 212.867 382.848
 208.992 c 374.809 168.672 l 372.199 155.543 363.656 144.367 351.672 138.406
 c 347.562 136.371 344.32 132.934 342.527 128.711 c 323.52 84.359 l 318.891
 73.562 311.195 64.363 301.387 57.898 c 291.582 51.438 280.09 47.996 268.344
 48 c h
82.559 93.84 m 85.336 87.355 89.953 81.828 95.84 77.945 c 101.727 74.062
 108.629 71.996 115.68 72 c 268.367 72 l 275.418 72 282.312 74.07 288.195
 77.953 c 294.078 81.836 298.691 87.359 301.465 93.84 c 320.473 138.168 
l 324.504 147.602 331.762 155.293 340.945 159.863 c 346.273 162.551 350.09
 167.543 351.266 173.398 c 359.328 213.695 l 359.809 216.031 360.039 218.383
 360.023 220.75 c 360.023 230.664 l 360.059 239.809 356.566 248.617 350.273
 255.25 c 343.977 261.883 335.367 265.836 326.23 266.281 c 288.91 267.961
 235.367 270 192.023 270 c 148.68 270 95.137 267.984 57.816 266.281 c 48.676
 265.84 40.059 261.895 33.762 255.258 c 27.461 248.621 23.965 239.812 24
 230.664 c 24 220.754 l 24 218.387 24.238 216.035 24.719 213.699 c 32.758
 173.379 l 32.762 173.375 l 33.91 167.512 37.723 162.516 43.078 159.863 
c 52.27 155.305 59.52 147.598 63.551 138.168 c h
82.559 93.84 m f
Q Q
showpage
%%Trailer
%%EOF
