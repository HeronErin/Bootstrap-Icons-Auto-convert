%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
192 0 m 166.539 0 142.121 10.113 124.117 28.117 c 106.113 46.121 96 70.539
 96 96 c 96 150.383 l 50.832 174.48 l 35.477 182.668 22.633 194.875 13.68
 209.797 c 4.727 224.723 0 241.797 0 259.199 c 0 672 l 0 697.461 10.113 
721.879 28.117 739.883 c 46.121 757.887 70.539 768 96 768 c 672 768 l 697.461
 768 721.879 757.887 739.883 739.883 c 757.887 721.879 768 697.461 768 672
 c 768 259.199 l 768 241.797 763.273 224.723 754.32 209.797 c 745.367 194.875
 732.523 182.668 717.168 174.48 c 672 150.383 l 672 96 l 672 70.539 661.887
 46.121 643.883 28.117 c 625.879 10.113 601.461 0 576 0 c h
672 204.816 m 694.559 216.816 l 702.246 220.91 708.676 227.016 713.156 
234.48 c 717.637 241.949 720.004 250.492 720 259.199 c 720 298.414 l 672
 327.215 l h
624 356.016 m 444 464.016 l 384 428.016 l 324 464.016 l 144 356.016 l 144
 96 l 144 83.27 149.059 71.062 158.059 62.059 c 167.062 53.059 179.27 48
 192 48 c 576 48 l 588.73 48 600.938 53.059 609.941 62.059 c 618.941 71.062
 624 83.27 624 96 c h
96 327.215 m 48 298.414 l 48 259.199 l 48.004 250.5 50.375 241.965 54.855
 234.508 c 59.336 227.051 65.762 220.953 73.441 216.863 c 96 204.816 l h
720 354.383 m 720 629.613 l 490.656 491.996 l h
718.32 684.621 m 718.32 684.625 l 715.551 694.785 709.516 703.754 701.145
 710.148 c 692.773 716.539 682.531 720.004 672 720 c 96 720 l 85.461 720
 75.215 716.531 66.844 710.129 c 58.473 703.727 52.441 694.746 49.68 684.574
 c 384 483.984 l h
48 629.566 m 48 354.383 l 277.344 492 l 48 629.617 l h
48 629.566 m f
Q Q
showpage
%%Trailer
%%EOF
