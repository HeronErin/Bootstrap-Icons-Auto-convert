%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:31 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 144 672 624
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 144 672 624
768 768 cairo_set_page_size
%%EndPageSetup
q 96 144 576 480 rectclip
1 0 0 -1 0 768 cm q
0 g
120 144 m 111.426 144 103.504 148.574 99.215 156 c 94.93 163.426 94.93 
172.574 99.215 180 c 103.504 187.426 111.426 192 120 192 c 648 192 l 656.574
 192 664.496 187.426 668.785 180 c 673.07 172.574 673.07 163.426 668.785
 156 c 664.496 148.574 656.574 144 648 144 c h
120 288 m 111.426 288 103.504 292.574 99.215 300 c 94.93 307.426 94.93 
316.574 99.215 324 c 103.504 331.426 111.426 336 120 336 c 408 336 l 416.574
 336 424.496 331.426 428.785 324 c 433.07 316.574 433.07 307.426 428.785
 300 c 424.496 292.574 416.574 288 408 288 c h
120 432 m 111.426 432 103.504 436.574 99.215 444 c 94.93 451.426 94.93 
460.574 99.215 468 c 103.504 475.426 111.426 480 120 480 c 408 480 l 416.574
 480 424.496 475.426 428.785 468 c 433.07 460.574 433.07 451.426 428.785
 444 c 424.496 436.574 416.574 432 408 432 c h
120 576 m 111.426 576 103.504 580.574 99.215 588 c 94.93 595.426 94.93 
604.574 99.215 612 c 103.504 619.426 111.426 624 120 624 c 648 624 l 656.574
 624 664.496 619.426 668.785 612 c 673.07 604.574 673.07 595.426 668.785
 588 c 664.496 580.574 656.574 576 648 576 c h
605.426 318.098 m 598.473 313.43 591.348 309.027 584.062 304.895 c 594.141
 288 l 599.996 291.551 607.23 296.145 615.836 301.777 c 624.477 307.41 632.637
 314.258 640.316 322.32 c 647.805 330.191 654.172 339.184 659.422 349.297
 c 664.668 359.219 667.293 370.289 667.293 382.512 c 667.293 399.793 663.836
 413.758 656.926 424.414 c 649.98 434.91 638.445 440.156 622.316 440.156
 c 612.012 440.156 603.949 436.781 598.125 430.027 c 598.129 430.031 l 592.488
 423.988 589.273 416.074 589.105 407.809 c 589.105 396.77 592.48 388.434
 599.234 382.801 c 605.793 376.977 614.898 374.066 626.547 374.066 c 640.035
 374.066 l 640.031 374.062 l 639.285 365.844 637.293 357.785 634.129 350.16
 c 631.074 343.629 626.992 337.633 622.031 332.398 c 617.059 327.012 611.488
 322.215 605.426 318.098 c 501.363 318.098 m 501.359 318.098 l 494.406 313.43
 487.281 309.027 480 304.895 c 490.078 288 l 495.934 291.551 503.168 296.145
 511.773 301.777 c 520.414 307.41 528.574 314.258 536.254 322.32 c 543.742
 330.191 550.109 339.184 555.359 349.297 c 560.605 359.219 563.23 370.289
 563.23 382.512 c 563.23 399.793 559.773 413.758 552.863 424.414 c 545.918
 434.91 534.383 440.156 518.254 440.156 c 507.949 440.156 499.887 436.781
 494.062 430.027 c 494.062 430.031 l 488.426 423.988 485.211 416.074 485.039
 407.809 c 485.039 396.77 488.414 388.434 495.168 382.801 c 501.762 376.977
 510.863 374.066 522.48 374.066 c 535.969 374.066 l 535.969 374.062 l 535.215
 365.969 533.324 358.016 530.352 350.449 c 527.234 343.812 523.051 337.73
 517.969 332.449 c 513 327.027 507.43 322.195 501.359 318.047 c h
501.363 318.098 m f
Q Q
showpage
%%Trailer
%%EOF
