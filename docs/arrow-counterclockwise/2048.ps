%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 191 192 1344 1509
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 191 192 1344 1509
1536 1536 cairo_set_page_size
%%EndPageSetup
q 191 192 1153 1317 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 288 m 871.742 288.039 972.68 321.688 1055.691 383.906 c 1138.707 446.125
 1199.328 533.566 1228.477 633.129 c 1257.625 732.691 1253.734 839.016 1217.387
 936.184 c 1181.039 1033.348 1114.188 1116.121 1026.848 1172.105 c 939.508
 1228.09 836.383 1254.273 732.914 1246.73 c 629.449 1239.188 531.211 1198.324
 452.914 1130.266 c 374.617 1062.207 320.477 970.613 298.605 869.203 c 276.73
 767.793 288.305 662.027 331.586 567.742 c 337.926 552.312 335.801 534.691
 325.965 521.211 c 316.133 507.73 300.004 500.324 283.371 501.648 c 266.738
 502.977 251.988 512.844 244.414 527.711 c 192.48 640.855 178.602 767.781
 204.855 889.477 c 231.113 1011.172 296.09 1121.082 390.055 1202.75 c 484.02
 1284.418 601.918 1333.441 726.082 1342.48 c 850.25 1351.52 974 1320.086
 1078.805 1252.887 c 1183.605 1185.691 1263.816 1086.348 1307.418 969.738
 c 1351.02 853.129 1355.672 725.531 1320.668 606.059 c 1285.668 486.586 
1212.898 381.668 1113.266 307.023 c 1013.633 232.379 892.496 192.02 768 
192 c h
768 288 m f*
768 428.734 m 768 51.266 l 767.996 45.152 765.664 39.27 761.473 34.82 c
 757.281 30.371 751.551 27.688 745.449 27.316 c 739.348 26.949 733.336 28.922
 728.641 32.832 c 502.078 221.566 l 496.613 226.129 493.449 232.879 493.449
 240 c 493.449 247.121 496.613 253.871 502.078 258.434 c 728.637 447.168
 l 728.641 447.168 l 733.336 451.078 739.348 453.051 745.449 452.684 c 751.551
 452.312 757.281 449.629 761.473 445.18 c 765.664 440.73 767.996 434.848
 768 428.734 c f
Q Q
showpage
%%Trailer
%%EOF
