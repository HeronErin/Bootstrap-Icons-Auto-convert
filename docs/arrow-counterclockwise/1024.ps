%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 95 96 672 755
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 95 96 672 755
768 768 cairo_set_page_size
%%EndPageSetup
q 95 96 577 659 rectclip
1 0 0 -1 0 768 cm q
0 g
384 144 m 435.871 144.02 486.34 160.844 527.848 191.953 c 569.352 223.062
 599.664 266.781 614.238 316.562 c 628.812 366.344 626.867 419.508 608.695
 468.09 c 590.52 516.672 557.094 558.062 513.426 586.055 c 469.754 614.047
 418.191 627.137 366.457 623.363 c 314.723 619.594 265.605 599.164 226.457
 565.133 c 187.309 531.102 160.238 485.305 149.301 434.602 c 138.367 383.898
 144.152 331.012 165.793 283.871 c 168.965 276.156 167.898 267.348 162.984
 260.605 c 158.066 253.867 150.004 250.16 141.688 250.824 c 133.371 251.488
 125.996 256.422 122.207 263.855 c 96.242 320.43 89.301 383.891 102.43 444.738
 c 115.555 505.586 148.043 560.543 195.027 601.375 c 242.012 642.207 300.957
 666.719 363.043 671.238 c 425.125 675.758 487 660.043 539.402 626.445 c
 591.801 592.844 631.906 543.172 653.711 484.871 c 675.512 426.566 677.836
 362.766 660.336 303.031 c 642.832 243.293 606.449 190.836 556.633 153.512
 c 506.816 116.188 446.246 96.012 384 96 c h
384 144 m f*
384 214.367 m 384 25.633 l 384 20.977 381.305 16.742 377.09 14.77 c 372.875
 12.797 367.898 13.438 364.32 16.414 c 251.039 110.785 l 248.305 113.062
 246.727 116.441 246.727 120 c 246.727 123.559 248.305 126.938 251.039 129.215
 c 364.32 223.582 l 364.32 223.586 l 367.898 226.562 372.875 227.203 377.09
 225.23 c 381.305 223.258 384 219.023 384 214.367 c f
Q Q
showpage
%%Trailer
%%EOF
