%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 91 768 678
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 91 768 678
768 768 cairo_set_page_size
%%EndPageSetup
q 0 91 768 587 rectclip
1 0 0 -1 0 768 cm q
0 g
650.16 139.535 m 600.367 116.668 547.816 100.355 493.824 91.008 c 492.82
 90.84 491.82 91.32 491.328 92.207 c 484.559 104.207 477.07 119.902 471.84
 132.191 c 413.645 123.367 354.453 123.367 296.258 132.191 c 290.445 118.492
 283.84 105.141 276.48 92.207 c 275.984 91.32 274.984 90.84 273.984 91.008
 c 219.984 100.32 167.426 116.641 117.648 139.535 c 117.219 139.695 116.863
 140 116.641 140.398 c 17.09 289.152 -10.223 434.258 3.168 577.535 c 3.266
 578.238 3.602 578.832 4.176 579.312 c 62.16 622.234 126.996 655.02 195.938
 676.273 c 196.934 676.586 198.023 676.219 198.625 675.359 c 213.441 655.199
 226.527 633.934 237.891 611.566 c 237.887 611.566 l 238.371 610.621 238.176
 609.469 237.406 608.734 c 236.543 608.207 l 215.875 600.238 195.848 590.691
 176.641 579.648 c 175.527 579.016 175.105 577.621 175.68 576.48 c 176.398
 575.57 l 180.461 572.531 184.43 569.41 188.301 566.211 c 188.305 566.207
 l 188.996 565.652 189.938 565.523 190.754 565.871 c 316.465 623.277 452.547
 623.277 576.723 565.871 c 576.719 565.871 l 577.562 565.484 578.551 565.613
 579.266 566.207 c 583.137 569.406 587.105 572.527 591.168 575.566 c 591.855
 576.039 592.25 576.832 592.211 577.66 c 592.172 578.492 591.703 579.246
 590.977 579.648 c 571.852 590.863 551.793 600.406 531.023 608.16 c 530.355
 608.402 529.828 608.93 529.586 609.602 c 529.348 610.246 529.398 610.965
 529.727 611.566 c 541.246 633.887 554.445 655.199 568.941 675.359 c 568.945
 675.359 l 569.547 676.219 570.633 676.586 571.633 676.273 c 640.707 655.137
 705.66 622.344 763.68 579.312 c 764.262 578.898 764.633 578.25 764.688 
577.535 c 780.719 411.887 737.855 267.984 651.121 140.445 c 651.121 140.449
 l 650.969 140.008 650.609 139.668 650.16 139.535 c 256.656 490.27 m 218.785
 490.27 187.633 455.516 187.633 412.895 c 187.633 370.27 218.207 335.469
 256.656 335.469 c 295.391 335.469 326.258 370.508 325.68 412.895 c 325.68
 455.52 295.105 490.27 256.656 490.27 c 511.824 490.27 m 474 490.27 442.801
 455.516 442.801 412.895 c 442.801 370.27 473.375 335.469 511.824 335.469
 c 550.559 335.469 581.473 370.508 580.848 412.895 c 580.848 455.52 550.559
 490.27 511.824 490.27 c f
Q Q
showpage
%%Trailer
%%EOF
