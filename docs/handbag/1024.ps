%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 39 0 729 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 39 0 729 768
768 768 cairo_set_page_size
%%EndPageSetup
q 39 0 690 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 48 m 409.461 48 433.879 58.113 451.883 76.117 c 469.887 94.121 480 
118.539 480 144 c 480 240 l 288 240 l 288 144 l 288 118.539 298.113 94.121
 316.117 76.117 c 334.121 58.113 358.539 48 384 48 c 528 240 m 528 144 l
 528 92.555 500.555 45.016 456 19.293 c 411.445 -6.43 356.555 -6.43 312 
19.293 c 267.445 45.016 240 92.555 240 144 c 240 240 l 161.281 240 l 144.043
 240.004 127.379 246.191 114.316 257.441 c 101.254 268.688 92.66 284.25 
90.098 301.297 c 40.801 630.238 l 35.633 664.777 45.766 699.855 68.555 726.312
 c 91.348 752.773 124.535 767.992 159.457 768 c 608.496 768 l 643.426 768.008
 676.625 752.793 699.43 726.332 c 722.23 699.871 732.371 664.785 727.199
 630.238 c 677.855 301.293 l 677.855 301.297 l 675.293 284.258 666.707 268.703
 653.656 257.457 c 640.602 246.207 623.949 240.016 606.719 240 c h
480 288 m 480 360 l 480 368.574 484.574 376.496 492 380.785 c 499.426 385.07
 508.574 385.07 516 380.785 c 523.426 376.496 528 368.574 528 360 c 528 
288 l 606.672 288 l 612.418 288.004 617.969 290.074 622.32 293.824 c 626.672
 297.578 629.535 302.766 630.383 308.449 c 679.727 637.297 l 682.844 658.023
 676.773 679.082 663.098 694.969 c 649.426 710.855 629.504 719.996 608.543
 720 c 159.457 720 l 138.496 719.996 118.574 710.855 104.902 694.969 c 91.227
 679.082 85.156 658.023 88.273 637.297 c 137.617 308.449 l 138.465 302.773
 141.32 297.59 145.66 293.84 c 150 290.09 155.543 288.016 161.281 288 c 
240 288 l 240 360 l 240 368.574 244.574 376.496 252 380.785 c 259.426 385.07
 268.574 385.07 276 380.785 c 283.426 376.496 288 368.574 288 360 c 288 
288 l h
480 288 m f
Q Q
showpage
%%Trailer
%%EOF
