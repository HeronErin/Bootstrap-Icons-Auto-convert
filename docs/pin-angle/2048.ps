%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 125 125 1467 1467
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 125 125 1467 1467
1536 1536 cairo_set_page_size
%%EndPageSetup
q 125 125 1342 1342 rectclip
1 0 0 -1 0 1536 cm q
0 g
943.488 69.312 m 956.227 69.289 968.453 74.332 977.473 83.328 c 1452.672
 558.527 l 1461.672 567.531 1466.727 579.734 1466.727 592.465 c 1466.727
 605.191 1461.672 617.398 1452.672 626.398 c 1406.594 672.477 1349.762 682.848
 1308.383 682.848 c 1291.391 682.848 1276.223 681.121 1264.223 679.105 c
 963.359 979.969 l 971.246 1011.887 976.387 1044.422 978.719 1077.215 c 
983.133 1144.605 975.648 1239.168 909.598 1305.215 c 909.602 1305.215 l 
900.598 1314.215 888.391 1319.27 875.664 1319.27 c 862.938 1319.27 850.73
 1314.215 841.727 1305.215 c 570.141 1033.727 l 264.668 1339.199 l 245.949
 1357.918 147.645 1425.793 128.926 1407.07 c 110.207 1388.352 178.078 1289.949
 196.797 1271.328 c 502.27 965.855 l 230.781 694.27 l 230.785 694.273 l 
221.785 685.27 216.73 673.062 216.73 660.336 c 216.73 647.609 221.785 635.402
 230.785 626.398 c 296.832 560.352 391.395 552.766 458.785 557.277 c 458.785
 557.281 l 491.578 559.613 524.113 564.754 556.031 572.641 c 856.895 271.871
 l 854.477 257.242 853.195 242.445 853.055 227.617 c 853.055 186.336 863.422
 129.504 909.598 83.328 c 909.602 83.328 l 918.598 74.355 930.781 69.316
 943.488 69.312 c 955.199 272.066 m 955.199 271.875 l h
955.199 271.875 m 955.199 272.066 l 955.199 272.062 l 957.973 280.508 958.344
 289.559 956.277 298.203 c 954.211 306.848 949.781 314.746 943.488 321.023
 c 604.129 660.289 l 597.824 666.566 589.895 670.969 581.234 673.004 c 572.57
 675.039 563.512 674.625 555.07 671.809 c 554.879 671.809 l 553.535 671.426
 l 544.395 668.719 535.176 666.285 525.887 664.129 c 501.73 658.523 477.18
 654.801 452.449 652.992 c 411.938 650.305 372.191 653.762 339.648 667.391
 c 868.609 1196.254 l 882.145 1163.613 885.602 1123.965 882.914 1083.453
 c 882.91 1083.457 l 880.41 1049.164 874.23 1015.242 864.48 982.273 c 864.098
 981.027 l 864.098 980.93 l 861.262 972.473 860.836 963.398 862.871 954.715
 c 864.906 946.035 869.32 938.09 875.617 931.777 c 1215.074 592.418 l 1215.07
 592.414 l 1221.609 585.84 1229.91 581.297 1238.973 579.336 c 1248.039 577.379
 1257.473 578.086 1266.145 581.375 c 1275.359 583.488 l 1283.711 585.121
 1295.328 586.754 1308.383 586.754 c 1319.391 586.883 1330.367 585.602 1341.312
 582.914 c 952.992 194.688 l 950.305 205.695 949.023 216.672 949.152 227.617
 c 949.223 242.531 951.223 257.375 955.105 271.777 c h
955.199 271.875 m f
Q Q
showpage
%%Trailer
%%EOF
