%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
480 600 m 480 606.363 477.473 612.469 472.969 616.969 c 468.469 621.473
 462.363 624 456 624 c 72 624 l 65.637 624 59.531 621.473 55.031 616.969
 c 50.527 612.469 48 606.363 48 600 c 48 168 l 48 161.637 50.527 155.531
 55.031 151.031 c 59.531 146.527 65.637 144 72 144 c 456 144 l 462.363 144
 468.469 146.527 472.969 151.031 c 477.473 155.531 480 161.637 480 168 c
 480 264 l 480 272.574 484.574 280.496 492 284.785 c 499.426 289.07 508.574
 289.07 516 284.785 c 523.426 280.496 528 272.574 528 264 c 528 168 l 528
 148.906 520.414 130.59 506.91 117.09 c 493.41 103.586 475.094 96 456 96
 c 72 96 l 52.906 96 34.59 103.586 21.09 117.09 c 7.586 130.59 0 148.906
 0 168 c 0 600 l 0 619.094 7.586 637.41 21.09 650.91 c 34.59 664.414 52.906
 672 72 672 c 456 672 l 475.094 672 493.41 664.414 506.91 650.91 c 520.414
 637.41 528 619.094 528 600 c 528 504 l 528 495.426 523.426 487.504 516 
483.215 c 508.574 478.93 499.426 478.93 492 483.215 c 484.574 487.504 480
 495.426 480 504 c h
480 600 m f*
760.992 400.992 m 765.508 396.488 768.043 390.375 768.043 384 c 768.043
 377.625 765.508 371.512 760.992 367.008 c 616.992 223.008 l 610.922 216.938
 602.074 214.566 593.781 216.789 c 585.488 219.012 579.012 225.488 576.789
 233.781 c 574.566 242.074 576.938 250.922 583.008 256.992 c 686.062 360
 l 264 360 l 255.426 360 247.504 364.574 243.215 372 c 238.93 379.426 238.93
 388.574 243.215 396 c 247.504 403.426 255.426 408 264 408 c 686.062 408
 l 583.008 511.008 l 576.938 517.078 574.566 525.926 576.789 534.219 c 579.012
 542.512 585.488 548.988 593.781 551.211 c 602.074 553.434 610.922 551.062
 616.992 544.992 c h
760.992 400.992 m f*
Q Q
showpage
%%Trailer
%%EOF
