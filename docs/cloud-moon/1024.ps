%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:14 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 720 rectclip
1 0 0 -1 0 768 cm q
0 g
336 384 m 365.789 383.996 395.047 391.914 420.77 406.941 c 446.492 421.973
 467.758 443.57 482.383 469.523 c 497.008 495.477 504.469 524.852 504 554.641
 c 503.883 562.129 507.266 569.242 513.152 573.875 c 519.039 578.512 526.75
 580.129 534 578.258 c 555.562 572.75 578.457 577.5 596.047 591.129 c 613.637
 604.762 623.953 625.746 624 648 c 624 667.094 616.414 685.41 602.91 698.91
 c 589.41 712.414 571.094 720 552 720 c 144 720 l 118.219 719.855 93.578
 709.344 75.629 690.836 c 57.68 672.328 47.926 647.375 48.57 621.602 c 49.219
 595.828 60.203 571.395 79.055 553.805 c 97.906 536.219 123.043 526.953 
148.801 528.098 c 154.324 528.371 159.77 526.727 164.223 523.449 c 168.672
 520.168 171.855 515.453 173.23 510.098 c 182.531 474 203.566 442.02 233.035
 419.191 c 262.504 396.363 298.727 383.984 336 384 c 550.703 528 m 545.305
 479.336 523.527 433.949 488.949 399.281 c 454.371 364.613 409.039 342.727
 360.387 337.203 c 311.738 331.68 262.652 342.848 221.184 368.883 c 179.711
 394.914 148.316 434.266 132.145 480.48 c 82.25 484.562 38.059 514.27 15.434
 558.926 c -7.188 603.582 -4.996 656.785 21.227 699.43 c 47.449 742.074 
93.938 768.039 144 768 c 552 768 l 594.871 768 634.488 745.129 655.922 708
 c 677.359 670.871 677.359 625.129 655.922 588 c 634.488 550.871 594.871
 528 552 528 c h
550.703 528 m f
541.727 85.344 m 545.43 79.805 546.66 72.977 545.129 66.492 c 543.598 60.008
 539.441 54.453 533.652 51.156 c 527.863 47.859 520.965 47.113 514.609 49.105
 c 464.91 64.668 422.32 97.316 394.383 141.27 c 366.445 185.223 354.965 
237.641 361.969 289.246 c 379.137 290.93 396.098 294.289 412.609 299.281
 c 405.18 267.691 406.793 234.648 417.27 203.938 c 427.746 173.223 446.656
 146.082 471.84 125.617 c 460.719 168.496 462.773 213.734 477.738 255.43
 c 492.703 297.125 519.883 333.348 555.73 359.371 c 591.582 385.395 634.438
 400.016 678.719 401.328 c 647.258 423.176 609.398 433.887 571.152 431.762
 c 578.961 447.027 585.266 463.027 590.062 479.762 c 624.719 478.285 658.539
 468.648 688.766 451.633 c 718.992 434.617 744.777 410.703 764.016 381.84
 c 767.719 376.301 768.949 369.473 767.418 362.988 c 765.887 356.504 761.73
 350.949 755.941 347.652 c 750.152 344.355 743.254 343.609 736.895 345.602
 c 702.852 356.285 666.328 356.148 632.363 345.207 c 598.398 334.266 568.664
 313.055 547.258 284.504 c 525.852 255.953 513.828 221.469 512.848 185.797
 c 511.867 150.125 521.973 115.027 541.777 85.344 c h
541.727 85.344 m f
Q Q
showpage
%%Trailer
%%EOF
