%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 0 0 96 96
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 0 0 96 96
96 96 cairo_set_page_size
%%EndPageSetup
q 0 0 96 96 rectclip
1 0 0 -1 0 96 cm q
0 g
15.949 66.156 m 17.52 66.68 18.367 68.379 17.844 69.949 c 14.844 78.949
 l 14.617 79.73 14.078 80.387 13.355 80.766 c 12.633 81.145 11.789 81.211
 11.016 80.953 c 10.242 80.695 9.605 80.133 9.254 79.398 c 8.906 78.664 
8.867 77.816 9.156 77.051 c 12.156 68.051 l 12.68 66.48 14.379 65.633 15.949
 66.156 c 72.949 66.156 m 74.52 66.68 75.367 68.379 74.844 69.949 c 71.844
 78.949 l 71.617 79.73 71.078 80.387 70.355 80.766 c 69.633 81.145 68.789
 81.211 68.016 80.953 c 67.242 80.695 66.605 80.133 66.254 79.398 c 65.906
 78.664 65.867 77.816 66.156 77.051 c 69.156 68.051 l 69.68 66.48 71.379
 65.633 72.949 66.156 c 27.949 75.156 m 29.52 75.68 30.367 77.379 29.844
 78.949 c 26.844 87.949 l 26.617 88.73 26.078 89.387 25.355 89.766 c 24.633
 90.145 23.789 90.211 23.016 89.953 c 22.242 89.695 21.605 89.133 21.254
 88.398 c 20.906 87.664 20.867 86.816 21.156 86.051 c 24.156 77.051 l 24.68
 75.48 26.379 74.633 27.949 75.156 c 84.949 75.156 m 86.52 75.68 87.367 
77.379 86.844 78.949 c 83.844 87.949 l 83.617 88.73 83.078 89.387 82.355
 89.766 c 81.633 90.145 80.789 90.211 80.016 89.953 c 79.242 89.695 78.605
 89.133 78.254 88.398 c 77.906 87.664 77.867 86.816 78.156 86.051 c 81.156
 77.051 l 81.68 75.48 83.379 74.633 84.949 75.156 c 80.43 24.164 m 80.43
 24.16 l 78.758 15.73 73.551 8.422 66.129 4.09 c 58.707 -0.246 49.781 -1.188
 41.617 1.5 c 33.453 4.184 26.832 10.242 23.438 18.137 c 17.699 17.477 11.941
 19.207 7.52 22.926 c 3.098 26.641 0.402 32.016 0.066 37.781 c -0.266 43.547
 1.785 49.195 5.746 53.398 c 9.707 57.605 15.223 59.992 21 60 c 78 60 l 
84.145 60.008 89.871 56.879 93.184 51.699 c 96.496 46.523 96.938 40.012 
94.355 34.438 c 91.77 28.859 86.52 24.984 80.43 24.16 c 51 6 m 56.902 6 
62.602 8.172 67 12.109 c 71.402 16.043 74.199 21.465 74.855 27.328 c 75.023
 28.855 76.32 30.008 77.855 30 c 78 30 l 84.629 30 90 35.371 90 42 c 90 
48.629 84.629 54 78 54 c 21 54 l 16.703 53.996 12.617 52.152 9.77 48.938
 c 6.926 45.719 5.594 41.434 6.121 37.172 c 6.645 32.906 8.969 29.074 12.508
 26.641 c 16.047 24.207 20.461 23.406 24.629 24.445 c 26.156 24.824 27.715
 23.965 28.207 22.469 c 29.789 17.676 32.844 13.504 36.938 10.547 c 41.031
 7.59 45.949 6 51 6 c 42.316 67.656 m 42.828 66.641 43.863 66 45 66 c 51
 66 l 51.965 66 52.867 66.465 53.434 67.246 c 53.996 68.027 54.148 69.035
 53.844 69.949 c 52.164 75 l 57 75 l 58.152 75 59.203 75.664 59.699 76.699
 c 60.199 77.738 60.059 78.973 59.34 79.871 c 47.34 94.871 l 46.457 95.969
 44.934 96.305 43.672 95.68 c 42.41 95.055 41.754 93.641 42.09 92.273 c 
44.16 84 l 39 84 l 37.961 84 36.992 83.461 36.449 82.574 c 35.902 81.691
 35.852 80.586 36.316 79.656 c h
42.316 67.656 m f
Q Q
showpage
%%Trailer
%%EOF
