%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1507.008 699.551 m 836.352 28.992 l 817.809 10.438 792.648 0.012 766.414
 0.012 c 740.184 0.012 715.023 10.438 696.48 28.992 c 557.281 168.191 l 
733.922 344.832 l 761.84 335.301 792.324 336.629 819.309 348.551 c 846.293
 360.477 867.801 382.121 879.551 409.18 c 891.301 436.242 892.434 466.734
 882.719 494.594 c 1052.926 664.898 l 1052.93 664.895 l 1086.758 652.984
 1124.176 657.176 1154.531 676.277 c 1184.887 695.375 1204.859 727.297 1208.758
 762.949 c 1212.66 798.602 1200.066 834.082 1174.559 859.297 c 1148.73 885.285
 1112.273 897.758 1075.938 893.047 c 1039.602 888.332 1007.535 866.965 989.195
 835.246 c 970.852 803.527 968.328 765.074 982.367 731.23 c 823.68 572.449
 l 823.68 990.336 l 856.086 1006.379 879.32 1036.426 886.691 1071.824 c 
894.062 1107.227 884.75 1144.051 861.441 1171.695 c 838.129 1199.336 803.402
 1214.727 767.266 1213.438 c 731.129 1212.148 697.59 1194.316 676.312 1165.082
 c 655.031 1135.848 648.371 1098.453 658.246 1063.668 c 668.125 1028.883
 693.441 1000.57 726.91 986.879 c 726.91 565.152 l 697.883 553.258 674.805
 530.266 662.801 501.281 c 650.797 472.297 650.859 439.723 662.977 410.785
 c 488.93 236.641 l 29.09 696.48 l 10.535 715.023 0.109 740.184 0.109 766.414
 c 0.109 792.648 10.535 817.809 29.09 836.352 c 699.746 1507.008 l 699.742
 1507.008 l 718.289 1525.562 743.445 1535.988 769.68 1535.988 c 795.914 
1535.988 821.07 1525.562 839.617 1507.008 c 1507.105 839.52 l 1525.656 820.977
 1536.082 795.816 1536.082 769.586 c 1536.082 743.352 1525.656 718.191 1507.105
 699.648 c f
Q Q
showpage
%%Trailer
%%EOF
