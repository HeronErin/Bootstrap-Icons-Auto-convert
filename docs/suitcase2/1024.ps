%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 144 0 624 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 144 0 624 768
768 768 cairo_set_page_size
%%EndPageSetup
q 144 0 480 768 rectclip
1 0 0 -1 0 768 cm q
0 g
312 0 m 305.637 0 299.531 2.527 295.031 7.031 c 290.527 11.531 288 17.637
 288 24 c 288 144 l 240 144 l 214.539 144 190.121 154.113 172.117 172.117
 c 154.113 190.121 144 214.539 144 240 c 144 624 l 143.996 641.145 148.586
 657.977 157.289 672.75 c 165.988 687.523 178.488 699.691 193.488 708 c 
189.836 722.375 193.012 737.629 202.098 749.352 c 211.188 761.074 225.168
 767.953 240 768 c 252.73 768 264.938 762.941 273.941 753.941 c 282.941 
744.938 288 732.73 288 720 c 480 720 l 480.039 733.758 485.984 746.84 496.32
 755.922 c 506.66 765 520.395 769.207 534.047 767.477 c 547.695 765.742 
559.945 758.234 567.684 746.859 c 575.426 735.484 577.91 721.332 574.512
 708 c 589.512 699.691 602.012 687.523 610.711 672.75 c 619.414 657.977 
624.004 641.145 624 624 c 624 240 l 624 214.539 613.887 190.121 595.883 
172.117 c 577.879 154.113 553.461 144 528 144 c 480 144 l 480 24 l 480 17.637
 477.473 11.531 472.969 7.031 c 468.469 2.527 462.363 0 456 0 c h
432 144 m 336 144 l 336 48 l 432 48 l h
576 624 m 576 636.73 570.941 648.938 561.941 657.941 c 552.938 666.941 
540.73 672 528 672 c 240 672 l 227.27 672 215.062 666.941 206.059 657.941
 c 197.059 648.938 192 636.73 192 624 c 192 336 l 576 336 l h
240 192 m 528 192 l 540.73 192 552.938 197.059 561.941 206.059 c 570.941
 215.062 576 227.27 576 240 c 576 288 l 192 288 l 192 240 l 192 227.27 197.059
 215.062 206.059 206.059 c 215.062 197.059 227.27 192 240 192 c f
Q Q
showpage
%%Trailer
%%EOF
