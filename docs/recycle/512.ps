%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:31 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 5 0 379 372
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 5 0 379 372
384 384 cairo_set_page_size
%%EndPageSetup
q 5 0 374 372 rectclip
1 0 0 -1 0 384 cm q
0 g
223.246 30.145 m 219.027 22.77 212.336 17.125 204.355 14.207 c 196.379 
11.293 187.621 11.293 179.645 14.207 c 171.664 17.125 164.973 22.77 160.754
 30.145 c 119.859 101.664 l 119.855 101.664 l 116.562 107.422 118.562 114.762
 124.32 118.055 c 130.078 121.352 137.418 119.352 140.711 113.594 c 181.582
 42.051 l 181.586 42.047 l 183.723 38.312 187.695 36.008 192 36.008 c 196.305
 36.008 200.277 38.312 202.414 42.047 c 263.375 148.703 l 233.23 140.613
 l 233.23 140.617 l 226.828 138.895 220.242 142.688 218.52 149.09 c 216.797
 155.488 220.59 162.078 226.992 163.801 c 284.953 179.328 l 288.027 180.156
 291.305 179.73 294.062 178.141 c 296.824 176.551 298.836 173.93 299.664
 170.855 c 315.191 112.895 l 316.91 106.492 313.109 99.914 306.707 98.195
 c 300.305 96.48 293.723 100.277 292.008 106.68 c 284.016 136.488 l h
71.352 186.551 m 41.23 194.641 l 34.828 196.363 28.242 192.57 26.52 186.168
 c 24.797 179.766 28.59 173.18 34.992 171.457 c 92.977 155.93 l 99.371 154.219
 105.941 158.008 107.664 164.398 c 123.191 222.359 l 124.91 228.762 121.109
 235.344 114.707 237.059 c 108.305 238.777 101.723 234.977 100.008 228.574
 c 92.016 198.766 l 30.938 305.66 l 30.938 305.664 l 28.816 309.379 28.832
 313.938 30.977 317.637 c 33.121 321.336 37.074 323.613 41.352 323.617 c
 120 323.617 l 126.629 323.617 132 328.988 132 335.617 c 132 342.242 126.629
 347.617 120 347.617 c 41.352 347.617 l 28.523 347.613 16.664 340.781 10.227
 329.684 c 3.785 318.586 3.742 304.902 10.105 293.762 c h
332.711 221.664 m 331.176 218.82 328.559 216.719 325.449 215.832 c 322.34
 214.941 319.008 215.348 316.203 216.949 c 313.395 218.555 311.355 221.223
 310.543 224.348 c 309.727 227.477 310.211 230.801 311.879 233.566 c 353.062
 305.664 l 355.184 309.379 355.168 313.938 353.023 317.637 c 350.879 321.336
 346.926 323.613 342.648 323.617 c 208.969 323.617 l 224.496 308.113 l 229.18
 303.418 229.176 295.816 224.484 291.133 c 219.793 286.445 212.191 286.453
 207.504 291.145 c 171.504 327.145 l 166.82 331.828 166.82 339.426 171.504
 344.113 c 207.504 380.113 l 212.191 384.805 219.793 384.809 224.484 380.125
 c 229.176 375.438 229.18 367.836 224.496 363.145 c 208.969 347.617 l 342.648
 347.617 l 355.477 347.613 367.336 340.781 373.773 329.684 c 380.215 318.586
 380.258 304.902 373.895 293.762 c h
332.711 221.664 m f
Q Q
showpage
%%Trailer
%%EOF
