%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:51 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 0 0 87 96
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 0 0 87 96
96 96 cairo_set_page_size
%%EndPageSetup
q 0 0 87 96 rectclip
1 0 0 -1 0 96 cm q
0 g
30 75 m 30 78.363 28.121 81.445 25.133 82.988 c 22.148 84.535 18.547 84.285
 15.801 82.344 c 13.055 80.398 11.621 77.09 12.086 73.758 c 12.547 70.426
 14.828 67.633 18 66.512 c 18 15 l 18 13.344 19.344 12 21 12 c 22.656 12
 24 13.344 24 15 c 24 66.512 l 27.598 67.781 30.004 71.184 30 75 c f
6 15 m 6 9.641 8.859 4.688 13.5 2.008 c 18.141 -0.668 23.859 -0.668 28.5
 2.008 c 33.141 4.688 36 9.641 36 15 c 36 60.301 l 39.879 64.262 42.039 
69.594 42 75.141 c 41.961 80.684 39.734 85.988 35.797 89.898 c 31.863 93.805
 26.543 95.996 21 95.996 c 15.457 95.996 10.137 93.805 6.203 89.898 c 2.266
 85.988 0.039 80.684 0 75.141 c -0.039 69.594 2.121 64.262 6 60.301 c h
21 6 m 16.031 6 12 10.031 12 15 c 12 62.922 l 10.996 63.82 l 7.961 66.539
 6.16 70.375 6.008 74.445 c 5.855 78.52 7.367 82.477 10.195 85.41 c 13.023
 88.344 16.922 90.004 20.996 90.004 c 25.07 90.004 28.973 88.344 31.801 
85.41 c 34.625 82.477 36.137 78.52 35.988 74.445 c 35.836 70.375 34.035 
66.539 30.996 63.82 c 30 62.914 l 30 15 l 30 10.031 25.969 6 21 6 c 51 12
 m 51.797 12 52.559 12.316 53.121 12.879 c 53.684 13.441 54 14.203 54 15
 c 54 21 l 54 22.656 52.656 24 51 24 c 49.344 24 48 22.656 48 21 c 48 15
 l 48 13.344 49.344 12 51 12 c 76.457 22.543 m 77.629 23.715 77.629 25.613
 76.457 26.785 c 72.215 31.031 l 71.043 32.203 69.141 32.203 67.969 31.031
 c 66.797 29.859 66.797 27.957 67.969 26.785 c 72.215 22.543 l 73.387 21.371
 75.285 21.371 76.457 22.543 c 48 33 m 48 31.344 49.344 30 51 30 c 57.43
 30 63.375 33.43 66.59 39 c 69.805 44.57 69.805 51.43 66.59 57 c 63.375 
62.57 57.43 66 51 66 c 49.344 66 48 64.656 48 63 c 48 61.344 49.344 60 51
 60 c 57.629 60 63 54.629 63 48 c 63 41.371 57.629 36 51 36 c 49.344 36 
48 34.656 48 33 c 75 48 m 75 46.344 76.344 45 78 45 c 84 45 l 85.656 45 
87 46.344 87 48 c 87 49.656 85.656 51 84 51 c 78 51 l 76.344 51 75 49.656
 75 48 c 67.969 64.969 m 68.531 64.402 69.297 64.086 70.094 64.086 c 70.891
 64.086 71.652 64.402 72.215 64.969 c 76.457 69.215 l 77.594 70.395 77.578
 72.266 76.422 73.422 c 75.266 74.578 73.395 74.594 72.215 73.457 c 67.969
 69.215 l 67.402 68.652 67.086 67.891 67.086 67.094 c 67.086 66.297 67.402
 65.531 67.969 64.969 c 51 72 m 51.797 72 52.559 72.316 53.121 72.879 c 
53.684 73.441 54 74.203 54 75 c 54 81 l 54 82.656 52.656 84 51 84 c 49.344
 84 48 82.656 48 81 c 48 75 l 48 73.344 49.344 72 51 72 c f
Q Q
showpage
%%Trailer
%%EOF
