%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 696 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 696 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 696 768 rectclip
1 0 0 -1 0 768 cm q
0 g
240 600 m 239.992 617.684 233.473 634.746 221.691 647.934 c 209.91 661.121
 193.684 669.512 176.113 671.504 c 158.543 673.496 140.852 668.953 126.414
 658.738 c 111.98 648.523 101.805 633.355 97.836 616.121 c 93.867 598.891
 96.379 580.801 104.895 565.301 c 113.406 549.801 127.328 537.977 144 532.078
 c 144 120 l 144 111.426 148.574 103.504 156 99.215 c 163.426 94.93 172.574
 94.93 180 99.215 c 187.426 103.504 192 111.426 192 120 c 192 532.078 l 
206.043 537.047 218.203 546.242 226.797 558.41 c 235.395 570.574 240.008
 585.105 240 600 c f
48 120 m 48 77.129 70.871 37.512 108 16.078 c 145.129 -5.359 190.871 -5.359
 228 16.078 c 265.129 37.512 288 77.129 288 120 c 288 482.398 l 319.043 
514.086 336.297 556.762 335.996 601.117 c 335.695 645.477 317.863 687.914
 286.391 719.172 c 254.918 750.434 212.359 767.977 168 767.977 c 123.641
 767.977 81.082 750.434 49.609 719.172 c 18.137 687.914 0.305 645.477 0.004
 601.117 c -0.297 556.762 16.957 514.086 48 482.398 c h
168 48 m 148.906 48 130.59 55.586 117.09 69.09 c 103.586 82.59 96 100.906
 96 120 c 96 503.375 l 87.984 510.574 l 63.684 532.309 49.27 562.988 48.059
 595.566 c 46.848 628.145 58.941 659.812 81.562 683.285 c 104.18 706.762
 135.375 720.027 167.977 720.027 c 200.574 720.027 231.773 706.762 254.391
 683.285 c 277.012 659.812 289.105 628.145 287.895 595.566 c 286.68 562.988
 272.27 532.309 247.969 510.574 c 240 503.328 l 240 120 l 240 100.906 232.414
 82.59 218.91 69.09 c 205.41 55.586 187.094 48 168 48 c 408 96 m 414.363
 96 420.469 98.527 424.969 103.031 c 429.473 107.531 432 113.637 432 120
 c 432 168 l 432 176.574 427.426 184.496 420 188.785 c 412.574 193.07 403.426
 193.07 396 188.785 c 388.574 184.496 384 176.574 384 168 c 384 120 l 384
 113.637 386.527 107.531 391.031 103.031 c 395.531 98.527 401.637 96 408
 96 c 611.664 180.336 m 616.164 184.836 618.691 190.941 618.691 197.305 
c 618.691 203.668 616.164 209.77 611.664 214.273 c 577.727 248.258 l 571.656
 254.328 562.809 256.699 554.516 254.477 c 546.223 252.254 539.746 245.777
 537.523 237.484 c 535.301 229.191 537.672 220.344 543.742 214.273 c 577.727
 180.336 l 582.23 175.836 588.332 173.309 594.695 173.309 c 601.059 173.309
 607.164 175.836 611.664 180.336 c 384 264 m 384 257.637 386.527 251.531
 391.031 247.031 c 395.531 242.527 401.637 240 408 240 c 459.445 240 506.984
 267.445 532.707 312 c 558.43 356.555 558.43 411.445 532.707 456 c 506.984
 500.555 459.445 528 408 528 c 399.426 528 391.504 523.426 387.215 516 c
 382.93 508.574 382.93 499.426 387.215 492 c 391.504 484.574 399.426 480
 408 480 c 442.297 480 473.988 461.703 491.137 432 c 508.289 402.297 508.289
 365.703 491.137 336 c 473.988 306.297 442.297 288 408 288 c 401.637 288
 395.531 285.473 391.031 280.969 c 386.527 276.469 384 270.363 384 264 c
 600 384 m 600 377.637 602.527 371.531 607.031 367.031 c 611.531 362.527
 617.637 360 624 360 c 672 360 l 680.574 360 688.496 364.574 692.785 372
 c 697.07 379.426 697.07 388.574 692.785 396 c 688.496 403.426 680.574 408
 672 408 c 624 408 l 617.637 408 611.531 405.473 607.031 400.969 c 602.527
 396.469 600 390.363 600 384 c 543.742 519.742 m 548.246 515.23 554.359 
512.691 560.734 512.691 c 567.113 512.691 573.227 515.23 577.727 519.742
 c 611.664 553.727 l 617.551 559.824 619.789 568.574 617.547 576.746 c 615.305
 584.922 608.922 591.305 600.746 593.547 c 592.574 595.789 583.824 593.551
 577.727 587.664 c 543.742 553.727 l 539.23 549.227 536.691 543.113 536.691
 536.734 c 536.691 530.359 539.23 524.246 543.742 519.742 c 408 576 m 414.363
 576 420.469 578.527 424.969 583.031 c 429.473 587.531 432 593.637 432 600
 c 432 648 l 432 656.574 427.426 664.496 420 668.785 c 412.574 673.07 403.426
 673.07 396 668.785 c 388.574 664.496 384 656.574 384 648 c 384 600 l 384
 593.637 386.527 587.531 391.031 583.031 c 395.531 578.527 401.637 576 408
 576 c f
Q Q
showpage
%%Trailer
%%EOF
