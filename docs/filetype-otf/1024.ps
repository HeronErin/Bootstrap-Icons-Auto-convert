%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 528 768 l 528 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
125.855 655.969 m 125.855 681.023 l 125.855 693.312 123.984 703.566 120.238
 711.793 c 117.055 719.387 111.672 725.855 104.785 730.367 c 97.961 734.418
 90.156 736.508 82.223 736.414 c 74.293 736.508 66.484 734.418 59.664 730.367
 c 52.836 725.832 47.496 719.391 44.305 711.84 c 40.266 702.082 38.352 691.578
 38.688 681.023 c 38.688 655.969 l 38.688 643.617 40.559 633.359 44.305 
625.199 c 47.488 617.633 52.828 611.172 59.664 606.625 c 66.441 602.453 
74.27 600.305 82.223 600.434 c 90.703 600.434 98.223 602.512 104.781 606.672
 c 104.785 606.672 l 111.668 611.172 117.047 617.621 120.238 625.199 c 123.98
 633.359 125.855 643.613 125.855 655.969 c 164.398 680.879 m 164.398 656.254
 l 164.398 638.176 161.117 622.621 154.559 609.598 c 154.559 609.602 l 148.383
 596.895 138.512 586.355 126.238 579.359 c 114.078 572.32 99.422 568.801
 82.27 568.801 c 65.18 568.801 50.461 572.32 38.109 579.359 c 38.113 579.359
 l 25.84 586.277 15.977 596.777 9.84 609.457 c 3.281 622.449 0 638.047 0
 656.258 c 0 680.883 l 0 698.898 3.281 714.469 9.84 727.586 c 16.398 740.578
 25.824 750.609 38.113 757.684 c 50.465 764.594 65.184 768.051 82.273 768.051
 c 99.426 768.051 114.098 764.594 126.289 757.684 c 126.289 757.68 l 138.504
 750.691 148.348 740.211 154.559 727.586 c 161.086 714.465 164.367 698.898
 164.398 680.883 c 260.398 764.402 m 260.398 604.227 l 314.879 604.223 l
 314.879 572.445 l 167.855 572.449 l 167.855 604.227 l 222.238 604.223 l
 222.238 764.398 l 260.352 764.398 l h
368.445 688.082 m 368.445 764.402 l 330.523 764.402 l 330.523 572.449 l
 452.828 572.449 l 452.828 603.793 l 368.449 603.793 l 368.449 657.41 l 
445.539 657.41 l 445.539 688.035 l h
368.445 688.082 m f*
Q Q
showpage
%%Trailer
%%EOF
