%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:07 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 24 0 360 373
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 24 0 360 373
384 384 cairo_set_page_size
%%EndPageSetup
q 24 0 336 373 rectclip
1 0 0 -1 0 384 cm q
0 g
104.52 12.527 m 110.855 10.613 117.543 14.188 119.473 20.52 c 126.457 43.465
 l 145.953 30.758 168.727 23.996 192 24 c 216.168 24 238.703 31.152 257.543
 43.465 c 264.504 20.52 l 265.41 17.453 267.5 14.875 270.316 13.355 c 273.129
 11.84 276.434 11.508 279.492 12.434 c 282.555 13.359 285.117 15.473 286.613
 18.297 c 288.113 21.121 288.422 24.426 287.473 27.48 c 277.633 59.93 l 
299.66 82.367 312 112.555 312 144 c 324 144 l 327.184 144 330.234 142.734
 332.484 140.484 c 334.734 138.234 336 135.184 336 132 c 336 120 l 336 113.371
 341.371 108 348 108 c 354.629 108 360 113.371 360 120 c 360 132 l 360 141.547
 356.207 150.703 349.457 157.457 c 342.703 164.207 333.547 168 324 168 c
 312 168 l 312 192 l 348 192 l 354.629 192 360 197.371 360 204 c 360 210.629
 354.629 216 348 216 c 312 216 l 312 240 l 324 240 l 333.547 240 342.703
 243.793 349.457 250.543 c 356.207 257.297 360 266.453 360 276 c 360 288
 l 360 294.629 354.629 300 348 300 c 341.371 300 336 294.629 336 288 c 336
 276 l 336 272.816 334.734 269.766 332.484 267.516 c 330.234 265.266 327.184
 264 324 264 c 312 264 l 312 306.871 289.129 346.488 252 367.922 c 214.871
 389.359 169.129 389.359 132 367.922 c 94.871 346.488 72 306.871 72 264 
c 60 264 l 53.371 264 48 269.371 48 276 c 48 288 l 48 294.629 42.629 300
 36 300 c 29.371 300 24 294.629 24 288 c 24 276 l 24 266.453 27.793 257.297
 34.543 250.543 c 41.297 243.793 50.453 240 60 240 c 72 240 l 72 216 l 36
 216 l 29.371 216 24 210.629 24 204 c 24 197.371 29.371 192 36 192 c 72 
192 l 72 168 l 60 168 l 50.453 168 41.297 164.207 34.543 157.457 c 27.793
 150.703 24 141.547 24 132 c 24 120 l 24 113.371 29.371 108 36 108 c 42.629
 108 48 113.371 48 120 c 48 132 l 48 135.184 49.266 138.234 51.516 140.484
 c 53.766 142.734 56.816 144 60 144 c 72 144 l 72 111.266 85.129 81.574 
106.367 59.93 c 96.527 27.48 l 94.613 21.145 98.188 14.457 104.52 12.527
 c 96 168 m 96 264 l 95.992 287.387 104.523 309.977 119.988 327.52 c 135.457
 345.062 156.797 356.355 180 359.281 c 180 168 l h
204 168 m 204 359.281 l 227.203 356.355 248.543 345.062 264.012 327.52 
c 279.477 309.977 288.008 287.387 288 264 c 288 168 l h
288 144 m 288 116.676 276.355 90.645 255.984 72.434 c 238.41 56.66 215.613
 47.953 192 48 c 168.375 47.949 145.574 56.652 127.992 72.434 c 107.629 
90.648 95.992 116.68 96 144 c h
288 144 m f
Q Q
showpage
%%Trailer
%%EOF
