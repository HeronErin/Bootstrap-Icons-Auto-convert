%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:20 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
448.32 384.238 m 448.32 174 448.801 1.582 449.426 1.102 c 449.902 0.48 
481.727 0 519.887 0 c 575.23 0 592.367 0.48 603.551 2.398 c 686.59 16.703
 749.711 79.199 765.453 162.047 c 767.66 173.664 767.996 200.879 767.996
 383.328 c 767.996 578.207 768.234 601.105 762.094 622.176 c 761.039 625.824
 759.789 629.375 758.254 633.793 c 758.258 633.793 l 746.117 669.16 724.246
 700.387 695.156 723.879 c 666.066 747.375 630.938 762.184 593.809 766.609
 c 578.594 768.195 455.137 768.816 450.863 767.234 c 448.465 766.273 448.32
 731.137 448.32 384.242 c 672.719 397.152 m 664.254 372.766 644.238 354.172
 619.297 347.52 c 600.145 342.566 579.824 345.148 562.52 354.73 c 545.211
 364.312 532.238 380.164 526.273 399.023 c 522.312 413.695 522.082 429.121
 525.602 443.902 c 531.441 463.074 544.414 479.277 561.848 489.164 c 579.281
 499.051 599.844 501.867 619.297 497.039 c 643.777 490.512 662.883 472.848
 672.578 447.695 c 677.859 434.016 678.004 412.078 672.723 397.152 c 178.078
 159.215 m 168.094 161.137 152.832 168.766 144.719 175.918 c 128.016 190.367
 119.758 210.91 121.008 235.055 c 121.633 247.629 122.449 250.992 127.535
 261.168 c 134.977 276.574 146.254 287.855 161.711 295.488 c 172.367 300.77
 175.055 301.391 188.926 301.871 c 201.453 302.352 205.918 301.871 214.367
 298.992 c 248.879 287.375 269.711 253.871 263.809 219.504 c 256.992 178.609
 218.207 151.246 178.082 159.215 c f
164.398 2.543 m 127.09 9.148 92.449 26.281 64.555 51.922 c 36.66 77.562
 16.676 110.641 6.961 147.266 c 0 174.145 -0.48 189.887 0.238 398.398 c 
0.719 589.918 0.91 594.336 4.078 609.117 c 21.742 688.797 78.383 745.629
 158.832 764.398 c 169.391 766.797 182.688 767.277 268.754 767.758 c 357.844
 768.332 367.059 768.191 369.41 765.836 c 371.809 763.438 371.953 732.715
 371.953 384.715 c 371.953 126.762 371.473 5.227 370.367 3.02 c 368.781 
0.141 366.047 -0.004 272.926 0.141 c 197.184 0.332 174.43 0.812 164.445 
2.539 c h
308.398 706.465 m 243.598 705.695 l 183.98 705.07 177.598 704.734 165.695
 701.711 c 140.918 695.598 118.383 682.574 100.711 664.164 c 83.039 645.75
 70.953 622.703 65.855 597.695 c 62.305 581.617 62.305 185.902 65.664 170.16
 c 75.078 125.719 105.941 88.848 148.031 71.762 c 169.055 63.312 178.75 
62.355 246.816 62.16 c 308.352 62.016 l 308.352 706.465 l h
308.398 706.465 m f
Q Q
showpage
%%Trailer
%%EOF
