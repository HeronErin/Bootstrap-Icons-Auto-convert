%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
896.641 768.48 m 896.641 348 897.602 3.168 898.848 2.207 c 899.809 0.961
 963.457 0 1039.777 0 c 1150.465 0 1184.738 0.961 1207.105 4.801 c 1373.184
 33.41 1499.426 158.402 1530.914 324.098 c 1535.328 347.328 1536.004 401.762
 1536.004 766.656 c 1536.004 1156.418 1536.484 1202.207 1524.195 1244.352
 c 1522.082 1251.648 1519.586 1258.75 1516.516 1267.582 c 1516.512 1267.586
 l 1492.234 1338.32 1448.492 1400.77 1390.312 1447.758 c 1332.133 1494.746
 1261.875 1524.367 1187.617 1533.215 c 1157.184 1536.383 910.273 1537.629
 901.73 1534.461 c 896.93 1532.539 896.641 1462.27 896.641 768.477 c 1345.441
 794.301 m 1345.441 794.305 l 1328.508 745.531 1288.477 708.344 1238.594
 695.039 c 1200.289 685.137 1159.648 690.297 1125.035 709.461 c 1090.426
 728.625 1064.48 760.328 1052.543 798.047 c 1044.625 827.391 1044.164 858.242
 1051.199 887.809 c 1062.879 926.152 1088.828 958.551 1123.695 978.324 c
 1158.562 998.098 1199.688 1003.738 1238.594 994.078 c 1287.555 981.023 
1325.762 945.695 1345.152 895.391 c 1355.711 868.031 1356 824.16 1345.441
 794.301 c 356.16 318.434 m 336.191 322.273 305.664 337.539 289.441 351.84
 c 256.035 380.734 239.52 421.824 242.016 470.113 c 243.262 495.266 244.895
 501.984 255.07 522.336 c 269.949 553.152 292.512 575.711 323.422 590.977
 c 344.734 601.535 350.109 602.785 377.855 603.746 c 402.91 604.707 411.84
 603.746 428.734 597.984 c 497.758 574.754 539.422 507.746 527.613 439.008
 c 513.98 357.215 436.414 302.496 356.156 318.434 c f
328.801 5.09 m 254.184 18.297 184.895 52.559 129.105 103.84 c 73.316 155.121
 33.352 221.285 13.922 294.527 c 0 348.289 -0.961 379.777 0.48 796.801 c
 1.441 1179.84 1.824 1188.672 8.16 1218.242 c 43.488 1377.602 156.77 1491.266
 317.664 1528.801 c 338.785 1533.602 365.375 1534.562 537.504 1535.52 c 
715.68 1536.672 734.113 1536.383 738.816 1531.68 c 743.617 1526.879 743.906
 1465.441 743.906 769.441 c 743.906 253.539 742.945 10.465 740.738 6.051
 c 737.57 0.289 732.098 0.004 545.859 0.289 c 394.371 0.672 348.867 1.633
 328.898 5.09 c h
616.801 1412.93 m 487.199 1411.395 l 367.969 1410.148 355.199 1409.473 
331.391 1403.426 c 281.836 1391.191 236.77 1365.152 201.422 1328.328 c 166.078
 1291.504 141.906 1245.406 131.711 1195.391 c 124.605 1163.23 124.605 371.805
 131.328 340.32 c 140.602 296.547 160.469 255.715 189.188 221.406 c 217.91
 187.094 254.605 160.352 296.062 143.52 c 338.109 126.625 357.504 124.703
 493.629 124.32 c 616.699 124.031 l 616.699 1412.926 l h
616.801 1412.93 m f
Q Q
showpage
%%Trailer
%%EOF
