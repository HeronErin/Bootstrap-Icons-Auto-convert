%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:19 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
224.16 192.121 m 224.16 87 224.398 0.793 224.711 0.555 c 224.953 0.238 
240.863 0 259.945 0 c 287.617 0 296.184 0.238 301.777 1.199 c 343.297 8.352
 374.855 39.598 382.73 81.023 c 383.836 86.832 384.004 100.438 384.004 191.664
 c 384.004 289.105 384.125 300.551 381.051 311.09 c 380.523 312.914 379.898
 314.691 379.129 316.898 c 379.129 316.895 l 373.059 334.578 362.125 350.191
 347.578 361.941 c 333.035 373.688 315.469 381.094 296.902 383.305 c 289.293
 384.098 227.566 384.41 225.43 383.617 c 224.23 383.137 224.156 365.57 224.156
 192.121 c 336.355 198.578 m 336.359 198.574 l 332.129 186.383 322.117 177.086
 309.648 173.762 c 300.074 171.285 289.91 172.574 281.258 177.363 c 272.605
 182.156 266.121 190.082 263.137 199.512 c 261.156 206.848 261.039 214.562
 262.801 221.953 c 265.719 231.539 272.207 239.637 280.926 244.582 c 289.641
 249.523 299.922 250.934 309.648 248.52 c 321.887 245.254 331.441 236.422
 336.289 223.848 c 338.93 217.008 339 206.039 336.359 198.574 c 89.039 79.609
 m 84.047 80.57 76.414 84.387 72.359 87.961 c 64.008 95.184 59.879 105.457
 60.504 117.527 c 60.816 123.816 61.223 125.496 63.77 130.582 c 67.488 138.285
 73.129 143.926 80.859 147.742 c 86.188 150.383 87.531 150.695 94.469 150.934
 c 100.734 151.172 102.965 150.934 107.188 149.492 c 124.445 143.684 134.859
 126.934 131.906 109.75 c 128.5 89.301 109.105 75.621 89.043 79.605 c f
82.199 1.273 m 63.547 4.574 46.223 13.141 32.277 25.961 c 18.328 38.781
 8.34 55.32 3.48 73.633 c 0 87.07 -0.238 94.945 0.121 199.199 c 0.359 294.961
 0.457 297.168 2.043 304.559 c 10.875 344.398 39.195 372.816 79.418 382.199
 c 84.699 383.398 91.348 383.641 134.379 383.879 c 178.922 384.168 183.531
 384.094 184.707 382.918 c 185.906 381.719 185.98 366.359 185.98 192.359
 c 185.98 63.383 185.742 2.617 185.188 1.512 c 184.395 0.07 183.027 0 136.469
 0.07 c 98.598 0.168 87.223 0.406 82.23 1.27 c h
154.199 353.234 m 121.801 352.852 l 91.992 352.539 88.801 352.371 82.848
 350.859 c 82.848 350.855 l 70.461 347.797 59.191 341.289 50.355 332.082
 c 41.52 322.875 35.477 311.352 32.93 298.848 c 31.152 290.809 31.152 92.953
 32.832 85.078 c 37.539 62.859 52.969 44.426 74.016 35.879 c 84.527 31.656
 89.375 31.176 123.406 31.078 c 154.176 31.008 l 154.176 353.23 l h
154.199 353.234 m f
Q Q
showpage
%%Trailer
%%EOF
