%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 71 96 312 312
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 71 96 312 312
384 384 cairo_set_page_size
%%EndPageSetup
q 71 96 241 216 rectclip
1 0 0 -1 0 384 cm q
0 g
288 288 m 294.363 288 300.469 285.473 304.969 280.969 c 309.473 276.469
 312 270.363 312 264 c 312 205.391 l 312 199.027 309.473 192.922 304.969
 188.422 c 300.469 183.922 294.363 181.391 288 181.391 c 254.688 181.391
 l 254.688 172.957 255.184 164.527 256.176 156.094 c 257.664 147.164 260.145
 139.23 263.617 132.285 c 267.09 125.34 271.562 119.879 277.031 115.895 
c 282.473 111.43 289.414 109.199 297.863 109.199 c 297.863 72 l 283.977 
72 271.816 74.977 261.383 80.93 c 251.023 86.805 242.125 94.941 235.344 
104.734 c 228.52 115.516 223.492 127.336 220.465 139.727 c 217.402 153.402
 215.902 167.379 216 181.391 c 216 264 l 216 270.363 218.527 276.469 223.031
 280.969 c 227.531 285.473 233.637 288 240 288 c h
144 288 m 150.363 288 156.469 285.473 160.969 280.969 c 165.473 276.469
 168 270.363 168 264 c 168 205.391 l 168 199.027 165.473 192.922 160.969
 188.422 c 156.469 183.922 150.363 181.391 144 181.391 c 110.688 181.391
 l 110.688 172.957 111.184 164.527 112.176 156.094 c 113.68 147.164 116.16
 139.23 119.617 132.285 c 123.09 125.34 127.562 119.879 133.031 115.895 
c 138.473 111.43 145.414 109.199 153.863 109.199 c 153.863 72 l 139.977 
72 127.816 74.977 117.383 80.93 c 107.023 86.805 98.125 94.941 91.344 104.734
 c 84.52 115.516 79.492 127.336 76.465 139.727 c 73.402 153.402 71.902 167.379
 72 181.391 c 72 264 l 72 270.363 74.527 276.469 79.031 280.969 c 83.531
 285.473 89.637 288 96 288 c h
144 288 m f
Q Q
showpage
%%Trailer
%%EOF
