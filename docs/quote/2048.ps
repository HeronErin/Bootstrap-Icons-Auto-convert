%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:43 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 287 384 1248 1248
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 287 384 1248 1248
1536 1536 cairo_set_page_size
%%EndPageSetup
q 287 384 961 864 rectclip
1 0 0 -1 0 1536 cm q
0 g
1152 1152 m 1177.461 1152 1201.879 1141.887 1219.883 1123.883 c 1237.887
 1105.879 1248 1081.461 1248 1056 c 1248 821.566 l 1248 796.105 1237.887
 771.688 1219.883 753.688 c 1201.879 735.684 1177.461 725.566 1152 725.566
 c 1018.754 725.566 l 1018.754 691.84 1020.738 658.109 1024.707 624.383 
c 1030.66 588.672 1040.578 556.926 1054.469 529.152 c 1068.355 501.375 1086.246
 479.52 1108.133 463.586 c 1129.895 445.73 1157.668 436.801 1191.461 436.801
 c 1191.457 288 l 1135.906 288 1087.266 299.902 1045.535 323.711 c 1004.098
 347.219 968.492 379.773 941.375 418.945 c 914.074 462.062 893.973 509.336
 881.855 558.91 c 869.605 613.605 863.613 669.52 864 725.566 c 864 1056 
l 864 1081.461 874.113 1105.879 892.117 1123.883 c 910.121 1141.887 934.539
 1152 960 1152 c h
576 1152 m 601.461 1152 625.879 1141.887 643.883 1123.883 c 661.887 1105.879
 672 1081.461 672 1056 c 672 821.566 l 672 796.105 661.887 771.688 643.883
 753.688 c 625.879 735.684 601.461 725.566 576 725.566 c 442.754 725.566
 l 442.754 691.84 444.738 658.109 448.707 624.383 c 454.723 588.672 464.645
 556.926 478.469 529.152 c 492.355 501.375 510.246 479.52 532.133 463.586
 c 553.895 445.73 581.668 436.801 615.461 436.801 c 615.457 288 l 559.906
 288 511.266 299.902 469.535 323.711 c 428.098 347.219 392.492 379.773 365.375
 418.945 c 338.074 462.062 317.973 509.336 305.855 558.91 c 293.605 613.605
 287.613 669.52 288 725.566 c 288 1056 l 288 1081.461 298.113 1105.879 316.117
 1123.883 c 334.121 1141.887 358.539 1152 384 1152 c h
576 1152 m f
Q Q
showpage
%%Trailer
%%EOF
