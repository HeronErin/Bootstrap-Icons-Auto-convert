%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:42 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
1392 288 m 1404.73 288 1416.938 293.059 1425.941 302.059 c 1434.941 311.062
 1440 323.27 1440 336 c 1440 1200 l 1440 1212.73 1434.941 1224.938 1425.941
 1233.941 c 1416.938 1242.941 1404.73 1248 1392 1248 c 144 1248 l 131.27
 1248 119.062 1242.941 110.059 1233.941 c 101.059 1224.938 96 1212.73 96
 1200 c 96 336 l 96 323.27 101.059 311.062 110.059 302.059 c 119.062 293.059
 131.27 288 144 288 c h
144 192 m 105.809 192 69.184 207.172 42.176 234.176 c 15.172 261.184 0 
297.809 0 336 c 0 1200 l 0 1238.191 15.172 1274.816 42.176 1301.824 c 69.184
 1328.828 105.809 1344 144 1344 c 1392 1344 l 1430.191 1344 1466.816 1328.828
 1493.824 1301.824 c 1520.828 1274.816 1536 1238.191 1536 1200 c 1536 336
 l 1536 297.809 1520.828 261.184 1493.824 234.176 c 1466.816 207.172 1430.191
 192 1392 192 c h
144 192 m f
672 528 m 672 515.27 677.059 503.062 686.059 494.059 c 695.062 485.059 
707.27 480 720 480 c 1200 480 l 1217.148 480 1232.996 489.148 1241.57 504
 c 1250.145 518.852 1250.145 537.148 1241.57 552 c 1232.996 566.852 1217.148
 576 1200 576 c 720 576 l 707.27 576 695.062 570.941 686.059 561.941 c 677.059
 552.938 672 540.73 672 528 c 528.383 446.016 m 537.41 455.02 542.484 467.25
 542.484 480 c 542.484 492.75 537.41 504.98 528.383 513.984 c 384.383 657.984
 l 375.379 667.012 363.152 672.086 350.398 672.086 c 337.648 672.086 325.422
 667.012 316.414 657.984 c 268.414 609.984 l 256.273 597.844 251.531 580.145
 255.977 563.562 c 260.422 546.977 273.375 534.02 289.961 529.578 c 306.547
 525.133 324.242 529.875 336.383 542.016 c 350.398 556.129 l 460.414 446.016
 l 469.422 436.988 481.648 431.914 494.398 431.914 c 507.152 431.914 519.379
 436.988 528.383 446.016 c 672 912 m 672 899.27 677.059 887.062 686.059 
878.059 c 695.062 869.059 707.27 864 720 864 c 1200 864 l 1217.148 864 1232.996
 873.148 1241.57 888 c 1250.145 902.852 1250.145 921.148 1241.57 936 c 1232.996
 950.852 1217.148 960 1200 960 c 720 960 l 707.27 960 695.062 954.941 686.059
 945.941 c 677.059 936.938 672 924.73 672 912 c 528.383 830.016 m 537.41
 839.02 542.484 851.25 542.484 864 c 542.484 876.75 537.41 888.98 528.383
 897.984 c 384.383 1041.984 l 375.379 1051.012 363.152 1056.086 350.398 
1056.086 c 337.648 1056.086 325.422 1051.012 316.414 1041.984 c 268.414 
993.984 l 256.273 981.844 251.531 964.145 255.977 947.562 c 260.422 930.977
 273.375 918.02 289.961 913.578 c 306.547 909.133 324.242 913.875 336.383
 926.016 c 350.398 940.129 l 460.414 830.016 l 469.422 820.988 481.648 815.914
 494.398 815.914 c 507.152 815.914 519.379 820.988 528.383 830.016 c f
Q Q
showpage
%%Trailer
%%EOF
