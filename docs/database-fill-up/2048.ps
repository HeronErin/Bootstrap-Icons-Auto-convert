%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:31 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1536 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1536 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1344 1440 rectclip
1 0 0 -1 0 1536 cm q
0 g
1200 1536 m 1289.113 1536 1374.574 1500.602 1437.586 1437.586 c 1500.602
 1374.574 1536 1289.113 1536 1200 c 1536 1110.887 1500.602 1025.426 1437.586
 962.414 c 1374.574 899.398 1289.113 864 1200 864 c 1110.887 864 1025.426
 899.398 962.414 962.414 c 899.398 1025.426 864 1110.887 864 1200 c 864 
1289.113 899.398 1374.574 962.414 1437.586 c 1025.426 1500.602 1110.887 
1536 1200 1536 c 1233.984 974.016 m 1377.984 1118.016 l 1390.125 1130.156
 1394.867 1147.855 1390.422 1164.438 c 1385.98 1181.023 1373.023 1193.98
 1356.438 1198.422 c 1339.855 1202.867 1322.156 1198.125 1310.016 1185.984
 c 1248 1123.871 l 1248 1392 l 1248 1409.148 1238.852 1424.996 1224 1433.57
 c 1209.148 1442.145 1190.852 1442.145 1176 1433.57 c 1161.148 1424.996 
1152 1409.148 1152 1392 c 1152 1123.871 l 1089.984 1185.984 l 1077.844 1198.125
 1060.145 1202.867 1043.562 1198.422 c 1026.977 1193.98 1014.02 1181.023
 1009.578 1164.438 c 1005.133 1147.855 1009.875 1130.156 1022.016 1118.016
 c 1166.016 974.016 l 1175.02 964.988 1187.25 959.914 1200 959.914 c 1212.75
 959.914 1224.98 964.988 1233.984 974.016 c 768 96 m 616.992 96 477.887 
123.742 374.785 170.594 c 276 215.52 192 287.328 192 384 c 192 480.672 276
 552.48 374.785 597.406 c 477.887 644.258 616.992 672 768 672 c 919.008 
672 1058.113 644.258 1161.215 597.406 c 1260 552.48 1344 480.672 1344 384
 c 1344 287.328 1260 215.52 1161.215 170.594 c 1058.113 123.742 919.008 
96 768 96 c f
192 672 m 192 591.457 l 235.871 632.93 288.383 663.555 335.039 684.77 c
 453.312 738.527 606.527 768 768 768 c 929.473 768 1082.688 738.527 1200.961
 684.77 c 1247.617 663.648 1300.129 632.93 1344 591.457 c 1344 672 l 1344
 712.703 1329.121 748.992 1304.543 780.77 c 1218.648 759.484 1128.293 765.035
 1045.648 796.668 c 963.004 828.301 892.035 884.5 842.305 957.695 c 817.566
 959.262 792.785 960.031 768 960 c 616.992 960 477.887 932.258 374.785 885.406
 c 276 840.48 192 768.672 192 672 c 792.672 1055.809 m 768 1056 l 606.527
 1056 453.312 1026.527 335.039 972.77 c 288.383 951.648 235.871 920.93 192
 879.457 c 192 960 l 192 1056.672 276 1128.48 374.785 1173.406 c 477.887
 1220.258 616.992 1248 768 1248 c 770.594 1248 l 763.496 1183.09 771.039
 1117.418 792.672 1055.809 c 792.48 1343.809 m 768 1344 l 606.527 1344 453.312
 1314.527 335.039 1260.77 c 288.383 1239.648 235.871 1208.93 192 1167.457
 c 192 1248 l 192 1344.672 276 1416.48 374.785 1461.406 c 477.887 1508.258
 616.992 1536 768 1536 c 819.457 1536 869.566 1532.734 917.281 1526.688 
c 860.5 1477.605 817.488 1414.574 792.48 1343.809 c f
Q Q
showpage
%%Trailer
%%EOF
