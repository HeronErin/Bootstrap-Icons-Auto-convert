%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:30 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
228 192 m 218.453 192 209.297 195.793 202.543 202.543 c 195.793 209.297
 192 218.453 192 228 c 192 396 l 192 415.871 208.129 432 228 432 c 540 432
 l 549.547 432 558.703 428.207 565.457 421.457 c 572.207 414.703 576 405.547
 576 396 c 576 228 l 576 218.453 572.207 209.297 565.457 202.543 c 558.703
 195.793 549.547 192 540 192 c h
240 384 m 240 240 l 528 240 l 528 384 l h
240 120 m 240 128.574 235.426 136.496 228 140.785 c 220.574 145.07 211.426
 145.07 204 140.785 c 196.574 136.496 192 128.574 192 120 c 192 111.426 
196.574 103.504 204 99.215 c 211.426 94.93 220.574 94.93 228 99.215 c 235.426
 103.504 240 111.426 240 120 c 576 120 m 576 128.574 571.426 136.496 564
 140.785 c 556.574 145.07 547.426 145.07 540 140.785 c 532.574 136.496 528
 128.574 528 120 c 528 111.426 532.574 103.504 540 99.215 c 547.426 94.93
 556.574 94.93 564 99.215 c 571.426 103.504 576 111.426 576 120 c 216 528
 m 224.574 528 232.496 523.426 236.785 516 c 241.07 508.574 241.07 499.426
 236.785 492 c 232.496 484.574 224.574 480 216 480 c 207.426 480 199.504
 484.574 195.215 492 c 190.93 499.426 190.93 508.574 195.215 516 c 199.504
 523.426 207.426 528 216 528 c 552 528 m 560.574 528 568.496 523.426 572.785
 516 c 577.07 508.574 577.07 499.426 572.785 492 c 568.496 484.574 560.574
 480 552 480 c 543.426 480 535.504 484.574 531.215 492 c 526.93 499.426 
526.93 508.574 531.215 516 c 535.504 523.426 543.426 528 552 528 c f
96 96 m 96 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539
 0 192 0 c 576 0 l 601.461 0 625.879 10.113 643.883 28.117 c 661.887 46.121
 672 70.539 672 96 c 672 672 l 672 697.461 661.887 721.879 643.883 739.883
 c 625.879 757.887 601.461 768 576 768 c 192 768 l 166.539 768 142.121 757.887
 124.117 739.883 c 106.113 721.879 96 697.461 96 672 c h
624 672 m 624 96 l 624 83.27 618.941 71.062 609.941 62.059 c 600.938 53.059
 588.73 48 576 48 c 192 48 l 179.27 48 167.062 53.059 158.059 62.059 c 149.059
 71.062 144 83.27 144 96 c 144 672 l 144 684.73 149.059 696.938 158.059 
705.941 c 167.062 714.941 179.27 720 192 720 c 192 624 l 192 611.27 197.059
 599.062 206.059 590.059 c 215.062 581.059 227.27 576 240 576 c 528 576 
l 540.73 576 552.938 581.059 561.941 590.059 c 570.941 599.062 576 611.27
 576 624 c 576 720 l 588.73 720 600.938 714.941 609.941 705.941 c 618.941
 696.938 624 684.73 624 672 c 276 720 m 276 624 l 240 624 l 240 720 l h
360 720 m 360 624 l 324 624 l 324 720 l h
444 720 m 444 624 l 408 624 l 408 720 l h
528 624 m 492 624 l 492 720 l 528 720 l h
528 624 m f
Q Q
showpage
%%Trailer
%%EOF
