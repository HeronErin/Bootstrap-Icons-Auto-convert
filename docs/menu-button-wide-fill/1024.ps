%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:28 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 720 rectclip
1 0 0 -1 0 768 cm q
0 g
72 0 m 52.906 0 34.59 7.586 21.09 21.09 c 7.586 34.59 0 52.906 0 72 c 0
 168 l 0 187.094 7.586 205.41 21.09 218.91 c 34.59 232.414 52.906 240 72
 240 c 696 240 l 715.094 240 733.41 232.414 746.91 218.91 c 760.414 205.41
 768 187.094 768 168 c 768 72 l 768 52.906 760.414 34.59 746.91 21.09 c 
733.41 7.586 715.094 0 696 0 c h
120 96 m 264 96 l 272.574 96 280.496 100.574 284.785 108 c 289.07 115.426
 289.07 124.574 284.785 132 c 280.496 139.426 272.574 144 264 144 c 120 
144 l 111.426 144 103.504 139.426 99.215 132 c 94.93 124.574 94.93 115.426
 99.215 108 c 103.504 100.574 111.426 96 120 96 c 596.496 116.496 m 593.055
 113.062 592.023 107.895 593.887 103.406 c 595.746 98.914 600.133 95.992
 604.992 96 c 643.008 96 l 647.867 95.992 652.254 98.914 654.113 103.406
 c 655.977 107.895 654.945 113.062 651.504 116.496 c 632.496 135.504 l 630.246
 137.762 627.188 139.031 624 139.031 c 620.812 139.031 617.754 137.762 615.504
 135.504 c h
0 384 m 0 358.539 10.113 334.121 28.117 316.117 c 46.121 298.113 70.539
 288 96 288 c 672 288 l 697.461 288 721.879 298.113 739.883 316.117 c 757.887
 334.121 768 358.539 768 384 c 768 624 l 768 649.461 757.887 673.879 739.883
 691.883 c 721.879 709.887 697.461 720 672 720 c 96 720 l 70.539 720 46.121
 709.887 28.117 691.883 c 10.113 673.879 0 649.461 0 624 c h
48 528 m 48 624 l 48 636.73 53.059 648.938 62.059 657.941 c 71.062 666.941
 83.27 672 96 672 c 672 672 l 684.73 672 696.938 666.941 705.941 657.941
 c 714.941 648.938 720 636.73 720 624 c 720 528 l h
720 480 m 720 384 l 720 371.27 714.941 359.062 705.941 350.059 c 696.938
 341.059 684.73 336 672 336 c 96 336 l 83.27 336 71.062 341.059 62.059 350.059
 c 53.059 359.062 48 371.27 48 384 c 48 480 l h
96 408 m 96 401.637 98.527 395.531 103.031 391.031 c 107.531 386.527 113.637
 384 120 384 c 552 384 l 560.574 384 568.496 388.574 572.785 396 c 577.07
 403.426 577.07 412.574 572.785 420 c 568.496 427.426 560.574 432 552 432
 c 120 432 l 113.637 432 107.531 429.473 103.031 424.969 c 98.527 420.469
 96 414.363 96 408 c 96 600 m 96 593.637 98.527 587.531 103.031 583.031 
c 107.531 578.527 113.637 576 120 576 c 408 576 l 416.574 576 424.496 580.574
 428.785 588 c 433.07 595.426 433.07 604.574 428.785 612 c 424.496 619.426
 416.574 624 408 624 c 120 624 l 113.637 624 107.531 621.473 103.031 616.969
 c 98.527 612.469 96 606.363 96 600 c f
Q Q
showpage
%%Trailer
%%EOF
