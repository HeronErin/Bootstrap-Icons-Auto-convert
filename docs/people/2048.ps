%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
1440 1344 m 1440 1344 1536 1344 1536 1248 c 1536 1152 1440 864 1056 864
 c 672 864 576 1152 576 1248 c 576 1344 672 1344 672 1344 c h
674.113 1248 m 672 1247.617 l 672.098 1222.273 688.031 1148.738 744.961
 1082.496 c 797.953 1020.383 891.07 960 1056 960 c 1220.832 960 1313.953
 1020.48 1367.039 1082.496 c 1423.969 1148.734 1439.809 1222.367 1440 1247.617
 c 1439.23 1247.809 l 1437.887 1248 l h
1056 672 m 1106.922 672 1155.758 651.773 1191.766 615.766 c 1227.773 579.758
 1248 530.922 1248 480 c 1248 429.078 1227.773 380.242 1191.766 344.234 
c 1155.758 308.227 1106.922 288 1056 288 c 1005.078 288 956.242 308.227 
920.234 344.234 c 884.227 380.242 864 429.078 864 480 c 864 530.922 884.227
 579.758 920.234 615.766 c 956.242 651.773 1005.078 672 1056 672 c 1344 
480 m 1344 556.383 1313.656 629.637 1259.648 683.648 c 1205.637 737.656 
1132.383 768 1056 768 c 979.617 768 906.363 737.656 852.352 683.648 c 798.344
 629.637 768 556.383 768 480 c 768 403.617 798.344 330.363 852.352 276.352
 c 906.363 222.344 979.617 192 1056 192 c 1132.383 192 1205.637 222.344 
1259.648 276.352 c 1313.656 330.363 1344 403.617 1344 480 c 665.855 890.879
 m 627.434 878.871 587.855 870.926 547.777 867.168 c 525.25 864.973 502.633
 863.914 480 864 c 96 864 0 1152 0 1248 c 0 1312 32 1344 96 1344 c 500.734
 1344 l 486.512 1314.027 479.414 1281.172 480 1248 c 480 1151.039 516.191
 1051.969 584.641 969.215 c 607.969 940.992 635.137 914.59 665.855 890.879
 c 472.32 960 m 415.539 1045.387 384.848 1145.461 384 1248 c 96 1248 l 96
 1223.039 111.742 1149.121 168.961 1082.496 c 221.281 1021.441 312.191 961.922
 472.32 960.098 c h
144 528 m 144 451.617 174.344 378.363 228.352 324.352 c 282.363 270.344
 355.617 240 432 240 c 508.383 240 581.637 270.344 635.648 324.352 c 689.656
 378.363 720 451.617 720 528 c 720 604.383 689.656 677.637 635.648 731.648
 c 581.637 785.656 508.383 816 432 816 c 355.617 816 282.363 785.656 228.352
 731.648 c 174.344 677.637 144 604.383 144 528 c 432 336 m 381.078 336 332.242
 356.227 296.234 392.234 c 260.227 428.242 240 477.078 240 528 c 240 578.922
 260.227 627.758 296.234 663.766 c 332.242 699.773 381.078 720 432 720 c
 482.922 720 531.758 699.773 567.766 663.766 c 603.773 627.758 624 578.922
 624 528 c 624 477.078 603.773 428.242 567.766 392.234 c 531.758 356.227
 482.922 336 432 336 c f
Q Q
showpage
%%Trailer
%%EOF
