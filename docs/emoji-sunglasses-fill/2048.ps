%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 1536 m 971.688 1536 1167.031 1455.086 1311.059 1311.059 c 1455.086 
1167.031 1536 971.688 1536 768 c 1536 564.312 1455.086 368.969 1311.059 
224.941 c 1167.031 80.914 971.688 0 768 0 c 564.312 0 368.969 80.914 224.941
 224.941 c 80.914 368.969 0 564.312 0 768 c 0 971.688 80.914 1167.031 224.941
 1311.059 c 368.969 1455.086 564.312 1536 768 1536 c 221.762 503.328 m 214.574
 474.645 221.008 444.25 239.199 420.941 c 257.391 397.629 285.312 384 314.879
 384 c 576 384 l 601.461 384 625.879 394.113 643.883 412.117 c 661.887 430.121
 672 454.539 672 480 c 672 491.137 l 703.438 483.59 735.668 479.852 768 
480 c 801.602 480 834.238 483.84 864 491.137 c 864 480 l 864 454.539 874.113
 430.121 892.117 412.117 c 910.121 394.113 934.539 384 960 384 c 1221.121
 384 l 1250.688 384 1278.609 397.629 1296.801 420.941 c 1314.992 444.25 
1321.426 474.645 1314.238 503.328 c 1284.383 622.559 l 1274 664.098 1250.031
 700.973 1216.289 727.324 c 1182.543 753.676 1140.961 767.992 1098.145 768
 c 1056 768 l 1007.746 768.012 961.258 749.855 925.785 717.141 c 890.312
 684.426 868.461 639.555 864.574 591.457 c 833.5 580.836 800.836 575.609
 768 576 c 730.273 576 696.961 582.145 671.426 591.457 c 667.539 639.555
 645.688 684.426 610.215 717.141 c 574.742 749.855 528.254 768.012 480 768
 c 437.953 768 l 395.137 767.992 353.551 753.676 319.809 727.324 c 286.062
 700.973 262.094 664.098 251.711 622.559 c h
477.023 936 m 506.512 987.078 548.93 1029.492 600.004 1058.98 c 651.082
 1088.473 709.02 1104 768 1104 c 826.996 1104.016 884.953 1088.496 936.051
 1059.008 c 987.145 1029.516 1029.574 987.09 1059.07 936 c 1065.391 924.887
 1075.883 916.75 1088.223 913.402 c 1100.562 910.051 1113.727 911.762 1124.801
 918.156 c 1135.871 924.547 1143.938 935.094 1147.203 947.457 c 1150.473
 959.816 1148.676 972.969 1142.207 984 c 1104.285 1049.684 1049.738 1104.227
 984.047 1142.145 c 918.359 1180.062 843.848 1200.016 768 1200 c 692.152
 1200.016 617.641 1180.062 551.953 1142.145 c 486.262 1104.227 431.715 1049.684
 393.793 984 c 385.355 969.16 385.434 950.953 394.004 936.184 c 402.57 921.418
 418.34 912.312 435.414 912.277 c 452.484 912.238 468.293 921.27 476.93 
936 c h
477.023 936 m f
Q Q
showpage
%%Trailer
%%EOF
