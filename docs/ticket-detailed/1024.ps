%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 144 768 624
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 144 768 624
768 768 cairo_set_page_size
%%EndPageSetup
q 0 144 768 480 rectclip
1 0 0 -1 0 768 cm q
0 g
192 264 m 192 257.637 194.527 251.531 199.031 247.031 c 203.531 242.527
 209.637 240 216 240 c 552 240 l 560.574 240 568.496 244.574 572.785 252
 c 577.07 259.426 577.07 268.574 572.785 276 c 568.496 283.426 560.574 288
 552 288 c 216 288 l 209.637 288 203.531 285.473 199.031 280.969 c 194.527
 276.469 192 270.363 192 264 c 192 504 m 192 497.637 194.527 491.531 199.031
 487.031 c 203.531 482.527 209.637 480 216 480 c 552 480 l 560.574 480 568.496
 484.574 572.785 492 c 577.07 499.426 577.07 508.574 572.785 516 c 568.496
 523.426 560.574 528 552 528 c 216 528 l 209.637 528 203.531 525.473 199.031
 520.969 c 194.527 516.469 192 510.363 192 504 c 240 336 m 222.852 336 207.004
 345.148 198.43 360 c 189.855 374.852 189.855 393.148 198.43 408 c 207.004
 422.852 222.852 432 240 432 c 528 432 l 545.148 432 560.996 422.852 569.57
 408 c 578.145 393.148 578.145 374.852 569.57 360 c 560.996 345.148 545.148
 336 528 336 c h
240 336 m f
0 216 m 0 196.906 7.586 178.59 21.09 165.09 c 34.59 151.586 52.906 144 
72 144 c 696 144 l 715.094 144 733.41 151.586 746.91 165.09 c 760.414 178.59
 768 196.906 768 216 c 768 288 l 768 294.363 765.473 300.469 760.969 304.969
 c 756.469 309.473 750.363 312 744 312 c 718.277 312 694.508 325.723 681.645
 348 c 668.785 370.277 668.785 397.723 681.645 420 c 694.508 442.277 718.277
 456 744 456 c 750.363 456 756.469 458.527 760.969 463.031 c 765.473 467.531
 768 473.637 768 480 c 768 552 l 768 571.094 760.414 589.41 746.91 602.91
 c 733.41 616.414 715.094 624 696 624 c 72 624 l 52.906 624 34.59 616.414
 21.09 602.91 c 7.586 589.41 0 571.094 0 552 c 0 480 l 0 473.637 2.527 467.531
 7.031 463.031 c 11.531 458.527 17.637 456 24 456 c 49.723 456 73.492 442.277
 86.355 420 c 99.215 397.723 99.215 370.277 86.355 348 c 73.492 325.723 
49.723 312 24 312 c 17.637 312 11.531 309.473 7.031 304.969 c 2.527 300.469
 0 294.363 0 288 c h
72 192 m 65.637 192 59.531 194.527 55.031 199.031 c 50.527 203.531 48 209.637
 48 216 c 48 266.398 l 84.449 273.801 115.41 297.688 131.816 331.07 c 148.223
 364.449 148.223 403.551 131.816 436.93 c 115.41 470.312 84.449 494.199 
48 501.602 c 48 552 l 48 558.363 50.527 564.469 55.031 568.969 c 59.531 
573.473 65.637 576 72 576 c 696 576 l 702.363 576 708.469 573.473 712.969
 568.969 c 717.473 564.469 720 558.363 720 552 c 720 501.602 l 683.551 494.199
 652.59 470.312 636.184 436.93 c 619.777 403.551 619.777 364.449 636.184
 331.07 c 652.59 297.688 683.551 273.801 720 266.398 c 720 216 l 720 209.637
 717.473 203.531 712.969 199.031 c 708.469 194.527 702.363 192 696 192 c
 h
72 192 m f
Q Q
showpage
%%Trailer
%%EOF
