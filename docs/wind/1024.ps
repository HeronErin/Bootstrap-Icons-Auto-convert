%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
600 96 m 568.176 96 537.652 108.645 515.148 131.148 c 492.645 153.652 480
 184.176 480 216 c 480 224.574 475.426 232.496 468 236.785 c 460.574 241.07
 451.426 241.07 444 236.785 c 436.574 232.496 432 224.574 432 216 c 432 
171.445 449.699 128.711 481.207 97.207 c 512.711 65.699 555.445 48 600 48
 c 644.555 48 687.289 65.699 718.793 97.207 c 750.301 128.711 768 171.445
 768 216 c 768 260.555 750.301 303.289 718.793 334.793 c 687.289 366.301
 644.555 384 600 384 c 24 384 l 15.426 384 7.504 379.426 3.215 372 c -1.07
 364.574 -1.07 355.426 3.215 348 c 7.504 340.574 15.426 336 24 336 c 600
 336 l 642.871 336 682.488 313.129 703.922 276 c 725.359 238.871 725.359
 193.129 703.922 156 c 682.488 118.871 642.871 96 600 96 c 264 144 m 251.27
 144 239.062 149.059 230.059 158.059 c 221.059 167.062 216 179.27 216 192
 c 216 200.574 211.426 208.496 204 212.785 c 196.574 217.07 187.426 217.07
 180 212.785 c 172.574 208.496 168 200.574 168 192 c 168 166.539 178.113
 142.121 196.117 124.117 c 214.121 106.113 238.539 96 264 96 c 289.461 96
 313.879 106.113 331.883 124.117 c 349.887 142.121 360 166.539 360 192 c
 360 217.461 349.887 241.879 331.883 259.883 c 313.879 277.887 289.461 288
 264 288 c 24 288 l 15.426 288 7.504 283.426 3.215 276 c -1.07 268.574 -1.07
 259.426 3.215 252 c 7.504 244.574 15.426 240 24 240 c 264 240 l 281.148
 240 296.996 230.852 305.57 216 c 314.145 201.148 314.145 182.852 305.57
 168 c 296.996 153.148 281.148 144 264 144 c 0 456 m 0 449.637 2.527 443.531
 7.031 439.031 c 11.531 434.527 17.637 432 24 432 c 506.016 432 l 544.207
 432 580.836 447.172 607.84 474.176 c 634.844 501.184 650.016 537.809 650.016
 576 c 650.016 614.191 634.844 650.816 607.84 677.824 c 580.836 704.828 
544.207 720 506.016 720 c 467.824 720 431.199 704.828 404.191 677.824 c 
377.188 650.816 362.016 614.191 362.016 576 c 362.016 567.426 366.59 559.504
 374.016 555.215 c 381.441 550.93 390.59 550.93 398.016 555.215 c 405.441
 559.504 410.016 567.426 410.016 576 c 410.016 601.461 420.129 625.879 438.133
 643.883 c 456.137 661.887 480.555 672 506.016 672 c 531.477 672 555.895
 661.887 573.898 643.883 c 591.902 625.879 602.016 601.461 602.016 576 c
 602.016 550.539 591.902 526.121 573.898 508.117 c 555.895 490.113 531.477
 480 506.016 480 c 24 480 l 17.637 480 11.531 477.473 7.031 472.969 c 2.527
 468.469 0 462.363 0 456 c f
Q Q
showpage
%%Trailer
%%EOF
