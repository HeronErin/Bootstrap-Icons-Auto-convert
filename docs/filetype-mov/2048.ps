%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:14 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1344 l 1344 1377.703 1335.129 1410.812 1318.277 1440 c 
1301.426 1469.188 1277.188 1493.426 1248 1510.277 c 1218.812 1527.129 1185.703
 1536 1152 1536 c 1152 1440 l 1177.461 1440 1201.879 1429.887 1219.883 1411.883
 c 1237.887 1393.879 1248 1369.461 1248 1344 c 1248 432 l 1056 432 l 1017.809
 432 981.184 416.828 954.176 389.824 c 927.172 362.816 912 326.191 912 288
 c 912 96 l 384 96 l 358.539 96 334.121 106.113 316.117 124.117 c 298.113
 142.121 288 166.539 288 192 c 288 1056 l 192 1056 l 192 192 l 192 141.078
 212.227 92.242 248.234 56.234 c 284.242 20.227 333.078 0 384 0 c 912 0 
l h
680.258 1311.938 m 680.258 1362.051 l 680.258 1386.625 676.516 1407.141
 669.027 1423.586 c 669.023 1423.586 l 662.633 1438.789 651.832 1451.727
 638.016 1460.734 c 624.43 1468.801 608.887 1472.984 593.09 1472.832 c 577.156
 1473.055 561.477 1468.867 547.777 1460.734 c 534.121 1451.668 523.438 1438.777
 517.055 1423.68 c 508.98 1404.164 505.152 1383.156 505.824 1362.047 c 505.824
 1311.934 l 505.824 1287.23 509.602 1266.719 517.152 1250.398 c 523.492 
1235.277 534.141 1222.359 547.777 1213.246 c 561.383 1204.871 577.109 1200.57
 593.09 1200.863 c 609.922 1200.863 624.898 1205.023 638.02 1213.344 c 638.016
 1213.344 l 651.816 1222.328 662.613 1235.23 669.023 1250.398 c 676.512 
1266.719 680.254 1287.23 680.254 1311.934 c 757.246 1361.758 m 757.246 1312.512
 l 757.246 1276.352 750.688 1245.246 737.566 1219.199 c 725.266 1193.82 
705.594 1172.742 681.121 1158.719 c 656.738 1144.641 627.395 1137.598 593.09
 1137.598 c 558.914 1137.598 529.473 1144.637 504.77 1158.719 c 480.191 
1172.539 460.43 1193.543 448.129 1218.91 c 435.074 1244.895 428.543 1276.094
 428.543 1312.512 c 428.543 1361.758 l 428.543 1397.789 435.102 1428.926
 448.223 1455.164 c 461.344 1481.148 480.191 1501.211 504.766 1515.355 c
 529.469 1529.18 558.91 1536.09 593.086 1536.09 c 627.391 1536.09 656.734
 1529.18 681.117 1515.355 c 705.629 1501.277 724.445 1481.211 737.566 1455.164
 c 750.688 1428.926 757.246 1397.789 757.246 1361.758 c 67.773 1528.797 
m 67.773 1273.438 l 71.422 1273.438 l 162.812 1480.797 l 212.348 1480.797
 l 303.164 1273.438 l 306.812 1273.438 l 306.812 1528.797 l 375.453 1528.797
 l 375.453 1144.895 l 298.652 1144.895 l 189.211 1394.109 l 186.715 1394.109
 l 77.273 1144.895 l 0 1144.895 l 0 1528.895 l h
983.613 1528.797 m 892.223 1528.797 l 763.582 1144.895 l 851.711 1144.895
 l 937.727 1446.141 l 941.375 1446.141 l 1026.621 1144.895 l 1111.004 1144.895
 l h
983.613 1528.797 m f*
Q Q
showpage
%%Trailer
%%EOF
