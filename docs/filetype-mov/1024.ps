%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 576 720 l 588.73 720 600.938 714.941 609.941
 705.941 c 618.941 696.938 624 684.73 624 672 c 624 216 l 528 216 l 508.906
 216 490.59 208.414 477.09 194.91 c 463.586 181.41 456 163.094 456 144 c
 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059 62.059 c 149.059 71.062
 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96 70.539 106.113 46.121 
124.117 28.117 c 142.121 10.113 166.539 0 192 0 c 456 0 l h
340.129 655.969 m 340.129 681.023 l 340.129 693.312 338.258 703.566 334.512
 711.793 c 331.316 719.395 325.914 725.863 319.008 730.367 c 312.215 734.398
 304.445 736.492 296.543 736.414 c 288.578 736.527 280.738 734.434 273.887
 730.367 c 267.062 725.832 261.719 719.391 258.527 711.84 c 254.492 702.082
 252.574 691.578 252.91 681.023 c 252.91 655.969 l 252.91 643.617 254.797
 633.359 258.574 625.199 c 261.746 617.641 267.07 611.18 273.887 606.625
 c 280.691 602.434 288.555 600.285 296.543 600.434 c 304.957 600.434 312.445
 602.512 319.008 606.672 c 325.906 611.164 331.309 617.617 334.512 625.199
 c 338.254 633.359 340.129 643.613 340.129 655.969 c 378.625 680.879 m 378.625
 656.254 l 378.625 638.176 375.344 622.621 368.785 609.598 c 368.785 609.602
 l 362.633 596.91 352.797 586.371 340.559 579.359 c 328.367 572.32 313.695
 568.801 296.543 568.801 c 279.453 568.801 264.734 572.32 252.383 579.359
 c 240.098 586.27 230.215 596.77 224.062 609.457 c 217.535 622.449 214.27
 638.051 214.27 656.258 c 214.27 680.883 l 214.27 698.898 217.551 714.469
 224.109 727.586 c 230.668 740.578 240.094 750.609 252.383 757.684 c 264.734
 764.594 279.453 768.051 296.543 768.051 c 313.695 768.051 328.367 764.594
 340.559 757.684 c 352.816 750.645 362.223 740.613 368.781 727.586 c 375.34
 714.465 378.621 698.898 378.621 680.883 c 33.887 764.402 m 33.887 636.723
 l 35.711 636.723 l 81.406 740.402 l 106.176 740.402 l 151.582 636.723 l
 153.406 636.723 l 153.406 764.402 l 187.727 764.402 l 187.727 572.449 l
 149.328 572.449 l 94.609 697.059 l 93.363 697.059 l 38.645 572.449 l 0 
572.449 l 0 764.449 l h
491.809 764.402 m 446.113 764.402 l 381.793 572.449 l 425.855 572.449 l
 468.863 723.074 l 470.688 723.074 l 513.312 572.449 l 555.504 572.449 l
 h
491.809 764.402 m f*
Q Q
showpage
%%Trailer
%%EOF
