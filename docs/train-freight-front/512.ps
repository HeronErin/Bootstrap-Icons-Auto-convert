%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 24 0 361 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 24 0 361 384
384 384 cairo_set_page_size
%%EndPageSetup
q 24 0 337 384 rectclip
1 0 0 -1 0 384 cm q
0 g
121.559 3.793 m 126.562 1.297 132.074 -0.004 137.664 0 c 246.336 0 l 251.918
 0 257.422 1.297 262.414 3.793 c 340.102 42.625 l 340.105 42.625 l 346.09
 45.613 351.121 50.207 354.641 55.898 c 358.16 61.586 360.023 68.145 360.023
 74.832 c 360.023 324 l 360.023 339.914 353.703 355.176 342.449 366.426 
c 331.199 377.68 315.938 384 300.023 384 c 84.023 384 l 68.105 384.008 52.84
 377.688 41.582 366.434 c 30.324 355.184 24 339.918 24 324 c 24 74.832 l
 23.996 68.148 25.852 61.594 29.363 55.906 c 32.871 50.219 37.895 45.617
 43.871 42.625 c h
48 224.93 m 48 324 l 48 333.547 51.793 342.703 58.543 349.457 c 65.297 
356.207 74.453 360 84 360 c 180 360 l 180 192 l 159.527 192 l 158.359 192
 157.191 192.168 156.07 192.504 c h
204 360 m 300 360 l 309.547 360 318.703 356.207 325.457 349.457 c 332.207
 342.703 336 333.547 336 324 c 336 224.93 l 227.93 192.531 l 227.93 192.527
 l 226.809 192.184 225.645 192.008 224.473 192 c 204 192 l h
336 199.871 m 336 74.832 l 336 70.289 333.438 66.137 329.375 64.105 c 251.711
 25.273 l 250.043 24.438 248.203 24 246.336 24 c 137.664 24 l 135.805 24.004
 133.973 24.438 132.312 25.273 c 54.648 64.078 l 50.57 66.113 47.996 70.277
 48 74.832 c 48 199.871 l 72 192.672 l 72 120 l 72 113.637 74.527 107.531
 79.031 103.031 c 83.531 98.527 89.637 96 96 96 c 288 96 l 294.363 96 300.469
 98.527 304.969 103.031 c 309.473 107.531 312 113.637 312 120 c 312 192.672
 l h
288 185.473 m 288 120 l 204 120 l 204 168 l 224.473 168 l 227.977 167.996
 231.461 168.508 234.816 169.512 c h
180 168 m 180 120 l 96 120 l 96 185.473 l 149.184 169.512 l 152.531 168.508
 156.008 168 159.504 168 c h
156 48 m 149.371 48 144 53.371 144 60 c 144 66.629 149.371 72 156 72 c 
228 72 l 234.629 72 240 66.629 240 60 c 240 53.371 234.629 48 228 48 c h
84 240 m 77.371 240 72 245.371 72 252 c 72 258.629 77.371 264 84 264 c 
90.629 264 96 258.629 96 252 c 96 245.371 90.629 240 84 240 c 300 240 m 
293.371 240 288 245.371 288 252 c 288 258.629 293.371 264 300 264 c 306.629
 264 312 258.629 312 252 c 312 245.371 306.629 240 300 240 c 120 312 m 120
 320.574 115.426 328.496 108 332.785 c 100.574 337.07 91.426 337.07 84 332.785
 c 76.574 328.496 72 320.574 72 312 c 72 303.426 76.574 295.504 84 291.215
 c 91.426 286.93 100.574 286.93 108 291.215 c 115.426 295.504 120 303.426
 120 312 c 288 336 m 296.574 336 304.496 331.426 308.785 324 c 313.07 316.574
 313.07 307.426 308.785 300 c 304.496 292.574 296.574 288 288 288 c 279.426
 288 271.504 292.574 267.215 300 c 262.93 307.426 262.93 316.574 267.215
 324 c 271.504 331.426 279.426 336 288 336 c f
Q Q
showpage
%%Trailer
%%EOF
