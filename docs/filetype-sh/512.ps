%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 336 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 336 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 336 384 rectclip
1 0 0 -1 0 384 cm q
0 g
336 108 m 336 336 l 336 348.73 330.941 360.938 321.941 369.941 c 312.938
 378.941 300.73 384 288 384 c 192 384 l 192 360 l 288 360 l 294.363 360 
300.469 357.473 304.969 352.969 c 309.473 348.469 312 342.363 312 336 c 
312 108 l 264 108 l 254.453 108 245.297 104.207 238.543 97.457 c 231.793
 90.703 228 81.547 228 72 c 228 24 l 96 24 l 89.637 24 83.531 26.527 79.031
 31.031 c 74.527 35.531 72 41.637 72 48 c 72 264 l 48 264 l 48 48 l 48 35.27
 53.059 23.062 62.059 14.059 c 71.062 5.059 83.27 0 96 0 c 228 0 l h
2.664 366.961 m 1.082 363.566 0.176 359.898 0 356.16 c 18.359 356.16 l 
19.039 359.945 21.254 363.281 24.48 365.375 c 26.16 366.543 28.152 367.453
 30.457 368.109 c 32.746 368.766 35.297 369.094 38.113 369.094 c 42.051 
369.094 45.352 368.535 48.023 367.414 c 50.473 366.5 52.598 364.891 54.145
 362.785 c 55.527 360.73 56.238 358.301 56.184 355.824 c 56.309 352.773 
54.938 349.852 52.512 348 c 50.098 346.078 46.398 344.535 41.422 343.367
 c 26.566 339.934 l 26.566 339.938 l 21.992 338.977 17.617 337.242 13.633
 334.801 c 10.113 332.637 7.211 329.605 5.207 325.992 c 3.199 322.109 2.184
 317.789 2.258 313.414 c 2.258 307.559 3.777 302.445 6.816 298.078 c 9.855
 293.727 14.082 290.352 19.488 287.949 c 24.863 285.551 31.074 284.355 38.113
 284.375 c 45.426 284.375 51.664 285.59 56.832 288.023 c 62.016 290.473 
66.016 293.75 68.832 297.863 c 71.711 301.941 73.312 306.473 73.633 311.449
 c 55.633 311.449 l 55.223 309.172 54.23 307.039 52.754 305.258 c 51.184
 303.32 49.141 301.824 46.824 300.91 c 44.02 299.75 41 299.195 37.969 299.281
 c 32.754 299.281 28.648 300.496 25.656 302.93 c 22.797 305.117 21.156 308.543
 21.238 312.145 c 21.238 315.023 22.383 317.426 24.672 319.344 c 27.559 
321.449 30.879 322.887 34.391 323.543 c 49.27 326.977 l 54.5 328.176 59.031
 329.863 62.855 332.039 c 66.695 334.215 69.695 337.078 71.855 340.633 c
 74.016 344.184 75.094 348.664 75.094 354.074 c 75.094 359.996 73.59 365.242
 70.582 369.816 c 70.586 369.816 l 67.406 374.527 62.906 378.191 57.648 
380.352 c 52.031 382.879 45.168 384.145 37.055 384.145 c 30.957 384.145 
25.641 383.426 21.094 381.984 c 21.098 381.984 l 16.914 380.73 13.02 378.68
 9.625 375.938 c 6.676 373.477 4.301 370.406 2.664 366.938 c h
162.742 286.367 m 162.742 382.367 l 143.781 382.367 l 143.781 341.207 l
 103.391 341.207 l 103.391 382.344 l 84.383 382.344 l 84.383 286.367 l 103.391
 286.367 l 103.391 325.391 l 143.762 325.391 l 143.762 286.367 l h
162.742 286.367 m f*
Q Q
showpage
%%Trailer
%%EOF
