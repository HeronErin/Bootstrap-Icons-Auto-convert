%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 384 768 l 384 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
5.328 733.922 m 2.164 727.133 0.355 719.797 0 712.32 c 36.719 712.32 l 
38.078 719.891 42.508 726.562 48.961 730.754 c 52.32 733.09 56.305 734.914
 60.914 736.227 c 65.488 737.539 70.594 738.195 76.227 738.195 c 84.098 
738.195 90.707 737.074 96.051 734.836 c 96.047 734.832 l 100.941 733 105.195
 729.781 108.289 725.566 c 111.051 721.461 112.477 716.598 112.367 711.648
 c 112.617 705.547 109.879 699.707 105.023 696 c 100.191 692.16 92.801 689.07
 82.848 686.734 c 53.137 679.871 l 43.988 677.957 35.234 674.48 27.266 669.602
 c 20.227 665.277 14.422 659.207 10.414 651.984 c 6.395 644.219 4.367 635.574
 4.512 626.832 c 4.512 615.121 7.551 604.895 13.633 596.16 c 19.711 587.457
 28.16 580.703 38.977 575.902 c 49.73 571.102 62.145 568.719 76.223 568.75
 c 90.848 568.75 103.328 571.184 113.664 576.047 c 124.031 580.941 132.031
 587.504 137.664 595.727 c 143.426 603.887 146.625 612.941 147.266 622.895
 c 111.266 622.895 l 110.441 618.34 108.457 614.074 105.504 610.512 c 102.371
 606.641 98.285 603.645 93.648 601.824 c 88.039 599.504 82.004 598.391 75.938
 598.559 c 65.504 598.559 57.297 600.992 51.312 605.855 c 45.594 610.238
 42.312 617.086 42.48 624.289 c 42.48 630.051 44.77 634.848 49.344 638.688
 c 55.117 642.898 61.758 645.77 68.785 647.09 c 98.547 653.953 l 109.012
 656.352 118.066 659.73 125.715 664.082 c 133.395 668.434 139.395 674.16
 143.715 681.266 c 148.035 688.371 150.195 697.328 150.195 708.145 c 150.195
 719.984 147.188 730.48 141.172 739.633 c 141.168 739.633 l 134.812 749.055
 125.809 756.387 115.297 760.703 c 104.066 765.758 90.336 768.289 74.113
 768.289 c 61.922 768.289 51.281 766.848 42.191 763.969 c 33.832 761.465
 26.039 757.355 19.246 751.871 c 13.355 746.953 8.605 740.812 5.328 733.871
 c h
325.488 572.738 m 325.488 764.738 l 287.566 764.738 l 287.566 682.418 l
 206.785 682.414 l 206.785 764.688 l 168.77 764.688 l 168.77 572.734 l 206.785
 572.734 l 206.785 650.781 l 287.52 650.785 l 287.52 572.738 l h
325.488 572.738 m f*
Q Q
showpage
%%Trailer
%%EOF
