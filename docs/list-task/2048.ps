%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 144 336 1440 1296
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 144 336 1440 1296
1536 1536 cairo_set_page_size
%%EndPageSetup
q 144 336 1296 960 rectclip
1 0 0 -1 0 1536 cm q
0 g
192 240 m 179.27 240 167.062 245.059 158.059 254.059 c 149.059 263.062 
144 275.27 144 288 c 144 384 l 144 396.73 149.059 408.938 158.059 417.941
 c 167.062 426.941 179.27 432 192 432 c 288 432 l 300.73 432 312.938 426.941
 321.941 417.941 c 330.941 408.938 336 396.73 336 384 c 336 288 l 336 275.27
 330.941 263.062 321.941 254.059 c 312.938 245.059 300.73 240 288 240 c 
h
288 288 m 192 288 l 192 384 l 288 384 l h
288 288 m f*
480 336 m 480 323.27 485.059 311.062 494.059 302.059 c 503.062 293.059 
515.27 288 528 288 c 1392 288 l 1409.148 288 1424.996 297.148 1433.57 312
 c 1442.145 326.852 1442.145 345.148 1433.57 360 c 1424.996 374.852 1409.148
 384 1392 384 c 528 384 l 515.27 384 503.062 378.941 494.059 369.941 c 485.059
 360.938 480 348.73 480 336 c 528 672 m 510.852 672 495.004 681.148 486.43
 696 c 477.855 710.852 477.855 729.148 486.43 744 c 495.004 758.852 510.852
 768 528 768 c 1392 768 l 1409.148 768 1424.996 758.852 1433.57 744 c 1442.145
 729.148 1442.145 710.852 1433.57 696 c 1424.996 681.148 1409.148 672 1392
 672 c h
528 1056 m 510.852 1056 495.004 1065.148 486.43 1080 c 477.855 1094.852
 477.855 1113.148 486.43 1128 c 495.004 1142.852 510.852 1152 528 1152 c
 1392 1152 l 1409.148 1152 1424.996 1142.852 1433.57 1128 c 1442.145 1113.148
 1442.145 1094.852 1433.57 1080 c 1424.996 1065.148 1409.148 1056 1392 1056
 c h
528 1056 m f
144 672 m 144 659.27 149.059 647.062 158.059 638.059 c 167.062 629.059 
179.27 624 192 624 c 288 624 l 300.73 624 312.938 629.059 321.941 638.059
 c 330.941 647.062 336 659.27 336 672 c 336 768 l 336 780.73 330.941 792.938
 321.941 801.941 c 312.938 810.941 300.73 816 288 816 c 192 816 l 179.27
 816 167.062 810.941 158.059 801.941 c 149.059 792.938 144 780.73 144 768
 c h
192 672 m 288 672 l 288 768 l 192 768 l h
192 1008 m 179.27 1008 167.062 1013.059 158.059 1022.059 c 149.059 1031.062
 144 1043.27 144 1056 c 144 1152 l 144 1164.73 149.059 1176.938 158.059 
1185.941 c 167.062 1194.941 179.27 1200 192 1200 c 288 1200 l 300.73 1200
 312.938 1194.941 321.941 1185.941 c 330.941 1176.938 336 1164.73 336 1152
 c 336 1056 l 336 1043.27 330.941 1031.062 321.941 1022.059 c 312.938 1013.059
 300.73 1008 288 1008 c h
288 1056 m 192 1056 l 192 1152 l 288 1152 l h
288 1056 m f*
Q Q
showpage
%%Trailer
%%EOF
