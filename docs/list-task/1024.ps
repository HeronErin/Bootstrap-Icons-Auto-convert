%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:59 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 72 168 720 648
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 72 168 720 648
768 768 cairo_set_page_size
%%EndPageSetup
q 72 168 648 480 rectclip
1 0 0 -1 0 768 cm q
0 g
96 120 m 89.637 120 83.531 122.527 79.031 127.031 c 74.527 131.531 72 137.637
 72 144 c 72 192 l 72 198.363 74.527 204.469 79.031 208.969 c 83.531 213.473
 89.637 216 96 216 c 144 216 l 150.363 216 156.469 213.473 160.969 208.969
 c 165.473 204.469 168 198.363 168 192 c 168 144 l 168 137.637 165.473 131.531
 160.969 127.031 c 156.469 122.527 150.363 120 144 120 c h
144 144 m 96 144 l 96 192 l 144 192 l h
144 144 m f*
240 168 m 240 161.637 242.527 155.531 247.031 151.031 c 251.531 146.527
 257.637 144 264 144 c 696 144 l 704.574 144 712.496 148.574 716.785 156
 c 721.07 163.426 721.07 172.574 716.785 180 c 712.496 187.426 704.574 192
 696 192 c 264 192 l 257.637 192 251.531 189.473 247.031 184.969 c 242.527
 180.469 240 174.363 240 168 c 264 336 m 255.426 336 247.504 340.574 243.215
 348 c 238.93 355.426 238.93 364.574 243.215 372 c 247.504 379.426 255.426
 384 264 384 c 696 384 l 704.574 384 712.496 379.426 716.785 372 c 721.07
 364.574 721.07 355.426 716.785 348 c 712.496 340.574 704.574 336 696 336
 c h
264 528 m 255.426 528 247.504 532.574 243.215 540 c 238.93 547.426 238.93
 556.574 243.215 564 c 247.504 571.426 255.426 576 264 576 c 696 576 l 704.574
 576 712.496 571.426 716.785 564 c 721.07 556.574 721.07 547.426 716.785
 540 c 712.496 532.574 704.574 528 696 528 c h
264 528 m f
72 336 m 72 329.637 74.527 323.531 79.031 319.031 c 83.531 314.527 89.637
 312 96 312 c 144 312 l 150.363 312 156.469 314.527 160.969 319.031 c 165.473
 323.531 168 329.637 168 336 c 168 384 l 168 390.363 165.473 396.469 160.969
 400.969 c 156.469 405.473 150.363 408 144 408 c 96 408 l 89.637 408 83.531
 405.473 79.031 400.969 c 74.527 396.469 72 390.363 72 384 c h
96 336 m 144 336 l 144 384 l 96 384 l h
96 504 m 89.637 504 83.531 506.527 79.031 511.031 c 74.527 515.531 72 521.637
 72 528 c 72 576 l 72 582.363 74.527 588.469 79.031 592.969 c 83.531 597.473
 89.637 600 96 600 c 144 600 l 150.363 600 156.469 597.473 160.969 592.969
 c 165.473 588.469 168 582.363 168 576 c 168 528 l 168 521.637 165.473 515.531
 160.969 511.031 c 156.469 506.527 150.363 504 144 504 c h
144 528 m 96 528 l 96 576 l 144 576 l h
144 528 m f*
Q Q
showpage
%%Trailer
%%EOF
