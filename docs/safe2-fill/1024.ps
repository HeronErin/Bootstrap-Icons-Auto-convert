%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:26 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 720 rectclip
1 0 0 -1 0 768 cm q
0 g
315.023 384 m 241.68 384 l 245.703 356.211 256.629 329.871 273.457 307.391
 c 325.297 359.23 l 320.754 366.91 317.328 375.168 315.023 384 c 359.23 
325.297 m 307.391 273.457 l 329.871 256.629 356.211 245.703 384 241.68 c
 384 315.023 l 375.137 317.328 366.879 320.75 359.23 325.297 c 432 315.023
 m 432 241.68 l 459.789 245.703 486.129 256.629 508.609 273.457 c 456.77
 325.297 l 449.031 320.73 440.695 317.273 432 315.023 c 490.703 359.23 m
 542.543 307.391 l 559.008 329.375 570.238 355.535 574.32 384 c 500.977 
384 l 498.727 375.305 495.27 366.969 490.703 359.23 c 500.977 432 m 574.32
 432 l 570.297 459.789 559.371 486.129 542.543 508.609 c 490.703 456.77 
l 495.246 449.09 498.672 440.832 500.977 432 c 456.77 490.703 m 508.609 
542.543 l 486.129 559.371 459.789 570.297 432 574.32 c 432 500.977 l 440.863
 498.672 449.121 495.25 456.77 490.703 c 384 500.977 m 384 574.32 l 356.211
 570.297 329.871 559.371 307.391 542.543 c 359.23 490.703 l 366.91 495.246
 375.168 498.672 384 500.977 c 325.297 456.77 m 273.457 508.609 l 256.629
 486.129 245.703 459.789 241.68 432 c 315.023 432 l 317.328 440.863 320.75
 449.121 325.297 456.77 c 360 408 m 360 390.852 369.148 375.004 384 366.43
 c 398.852 357.855 417.148 357.855 432 366.43 c 446.852 375.004 456 390.852
 456 408 c 456 425.148 446.852 440.996 432 449.57 c 417.148 458.145 398.852
 458.145 384 449.57 c 369.148 440.996 360 425.148 360 408 c f
120 48 m 100.906 48 82.59 55.586 69.09 69.09 c 55.586 82.59 48 100.906 
48 120 c 48 144 l 24 144 l 15.426 144 7.504 148.574 3.215 156 c -1.07 163.426
 -1.07 172.574 3.215 180 c 7.504 187.426 15.426 192 24 192 c 48 192 l 48
 384 l 24 384 l 15.426 384 7.504 388.574 3.215 396 c -1.07 403.426 -1.07
 412.574 3.215 420 c 7.504 427.426 15.426 432 24 432 c 48 432 l 48 624 l
 24 624 l 15.426 624 7.504 628.574 3.215 636 c -1.07 643.426 -1.07 652.574
 3.215 660 c 7.504 667.426 15.426 672 24 672 c 48 672 l 48 696 l 48 715.094
 55.586 733.41 69.09 746.91 c 82.59 760.414 100.906 768 120 768 c 696 768
 l 715.094 768 733.41 760.414 746.91 746.91 c 760.414 733.41 768 715.094
 768 696 c 768 120 l 768 100.906 760.414 82.59 746.91 69.09 c 733.41 55.586
 715.094 48 696 48 c h
408 192 m 465.285 192 520.227 214.758 560.734 255.266 c 601.242 295.773
 624 350.715 624 408 c 624 465.285 601.242 520.227 560.734 560.734 c 520.227
 601.242 465.285 624 408 624 c 350.715 624 295.773 601.242 255.266 560.734
 c 214.758 520.227 192 465.285 192 408 c 192 350.715 214.758 295.773 255.266
 255.266 c 295.773 214.758 350.715 192 408 192 c f
Q Q
showpage
%%Trailer
%%EOF
