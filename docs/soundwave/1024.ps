%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:19 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 96 720 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 96 720 672
768 768 cairo_set_page_size
%%EndPageSetup
q 96 96 624 576 rectclip
1 0 0 -1 0 768 cm q
0 g
408 96 m 414.363 96 420.469 98.527 424.969 103.031 c 429.473 107.531 432
 113.637 432 120 c 432 648 l 432 656.574 427.426 664.496 420 668.785 c 412.574
 673.07 403.426 673.07 396 668.785 c 388.574 664.496 384 656.574 384 648
 c 384 120 l 384 113.637 386.527 107.531 391.031 103.031 c 395.531 98.527
 401.637 96 408 96 c 312 192 m 318.363 192 324.469 194.527 328.969 199.031
 c 333.473 203.531 336 209.637 336 216 c 336 552 l 336 560.574 331.426 568.496
 324 572.785 c 316.574 577.07 307.426 577.07 300 572.785 c 292.574 568.496
 288 560.574 288 552 c 288 216 l 288 209.637 290.527 203.531 295.031 199.031
 c 299.531 194.527 305.637 192 312 192 c 504 192 m 510.363 192 516.469 194.527
 520.969 199.031 c 525.473 203.531 528 209.637 528 216 c 528 552 l 528 560.574
 523.426 568.496 516 572.785 c 508.574 577.07 499.426 577.07 492 572.785
 c 484.574 568.496 480 560.574 480 552 c 480 216 l 480 209.637 482.527 203.531
 487.031 199.031 c 491.531 194.527 497.637 192 504 192 c 216 264 m 222.363
 264 228.469 266.527 232.969 271.031 c 237.473 275.531 240 281.637 240 288
 c 240 480 l 240 488.574 235.426 496.496 228 500.785 c 220.574 505.07 211.426
 505.07 204 500.785 c 196.574 496.496 192 488.574 192 480 c 192 288 l 192
 281.637 194.527 275.531 199.031 271.031 c 203.531 266.527 209.637 264 216
 264 c 600 264 m 606.363 264 612.469 266.527 616.969 271.031 c 621.473 275.531
 624 281.637 624 288 c 624 480 l 624 488.574 619.426 496.496 612 500.785
 c 604.574 505.07 595.426 505.07 588 500.785 c 580.574 496.496 576 488.574
 576 480 c 576 288 l 576 281.637 578.527 275.531 583.031 271.031 c 587.531
 266.527 593.637 264 600 264 c 120 312 m 126.363 312 132.469 314.527 136.969
 319.031 c 141.473 323.531 144 329.637 144 336 c 144 432 l 144 440.574 139.426
 448.496 132 452.785 c 124.574 457.07 115.426 457.07 108 452.785 c 100.574
 448.496 96 440.574 96 432 c 96 336 l 96 329.637 98.527 323.531 103.031 
319.031 c 107.531 314.527 113.637 312 120 312 c 696 312 m 702.363 312 708.469
 314.527 712.969 319.031 c 717.473 323.531 720 329.637 720 336 c 720 432
 l 720 440.574 715.426 448.496 708 452.785 c 700.574 457.07 691.426 457.07
 684 452.785 c 676.574 448.496 672 440.574 672 432 c 672 336 l 672 329.637
 674.527 323.531 679.031 319.031 c 683.531 314.527 689.637 312 696 312 c
 f*
Q Q
showpage
%%Trailer
%%EOF
