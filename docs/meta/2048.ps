%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 227 1536 1248
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 227 1536 1248
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 227 1536 1021 rectclip
1 0 0 -1 0 1536 cm q
0 g
788.832 503.328 m 877.922 382.848 976.414 288 1102.367 288 c 1340.16 288
 1536 590.688 1536.098 951.07 c 1536.098 1170.91 1441.441 1308.672 1271.426
 1308.672 c 1123.297 1308.672 1041.504 1225.535 894.723 979.969 c 830.691
 872.16 l 819.363 853.25 l 819.359 853.246 l 802.66 825.027 785.699 796.961
 768.48 769.055 c 655.391 968.734 l 494.781 1249.535 404.352 1308.672 278.781
 1308.672 c 104.258 1308.672 0 1172.832 0 957.406 c 0 613.246 191.52 288
 441.406 288 c 471.934 287.938 501.504 291.84 530.109 299.711 c 559.871 
307.969 588.766 320.832 617.758 338.781 c 673.148 373.246 728.543 426.621
 788.828 503.324 c 934.363 716.828 m 910.172 677.531 886.906 641.277 864.57
 608.059 c 864 607.297 l 945.121 482.016 1012.129 419.711 1091.711 419.711
 c 1257.117 419.711 1389.504 663.262 1389.504 962.398 c 1389.504 1076.445
 1352.062 1142.59 1274.785 1142.59 c 1200.578 1142.59 1165.152 1093.629 
1024.227 867.07 c h
465.215 456.574 m 534.816 466.176 598.176 517.438 689.855 648.672 c 636.957
 729.676 584.637 811.051 532.895 892.801 c 402.621 1096.898 357.598 1142.688
 285.117 1142.688 c 210.523 1142.688 166.078 1077.215 166.078 960.289 c 
166.078 710.496 290.688 454.945 439.293 454.945 c 447.996 454.945 456.637
 455.52 465.215 456.672 c h
465.215 456.574 m f*
Q Q
showpage
%%Trailer
%%EOF
