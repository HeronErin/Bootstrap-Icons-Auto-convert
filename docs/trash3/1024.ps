%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 0 720 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 0 720 768
768 768 cairo_set_page_size
%%EndPageSetup
q 48 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
312 48 m 456 48 l 462.363 48 468.469 50.527 472.969 55.031 c 477.473 59.531
 480 65.637 480 72 c 480 120 l 288 120 l 288 72 l 288 65.637 290.527 59.531
 295.031 55.031 c 299.531 50.527 305.637 48 312 48 c 528 120 m 528 72 l 
528 52.906 520.414 34.59 506.91 21.09 c 493.41 7.586 475.094 0 456 0 c 312
 0 l 292.906 0 274.59 7.586 261.09 21.09 c 247.586 34.59 240 52.906 240 
72 c 240 120 l 72 120 l 63.426 120 55.504 124.574 51.215 132 c 46.93 139.426
 46.93 148.574 51.215 156 c 55.504 163.426 63.426 168 72 168 c 97.824 168
 l 138.77 679.68 l 140.699 703.738 151.621 726.184 169.355 742.551 c 187.094
 758.918 210.344 768.004 234.48 768 c 533.52 768 l 557.656 768.004 580.906
 758.918 598.645 742.551 c 616.379 726.184 627.301 703.738 629.23 679.68
 c 670.176 168 l 696 168 l 704.574 168 712.496 163.426 716.785 156 c 721.07
 148.574 721.07 139.426 716.785 132 c 712.496 124.574 704.574 120 696 120
 c h
621.984 168 m 581.375 675.84 l 580.41 687.867 574.949 699.094 566.082 707.277
 c 557.215 715.461 545.586 720.004 533.52 720 c 234.48 720 l 222.414 720.004
 210.785 715.461 201.918 707.277 c 193.051 699.094 187.59 687.867 186.625
 675.84 c 146.016 168 l h
262.609 216 m 268.961 215.633 275.199 217.805 279.949 222.035 c 284.703
 226.266 287.582 232.207 287.953 238.559 c 311.953 646.559 l 312.293 655.016
 308.156 663.023 301.062 667.637 c 293.973 672.254 284.977 672.793 277.383
 669.062 c 269.789 665.328 264.723 657.875 264.047 649.441 c 240 241.441
 l 239.605 235.07 241.766 228.809 245.996 224.035 c 250.23 219.262 256.191
 216.371 262.559 216 c h
505.395 216 m 505.391 216 l 511.762 216.371 517.723 219.262 521.953 224.035
 c 526.188 228.809 528.344 235.07 527.953 241.441 c 503.953 649.441 l 503.691
 655.883 500.852 661.949 496.07 666.277 c 491.289 670.602 484.969 672.82
 478.531 672.434 c 472.094 672.047 466.086 669.086 461.855 664.219 c 457.625
 659.352 455.531 652.988 456.047 646.559 c 480.047 238.559 l 480.418 232.207
 483.297 226.266 488.051 222.035 c 492.801 217.805 499.039 215.633 505.391
 216 c 384 216 m 390.363 216 396.469 218.527 400.969 223.031 c 405.473 227.531
 408 233.637 408 240 c 408 648 l 408 656.574 403.426 664.496 396 668.785
 c 388.574 673.07 379.426 673.07 372 668.785 c 364.574 664.496 360 656.574
 360 648 c 360 240 l 360 233.637 362.527 227.531 367.031 223.031 c 371.531
 218.527 377.637 216 384 216 c f
Q Q
showpage
%%Trailer
%%EOF
