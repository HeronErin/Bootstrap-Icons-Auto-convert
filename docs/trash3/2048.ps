%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 0 1440 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 0 1440 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
624 96 m 912 96 l 924.73 96 936.938 101.059 945.941 110.059 c 954.941 119.062
 960 131.27 960 144 c 960 240 l 576 240 l 576 144 l 576 131.27 581.059 119.062
 590.059 110.059 c 599.062 101.059 611.27 96 624 96 c 1056 240 m 1056 144
 l 1056 105.809 1040.828 69.184 1013.824 42.176 c 986.816 15.172 950.191
 0 912 0 c 624 0 l 585.809 0 549.184 15.172 522.176 42.176 c 495.172 69.184
 480 105.809 480 144 c 480 240 l 144 240 l 126.852 240 111.004 249.148 102.43
 264 c 93.855 278.852 93.855 297.148 102.43 312 c 111.004 326.852 126.852
 336 144 336 c 195.648 336 l 277.535 1359.359 l 281.398 1407.477 303.242
 1452.371 338.715 1485.105 c 374.188 1517.84 420.691 1536.012 468.961 1536
 c 1067.039 1536 l 1115.309 1536.012 1161.812 1517.84 1197.285 1485.105 
c 1232.758 1452.371 1254.602 1407.477 1258.465 1359.359 c 1340.352 336 l
 1392 336 l 1409.148 336 1424.996 326.852 1433.57 312 c 1442.145 297.148
 1442.145 278.852 1433.57 264 c 1424.996 249.148 1409.148 240 1392 240 c
 h
1243.969 336 m 1162.754 1351.68 l 1160.82 1375.738 1149.898 1398.184 1132.164
 1414.551 c 1114.426 1430.918 1091.176 1440.004 1067.039 1440 c 468.961 
1440 l 444.824 1440.004 421.574 1430.918 403.836 1414.551 c 386.102 1398.184
 375.18 1375.738 373.246 1351.68 c 292.031 336 l h
525.215 432 m 537.922 431.266 550.395 435.605 559.902 444.066 c 569.406
 452.527 575.16 464.418 575.902 477.121 c 623.902 1293.121 l 624.582 1310.027
 616.309 1326.043 602.129 1335.273 c 587.945 1344.508 569.953 1345.59 554.766
 1338.121 c 539.582 1330.656 529.449 1315.746 528.098 1298.879 c 480 482.879
 l 479.211 470.145 483.527 457.617 491.996 448.07 c 500.461 438.523 512.383
 432.742 525.121 432 c h
1010.781 432 m 1010.785 432 l 1023.523 432.742 1035.441 438.523 1043.91
 448.07 c 1052.375 457.617 1056.691 470.145 1055.902 482.879 c 1007.902 
1298.879 l 1007.387 1311.766 1001.707 1323.902 992.141 1332.551 c 982.578
 1341.203 969.934 1345.641 957.062 1344.867 c 944.188 1344.094 932.168 1338.172
 923.711 1328.438 c 915.254 1318.703 911.066 1305.977 912.098 1293.121 c
 960.098 477.121 l 960.84 464.418 966.594 452.527 976.098 444.066 c 985.605
 435.605 998.078 431.266 1010.785 432 c 768 432 m 780.73 432 792.938 437.059
 801.941 446.059 c 810.941 455.062 816 467.27 816 480 c 816 1296 l 816 1313.148
 806.852 1328.996 792 1337.57 c 777.148 1346.145 758.852 1346.145 744 1337.57
 c 729.148 1328.996 720 1313.148 720 1296 c 720 480 l 720 467.27 725.059
 455.062 734.059 446.059 c 743.062 437.059 755.27 432 768 432 c f
Q Q
showpage
%%Trailer
%%EOF
