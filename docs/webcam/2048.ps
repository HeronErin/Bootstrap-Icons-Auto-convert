%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:07 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 288 1536 1152
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 288 1536 1152
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 288 1536 864 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 576 m 0 525.078 20.227 476.242 56.234 440.234 c 92.242 404.227 141.078
 384 192 384 c 1344 384 l 1377.703 384 1410.812 392.871 1440 409.723 c 1469.188
 426.574 1493.426 450.812 1510.277 480 c 1527.129 509.188 1536 542.297 1536
 576 c 1536 864 l 1536 897.703 1527.129 930.812 1510.277 960 c 1493.426 
989.188 1469.188 1013.426 1440 1030.277 c 1410.812 1047.129 1377.703 1056
 1344 1056 c 889.824 1056 l 903.648 1071.551 921.504 1087.105 940.801 1101.602
 c 968.383 1122.039 997.492 1140.332 1027.871 1156.32 c 1029.215 1156.895
 l 1029.504 1157.086 l 1029.504 1157.09 l 1042.484 1163.594 1051.82 1175.625
 1054.902 1189.812 c 1057.984 1204 1054.48 1218.82 1045.367 1230.125 c 1036.258
 1241.426 1022.52 1248 1008 1248 c 528 1248 l 513.48 1248 499.742 1241.426
 490.633 1230.125 c 481.52 1218.82 478.016 1204 481.098 1189.812 c 484.18
 1175.625 493.516 1163.594 506.496 1157.09 c 506.785 1156.898 l 508.129 
1156.227 l 508.129 1156.223 l 516.848 1151.75 525.426 1147.012 533.855 1142.016
 c 555.027 1129.672 575.504 1116.18 595.199 1101.602 c 614.398 1087.203 
632.352 1071.555 646.176 1056 c 192 1056 l 141.078 1056 92.242 1035.773 
56.234 999.766 c 20.227 963.758 0 914.922 0 864 c h
192 480 m 166.539 480 142.121 490.113 124.117 508.117 c 106.113 526.121
 96 550.539 96 576 c 96 864 l 96 889.461 106.113 913.879 124.117 931.883
 c 142.121 949.887 166.539 960 192 960 c 1344 960 l 1369.461 960 1393.879
 949.887 1411.883 931.883 c 1429.887 913.879 1440 889.461 1440 864 c 1440
 576 l 1440 550.539 1429.887 526.121 1411.883 508.117 c 1393.879 490.113
 1369.461 480 1344 480 c h
192 480 m f
768 624 m 733.703 624 702.012 642.297 684.863 672 c 667.711 701.703 667.711
 738.297 684.863 768 c 702.012 797.703 733.703 816 768 816 c 802.297 816
 833.988 797.703 851.137 768 c 868.289 738.297 868.289 701.703 851.137 672
 c 833.988 642.297 802.297 624 768 624 c 576 720 m 576 669.078 596.227 620.242
 632.234 584.234 c 668.242 548.227 717.078 528 768 528 c 818.922 528 867.758
 548.227 903.766 584.234 c 939.773 620.242 960 669.078 960 720 c 960 770.922
 939.773 819.758 903.766 855.766 c 867.758 891.773 818.922 912 768 912 c
 717.078 912 668.242 891.773 632.234 855.766 c 596.227 819.758 576 770.922
 576 720 c 1248 720 m 1248 737.148 1238.852 752.996 1224 761.57 c 1209.148
 770.145 1190.852 770.145 1176 761.57 c 1161.148 752.996 1152 737.148 1152
 720 c 1152 702.852 1161.148 687.004 1176 678.43 c 1190.852 669.855 1209.148
 669.855 1224 678.43 c 1238.852 687.004 1248 702.852 1248 720 c f
Q Q
showpage
%%Trailer
%%EOF
