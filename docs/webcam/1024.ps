%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 144 768 576
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 144 768 576
768 768 cairo_set_page_size
%%EndPageSetup
q 0 144 768 432 rectclip
1 0 0 -1 0 768 cm q
0 g
0 288 m 0 262.539 10.113 238.121 28.117 220.117 c 46.121 202.113 70.539
 192 96 192 c 672 192 l 697.461 192 721.879 202.113 739.883 220.117 c 757.887
 238.121 768 262.539 768 288 c 768 432 l 768 457.461 757.887 481.879 739.883
 499.883 c 721.879 517.887 697.461 528 672 528 c 444.91 528 l 451.82 535.777
 460.75 543.551 470.398 550.801 c 484.191 561.02 498.746 570.164 513.938
 578.16 c 514.609 578.449 l 514.754 578.547 l 514.754 578.543 l 521.242 
581.797 525.91 587.812 527.453 594.906 c 528.992 602 527.238 609.41 522.684
 615.062 c 518.129 620.715 511.258 624 504 624 c 264 624 l 256.742 624 249.871
 620.715 245.316 615.062 c 240.762 609.41 239.008 602 240.547 594.906 c 
242.09 587.812 246.758 581.797 253.246 578.543 c 253.391 578.445 l 254.062
 578.109 l 254.062 578.113 l 258.422 575.875 262.715 573.508 266.93 571.008
 c 277.512 564.836 287.754 558.09 297.602 550.801 c 307.203 543.602 316.176
 535.777 323.09 528 c 96 528 l 70.539 528 46.121 517.887 28.117 499.883 
c 10.113 481.879 0 457.461 0 432 c h
96 240 m 83.27 240 71.062 245.059 62.059 254.059 c 53.059 263.062 48 275.27
 48 288 c 48 432 l 48 444.73 53.059 456.938 62.059 465.941 c 71.062 474.941
 83.27 480 96 480 c 672 480 l 684.73 480 696.938 474.941 705.941 465.941
 c 714.941 456.938 720 444.73 720 432 c 720 288 l 720 275.27 714.941 263.062
 705.941 254.059 c 696.938 245.059 684.73 240 672 240 c h
96 240 m f
384 312 m 366.852 312 351.004 321.148 342.43 336 c 333.855 350.852 333.855
 369.148 342.43 384 c 351.004 398.852 366.852 408 384 408 c 401.148 408 
416.996 398.852 425.57 384 c 434.145 369.148 434.145 350.852 425.57 336 
c 416.996 321.148 401.148 312 384 312 c 288 360 m 288 325.703 306.297 294.012
 336 276.863 c 365.703 259.711 402.297 259.711 432 276.863 c 461.703 294.012
 480 325.703 480 360 c 480 394.297 461.703 425.988 432 443.137 c 402.297
 460.289 365.703 460.289 336 443.137 c 306.297 425.988 288 394.297 288 360
 c 624 360 m 624 368.574 619.426 376.496 612 380.785 c 604.574 385.07 595.426
 385.07 588 380.785 c 580.574 376.496 576 368.574 576 360 c 576 351.426 
580.574 343.504 588 339.215 c 595.426 334.93 604.574 334.93 612 339.215 
c 619.426 343.504 624 351.426 624 360 c f
Q Q
showpage
%%Trailer
%%EOF
