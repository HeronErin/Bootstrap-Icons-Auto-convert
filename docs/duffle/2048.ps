%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 201 1536 1491
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 201 1536 1491
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 201 1536 1290 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 552 m 901.246 552 1024.609 570.527 1114.465 588.961 c 1160.668 598.41
 1206.469 609.746 1251.742 622.945 c 1262.496 626.211 l 1262.688 626.309
 l 1262.785 626.309 l 1262.785 626.305 l 1279.109 631.586 1291.379 645.176
 1294.965 661.957 c 1298.555 678.734 1292.918 696.152 1280.184 707.652 c
 1267.445 719.148 1249.543 722.977 1233.215 717.695 c 1232.832 717.504 l
 1231.105 717.023 l 1186.27 703.754 1140.883 692.414 1095.07 683.039 c 987.477
 660.566 877.914 648.828 768 648 c 658.055 648.82 548.461 660.559 440.832
 683.039 c 395.055 692.418 349.699 703.754 304.895 717.023 c 303.168 717.504
 l 302.879 717.602 l 290.59 722.297 276.906 721.738 265.039 716.062 c 253.168
 710.383 244.148 700.082 240.09 687.562 c 236.035 675.047 237.293 661.414
 243.57 649.852 c 249.852 638.289 260.602 629.809 273.312 626.398 c 433.504
 576.766 600.293 551.68 768 552 c f
501.984 261.312 m 489.887 305.57 483.746 352.031 480.672 393.312 c 346.176
 411.938 226.273 444.289 142.273 490.465 c -61.824 602.688 3.457 1075.586
 37.727 1260.191 c 41.824 1281.281 53.203 1300.258 69.875 1313.805 c 86.547
 1327.352 107.449 1334.609 128.93 1334.305 c 1407.074 1334.305 l 1407.07
 1334.305 l 1428.551 1334.609 1449.453 1327.352 1466.125 1313.805 c 1482.797
 1300.258 1494.176 1281.281 1498.273 1260.191 c 1532.547 1075.582 1597.824
 602.59 1393.633 490.465 c 1309.824 444.387 1189.824 411.938 1055.328 393.312
 c 1052.391 348.738 1045.254 304.543 1034.016 261.312 c 1018.465 204.383
 991.297 143.426 940.801 105.602 c 833.762 25.344 702.242 25.344 595.199
 105.602 c 544.703 143.426 517.438 204.48 501.984 261.312 c 883.199 182.398
 m 908.16 201.117 927.934 237.117 941.375 286.559 c 949.824 317.469 955.008
 350.59 957.984 382.367 c 831.559 371.59 704.441 371.59 578.016 382.367 
c 580.84 350.02 586.398 317.973 594.625 286.559 c 608.066 237.117 627.84
 201.117 652.801 182.398 c 725.762 127.68 810.242 127.68 883.199 182.398
 c 768 470.398 m 1005.602 470.398 1228.129 508.992 1347.457 574.559 c 1370.305
 587.039 1392.77 613.535 1410.336 663.84 c 1427.902 713.953 1437.215 778.559
 1439.426 851.23 c 1443.938 993.887 1421.281 1147.68 1404.672 1238.301 c
 131.328 1238.305 l 114.719 1147.68 92.062 993.984 96.574 851.234 c 98.879
 778.562 108.094 713.953 125.664 663.844 c 143.23 613.539 165.695 587.043
 188.543 574.562 c 307.871 508.992 530.398 470.398 768 470.398 c f
Q Q
showpage
%%Trailer
%%EOF
