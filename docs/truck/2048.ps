%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 191 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 191 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 191 1536 1153 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 336 m 0 297.809 15.172 261.184 42.176 234.176 c 69.184 207.172 105.809
 192 144 192 c 1008 192 l 1046.191 192 1082.816 207.172 1109.824 234.176
 c 1136.828 261.184 1152 297.809 1152 336 c 1152 480 l 1249.922 480 l 1293.621
 480.039 1334.941 499.922 1362.238 534.047 c 1504.414 711.648 l 1524.871
 737.203 1536.012 768.961 1536 801.695 c 1536 1008 l 1536 1046.191 1520.828
 1082.816 1493.824 1109.824 c 1466.816 1136.828 1430.191 1152 1392 1152 
c 1344 1152 l 1344 1202.922 1323.773 1251.758 1287.766 1287.766 c 1251.758
 1323.773 1202.922 1344 1152 1344 c 1101.078 1344 1052.242 1323.773 1016.234
 1287.766 c 980.227 1251.758 960 1202.922 960 1152 c 480 1152 l 480.074 
1186.211 471.004 1219.82 453.734 1249.352 c 436.461 1278.883 411.609 1303.262
 381.754 1319.969 c 351.898 1336.672 318.121 1345.098 283.918 1344.371 c
 249.715 1343.645 216.328 1333.789 187.211 1315.832 c 158.09 1297.871 134.301
 1272.457 118.297 1242.219 c 102.297 1211.98 94.664 1178.016 96.191 1143.84
 c 68.07 1133.941 43.711 1115.559 26.48 1091.227 c 9.25 1066.895 0 1037.816
 0 1008 c h
124.223 1051.777 m 147.492 1013.754 183.266 985.012 225.41 970.48 c 267.555
 955.949 313.441 956.539 355.199 972.141 c 396.957 987.746 431.984 1017.395
 454.273 1056 c 985.73 1056 l 985.727 1056 l 1002.578 1026.816 1026.816 
1002.578 1056 985.727 c 1056 336 l 1056 323.27 1050.941 311.062 1041.941
 302.059 c 1032.938 293.059 1020.73 288 1008 288 c 144 288 l 131.27 288 
119.062 293.059 110.059 302.059 c 101.059 311.062 96 323.27 96 336 c 96 
1008 l 95.992 1017.238 98.652 1026.285 103.656 1034.051 c 108.664 1041.812
 115.805 1047.969 124.223 1051.777 c 1152 960 m 1185.703 960 1218.809 968.871
 1247.996 985.723 c 1277.184 1002.574 1301.422 1026.812 1318.273 1056 c 
1392 1056 l 1404.73 1056 1416.938 1050.941 1425.941 1041.941 c 1434.941 
1032.938 1440 1020.73 1440 1008 c 1440 801.602 l 1439.98 790.707 1436.258
 780.145 1429.441 771.648 c 1287.363 594.047 l 1287.359 594.047 l 1278.266
 582.66 1264.492 576.02 1249.922 576 c 1152 576 l h
288 1056 m 253.703 1056 222.012 1074.297 204.863 1104 c 187.711 1133.703
 187.711 1170.297 204.863 1200 c 222.012 1229.703 253.703 1248 288 1248 
c 322.297 1248 353.988 1229.703 371.137 1200 c 388.289 1170.297 388.289 
1133.703 371.137 1104 c 353.988 1074.297 322.297 1056 288 1056 c 1152 1056
 m 1117.703 1056 1086.012 1074.297 1068.863 1104 c 1051.711 1133.703 1051.711
 1170.297 1068.863 1200 c 1086.012 1229.703 1117.703 1248 1152 1248 c 1186.297
 1248 1217.988 1229.703 1235.137 1200 c 1252.289 1170.297 1252.289 1133.703
 1235.137 1104 c 1217.988 1074.297 1186.297 1056 1152 1056 c f
Q Q
showpage
%%Trailer
%%EOF
