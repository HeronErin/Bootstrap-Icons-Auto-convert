%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
672 0 m 614.977 0.129 566.113 14.945 525.406 44.449 c 485.277 73.441 456.574
 114.145 436.125 160.418 c 395.809 251.426 384 372.383 384 497.953 c 384
 546.336 l 324.672 576 l 284.809 595.934 251.281 626.57 227.848 664.484 
c 204.414 702.398 192 746.086 192 790.656 c 192 1037.953 l 192 1311.266 
405.121 1536 672 1536 c 864 1536 l 1130.879 1536 1344 1311.168 1344 1037.953
 c 1344 497.855 l 1344 389.375 1317.887 301.633 1272.191 231.742 c 1226.688
 162.047 1163.711 113.184 1094.688 79.102 c 958.176 11.809 792.961 0 672
 0 c 912 585.504 m 912 118.273 l 960.961 128.832 1008.77 143.906 1052.16
 165.312 c 1109.375 193.441 1157.664 231.938 1191.84 284.352 c 1225.918 
336.48 1248 405.504 1248 497.953 c 1248 660.191 l h
816 103.105 m 816 564.195 l 480 489.504 l 480.574 370.273 492.863 269.375
 523.871 199.199 c 539.422 164.062 558.719 138.719 581.664 122.305 c 604.031
 106.078 632.93 96 672 96 c 716.93 96 766.078 97.727 816 103.105 c 480 587.902
 m 1248 758.398 l 1248 1037.949 l 1248 1261.922 1074.238 1440 864 1440 c
 672 1440 l 461.762 1440 288 1261.922 288 1037.953 c 288 790.656 l 288 763.898
 295.457 737.672 309.531 714.918 c 323.605 692.16 343.742 673.773 367.68
 661.824 c 385.633 652.895 l 386.594 678.336 387.938 708.574 390.145 741.215
 c 396.098 831.262 408.383 944.734 434.496 1023.168 c 438.148 1035.691 446.742
 1046.191 458.301 1052.246 c 469.855 1058.301 483.379 1059.391 495.754 1055.266
 c 508.133 1051.141 518.297 1042.152 523.906 1030.375 c 529.52 1018.598 
530.098 1005.043 525.504 992.832 c 503.711 927.266 491.902 824.832 485.855
 734.785 c 482.648 685.945 480.727 637.035 480.098 588.098 c 480.098 587.906
 l h
480 587.902 m f
Q Q
showpage
%%Trailer
%%EOF
