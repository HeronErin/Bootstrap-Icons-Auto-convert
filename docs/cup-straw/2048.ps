%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:41 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 336 0 1339 1535
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 336 0 1339 1535
1536 1536 cairo_set_page_size
%%EndPageSetup
q 336 0 1003 1535 rectclip
1 0 0 -1 0 1536 cm q
0 g
1334.594 32.062 m 1339.312 43.902 1339.133 57.133 1334.094 68.84 c 1329.051
 80.543 1319.559 89.762 1307.711 94.465 c 1091.328 181.059 l 1052.93 366.051
 l 1089.027 375.172 1121.57 386.691 1146.242 401.281 c 1168.129 414.242 
1200.004 439.297 1200.004 480 c 1200.004 484.414 1199.652 488.641 1198.949
 492.672 c 1106.598 1363.199 l 1106.594 1363.199 l 1103.625 1398.867 1085.258
 1431.465 1056.289 1452.48 c 1009.441 1485.121 912.863 1536 767.328 1536
 c 621.793 1536 525.215 1485.121 478.367 1452.48 c 449.398 1431.465 431.031
 1398.867 428.062 1363.199 c 336.961 492.672 l 336.359 488.473 336.039 484.242
 336 480 c 336 439.297 367.871 414.238 389.762 401.281 c 414.914 386.496
 448.035 374.785 484.801 365.57 c 559.105 346.945 659.23 336 768 336 c 836.352
 336 901.344 340.32 958.559 348.191 c 1003.102 135.551 l 1003.105 135.551
 l 1006.551 120.051 1017.441 107.254 1032.191 101.375 c 1272.191 5.375 l
 1284.008 0.645 1297.215 0.797 1308.918 5.801 c 1320.617 10.805 1329.855
 20.254 1334.594 32.062 c 937.727 442.273 m 881.426 435.27 824.734 431.84
 768 432 c 664.703 432 572.832 442.559 508.129 458.688 c 486.707 463.613
 465.859 470.758 445.922 480 c 459.938 487.008 480.676 494.398 508.129 501.312
 c 572.832 517.441 664.703 528 768 528 c 822.816 528 874.465 525.121 920.449
 519.84 c h
965.758 610.848 m 906.719 619.199 839.23 624 768 624 c 659.23 624 559.105
 613.055 484.801 594.434 c 470.73 590.895 456.801 586.828 443.039 582.238
 c 523.488 1353.117 l 524.734 1364.734 529.25 1370.973 533.281 1373.758 
c 567.555 1397.66 645.41 1439.996 767.328 1439.996 c 889.25 1439.996 967.105
 1397.66 1001.375 1373.758 c 1005.406 1370.973 1010.016 1364.734 1011.168
 1353.117 c 1092.961 582.238 l 1079.199 586.828 1065.27 590.895 1051.199
 594.434 c 1023.012 601.305 994.496 606.75 965.762 610.754 c h
428.832 468.863 m 428.832 468.863 429.121 469.055 429.312 469.438 c h
1107.168 468.863 m 1106.688 469.438 l h
1089.984 480 m 1071.43 471.234 1051.992 464.477 1032 459.84 c 1022.496 
502.559 l 1027.777 501.312 l 1055.234 494.402 1075.969 487.008 1089.984 
480 c f
Q Q
showpage
%%Trailer
%%EOF
