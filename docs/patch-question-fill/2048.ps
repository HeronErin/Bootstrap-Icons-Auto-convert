%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
569.566 83.52 m 604.109 48.168 647.469 22.688 695.164 9.715 c 742.855 -3.262
 793.145 -3.262 840.836 9.715 c 888.531 22.688 931.891 48.168 966.434 83.52
 c 1026.145 144.766 l 1111.586 143.711 l 1161.023 143.125 1209.723 155.766
 1252.637 180.316 c 1295.555 204.871 1331.129 240.445 1355.684 283.363 c
 1380.234 326.277 1392.875 374.977 1392.289 424.414 c 1391.328 509.855 l
 1452.383 569.566 l 1487.734 604.109 1513.215 647.469 1526.191 695.164 c
 1539.168 742.855 1539.168 793.145 1526.191 840.836 c 1513.215 888.531 1487.734
 931.891 1452.383 966.434 c 1391.23 1026.145 l 1392.285 1111.586 l 1392.289
 1111.586 l 1392.875 1161.023 1380.234 1209.723 1355.684 1252.637 c 1331.129
 1295.555 1295.555 1331.129 1252.637 1355.684 c 1209.723 1380.234 1161.023
 1392.875 1111.586 1392.289 c 1026.145 1391.328 l 966.434 1452.383 l 931.891
 1487.734 888.531 1513.215 840.836 1526.191 c 793.145 1539.168 742.855 1539.168
 695.164 1526.191 c 647.469 1513.215 604.109 1487.734 569.566 1452.383 c
 509.855 1391.23 l 424.414 1392.285 l 424.414 1392.289 l 374.977 1392.875
 326.277 1380.234 283.363 1355.684 c 240.445 1331.129 204.871 1295.555 180.316
 1252.637 c 155.766 1209.723 143.125 1161.023 143.711 1111.586 c 144.672
 1026.145 l 83.617 966.434 l 48.266 931.891 22.785 888.531 9.809 840.836
 c -3.168 793.145 -3.168 742.855 9.809 695.164 c 22.785 647.469 48.266 604.109
 83.617 569.566 c 144.77 509.855 l 143.715 424.414 l 143.711 424.414 l 143.125
 374.977 155.766 326.277 180.316 283.363 c 204.871 240.445 240.445 204.871
 283.363 180.316 c 326.277 155.766 374.977 143.125 424.414 143.711 c 509.855
 144.672 l h
672.191 1056 m 672.191 1090.297 690.488 1121.988 720.191 1139.137 c 749.895
 1156.289 786.488 1156.289 816.191 1139.137 c 845.895 1121.988 864.191 1090.297
 864.191 1056 c 864.191 1021.703 845.895 990.012 816.191 972.863 c 786.488
 955.711 749.895 955.711 720.191 972.863 c 690.488 990.012 672.191 1021.703
 672.191 1056 c 825.984 861.406 m 829.824 810.141 844.992 783.168 907.199
 740.445 c 971.902 694.844 1008 635.805 1008 549.789 c 1008 422.59 919.68
 335.996 790.848 335.996 c 692.926 335.996 618.816 383.227 589.246 459.836
 c 589.246 459.84 l 580.262 480.754 575.746 503.316 576 526.078 c 576 563.805
 595.488 587.52 628.32 587.52 c 654.434 587.52 672 573.406 682.465 538.559
 c 697.633 481.727 732.863 450.719 785.57 450.719 c 844.129 450.719 884.449
 493.535 884.449 554.781 c 884.449 608.828 864.48 639.742 805.539 681.98
 c 746.113 723.547 716.645 769.723 716.645 839.422 c 716.645 850.078 l 716.645
 891.168 736.613 921.598 772.805 921.598 c 805.062 921.598 821.188 898.559
 825.988 861.406 c f
Q Q
showpage
%%Trailer
%%EOF
