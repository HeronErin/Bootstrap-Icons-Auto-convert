%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:49 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 144 768 576
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 144 768 576
768 768 cairo_set_page_size
%%EndPageSetup
q 0 144 768 432 rectclip
1 0 0 -1 0 768 cm q
0 g
192 216 m 192 209.637 194.527 203.531 199.031 199.031 c 203.531 194.527
 209.637 192 216 192 c 288 192 l 296.574 192 304.496 196.574 308.785 204
 c 313.07 211.426 313.07 220.574 308.785 228 c 304.496 235.426 296.574 240
 288 240 c 288 264 l 486.719 264 l 505.246 208.414 l 506.84 203.641 509.891
 199.484 513.977 196.539 c 518.059 193.59 522.965 192.004 528 192 c 576 
192 l 584.574 192 592.496 196.574 596.785 204 c 601.07 211.426 601.07 220.574
 596.785 228 c 592.496 235.426 584.574 240 576 240 c 545.281 240 l 530.352
 284.879 l 569.086 346.801 l 569.09 346.801 l 614.004 328.277 665.23 333.652
 705.324 361.094 c 745.418 388.535 768.969 434.348 767.957 482.922 c 766.945
 531.496 741.508 576.285 700.309 602.035 c 659.109 627.785 607.699 631.023
 563.594 610.648 c 519.488 590.27 488.633 549.027 481.535 500.965 c 474.434
 452.898 492.051 404.496 528.383 372.238 c 504 333.262 l 404.352 492.719
 l 399.965 499.738 392.273 504 384 504 c 286.031 504 l 279.352 543.492 256.527
 578.418 223.039 600.387 c 189.551 622.359 148.426 629.391 109.543 619.793
 c 70.656 610.195 37.523 584.836 18.105 549.805 c -1.312 514.777 -5.266 
473.242 7.199 435.176 c 19.66 397.113 47.414 365.961 83.789 349.199 c 120.168
 332.441 161.879 331.59 198.91 346.848 c 240 281.09 l 240 240 l 216 240 
l 209.637 240 203.531 237.473 199.031 232.969 c 194.527 228.469 192 222.363
 192 216 c 264 333.266 m 239.617 372.336 l 263.617 393.648 280.418 422.93
 286.031 456 c 340.703 456 l h
384 434.734 m 460.703 312 l 307.297 312 l h
236.977 456 m 232.887 440.211 224.84 425.723 213.602 413.902 c 187.297 
456 l h
172.945 388.414 m 148.387 380.66 121.742 383.098 99 395.18 c 76.254 407.262
 59.32 427.973 51.996 452.664 c 44.676 477.355 47.578 503.953 60.059 526.48
 c 72.539 549.008 93.547 565.578 118.363 572.465 c 143.18 579.352 169.723
 575.977 192.027 563.102 c 214.332 550.23 230.527 528.934 236.977 504 c 
144 504 l 138.262 504 132.711 501.945 128.359 498.203 c 124.008 494.465 
121.137 489.289 120.273 483.613 c 119.41 477.941 120.605 472.145 123.648
 467.281 c h
554.402 413.855 m 554.398 413.855 l 532.762 436.645 523.648 468.578 529.996
 499.355 c 536.348 530.133 557.355 555.852 586.246 568.215 c 615.137 580.578
 648.25 578.023 674.895 561.367 c 701.543 544.711 718.355 516.07 719.898
 484.684 c 721.445 453.297 707.535 423.141 682.652 403.945 c 657.77 384.754
 625.07 378.953 595.105 388.414 c 644.352 467.277 l 644.352 467.281 l 648.895
 474.551 649.215 483.695 645.191 491.266 c 641.168 498.836 633.41 503.684
 624.84 503.984 c 616.27 504.285 608.191 499.992 603.648 492.719 c h
554.402 413.855 m f
Q Q
showpage
%%Trailer
%%EOF
