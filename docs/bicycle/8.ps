%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:45 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 2x2mm 6 6 0 () ()
%%BoundingBox: 0 1 6 5
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 2x2mm
%%PageBoundingBox: 0 1 6 5
6 6 cairo_set_page_size
%%EndPageSetup
q 0 1 6 4 rectclip
1 0 0 -1 0 6 cm q
0 g
1.5 1.688 m 1.5 1.582 1.582 1.5 1.688 1.5 c 2.25 1.5 l 2.5 1.5 2.5 1.875
 2.25 1.875 c 2.25 2.062 l 3.801 2.062 l 3.945 1.629 l 3.973 1.551 4.043
 1.5 4.125 1.5 c 4.5 1.5 l 4.75 1.5 4.75 1.875 4.5 1.875 c 4.262 1.875 l
 4.145 2.227 l 4.445 2.711 l 4.988 2.488 5.609 2.715 5.875 3.234 c 6.145
 3.754 5.969 4.395 5.473 4.703 c 4.977 5.012 4.324 4.891 3.973 4.422 c 3.625
 3.953 3.691 3.297 4.129 2.906 c 3.938 2.602 l 3.16 3.848 l 3.125 3.902 
3.066 3.938 3 3.938 c 2.234 3.938 l 2.156 4.41 1.785 4.777 1.316 4.859 c
 0.844 4.938 0.375 4.715 0.141 4.297 c -0.09 3.879 -0.031 3.359 0.285 3 
c 0.602 2.645 1.113 2.527 1.555 2.711 c 1.875 2.195 l 1.875 1.875 l 1.688
 1.875 l 1.582 1.875 1.5 1.793 1.5 1.688 c 2.062 2.605 m 1.871 2.91 l 2.059
 3.078 2.191 3.305 2.234 3.562 c 2.66 3.562 l h
3 3.395 m 3.598 2.438 l 2.402 2.438 l h
1.852 3.562 m 1.82 3.438 1.758 3.324 1.668 3.234 c 1.461 3.562 l h
1.352 3.035 m 1.059 2.941 0.738 3.039 0.543 3.273 c 0.352 3.512 0.32 3.844
 0.469 4.113 c 0.617 4.383 0.914 4.531 1.219 4.492 c 1.523 4.453 1.773 4.234
 1.852 3.938 c 1.125 3.938 l 0.977 3.938 0.887 3.777 0.965 3.652 c h
4.332 3.234 m 4.07 3.508 4.055 3.934 4.293 4.223 c 4.535 4.516 4.953 4.586
 5.273 4.387 c 5.594 4.184 5.715 3.777 5.555 3.434 c 5.398 3.094 5.008 2.922
 4.648 3.035 c 5.031 3.652 l 5.035 3.652 l 5.168 3.863 4.848 4.062 4.715
 3.848 c h
4.332 3.234 m f
Q Q
showpage
%%Trailer
%%EOF
