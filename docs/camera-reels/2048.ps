%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:10 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
576 288 m 576 364.383 545.656 437.637 491.648 491.648 c 437.637 545.656
 364.383 576 288 576 c 211.617 576 138.363 545.656 84.352 491.648 c 30.344
 437.637 0 364.383 0 288 c 0 211.617 30.344 138.363 84.352 84.352 c 138.363
 30.344 211.617 0 288 0 c 364.383 0 437.637 30.344 491.648 84.352 c 545.656
 138.363 576 211.617 576 288 c 96 288 m 96 338.922 116.227 387.758 152.234
 423.766 c 188.242 459.773 237.078 480 288 480 c 338.922 480 387.758 459.773
 423.766 423.766 c 459.773 387.758 480 338.922 480 288 c 480 237.078 459.773
 188.242 423.766 152.234 c 387.758 116.227 338.922 96 288 96 c 237.078 96
 188.242 116.227 152.234 152.234 c 116.227 188.242 96 237.078 96 288 c f
864 576 m 912 576 l 958.57 575.996 1003.551 592.914 1038.574 623.609 c 
1073.594 654.305 1096.266 696.68 1102.367 742.848 c 1400.926 610.176 l 1400.93
 610.176 l 1430.621 596.945 1464.988 599.641 1492.258 617.336 c 1519.523
 635.027 1535.984 665.32 1536 697.824 c 1536 1414.176 l 1535.973 1446.656
 1519.523 1476.918 1492.281 1494.605 c 1465.043 1512.293 1430.707 1515.012
 1401.023 1501.824 c 1102.367 1369.152 l 1096.266 1415.32 1073.594 1457.695
 1038.574 1488.391 c 1003.551 1519.086 958.57 1536.004 912 1536 c 192 1536
 l 141.078 1536 92.242 1515.773 56.234 1479.766 c 20.227 1443.758 0 1394.922
 0 1344 c 0 768 l 0 717.078 20.227 668.242 56.234 632.234 c 92.242 596.227
 141.078 576 192 576 c h
1440 1414.078 m 1440 697.922 l 1104 847.203 l 1104 1264.805 l h
96 768 m 96 1344 l 96 1369.461 106.113 1393.879 124.117 1411.883 c 142.121
 1429.887 166.539 1440 192 1440 c 912 1440 l 937.461 1440 961.879 1429.887
 979.883 1411.883 c 997.887 1393.879 1008 1369.461 1008 1344 c 1008 768 
l 1008 742.539 997.887 718.121 979.883 700.117 c 961.879 682.113 937.461
 672 912 672 c 192 672 l 166.539 672 142.121 682.113 124.117 700.117 c 106.113
 718.121 96 742.539 96 768 c f
864 576 m 940.383 576 1013.637 545.656 1067.648 491.648 c 1121.656 437.637
 1152 364.383 1152 288 c 1152 211.617 1121.656 138.363 1067.648 84.352 c
 1013.637 30.344 940.383 0 864 0 c 787.617 0 714.363 30.344 660.352 84.352
 c 606.344 138.363 576 211.617 576 288 c 576 364.383 606.344 437.637 660.352
 491.648 c 714.363 545.656 787.617 576 864 576 c 672 288 m 672 237.078 692.227
 188.242 728.234 152.234 c 764.242 116.227 813.078 96 864 96 c 914.922 96
 963.758 116.227 999.766 152.234 c 1035.773 188.242 1056 237.078 1056 288
 c 1056 338.922 1035.773 387.758 999.766 423.766 c 963.758 459.773 914.922
 480 864 480 c 813.078 480 764.242 459.773 728.234 423.766 c 692.227 387.758
 672 338.922 672 288 c f
Q Q
showpage
%%Trailer
%%EOF
