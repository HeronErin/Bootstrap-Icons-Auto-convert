%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
408 264 m 408 255.426 403.426 247.504 396 243.215 c 388.574 238.93 379.426
 238.93 372 243.215 c 364.574 247.504 360 255.426 360 264 c 360 425.375 
l 291.406 539.613 l 291.406 539.617 l 286.992 546.973 286.836 556.125 291
 563.629 c 295.164 571.133 303.012 575.844 311.594 575.988 c 320.172 576.137
 328.176 571.691 332.594 564.336 c 404.594 444.336 l 406.824 440.609 408
 436.344 408 432 c h
408 264 m f
312 0 m 303.426 0 295.504 4.574 291.215 12 c 286.93 19.426 286.93 28.574
 291.215 36 c 295.504 43.426 303.426 48 312 48 c 336 48 l 336 99.359 l 248.359
 112.023 169.254 158.766 115.887 229.43 c 62.52 300.094 39.199 388.965 51
 476.73 c 62.797 564.492 108.762 644.051 178.895 698.113 c 150 727.008 l
 145.492 731.508 142.961 737.613 142.953 743.984 c 142.949 750.352 145.477
 756.461 149.977 760.969 c 154.477 765.473 160.582 768.008 166.949 768.012
 c 173.32 768.02 179.43 765.492 183.938 760.992 c 219.746 725.184 l 219.742
 725.184 l 269.906 753.34 326.477 768.086 384 768 c 441.523 768.086 498.094
 753.34 548.258 725.184 c 584.066 760.992 l 584.062 760.992 l 590.133 767.055
 598.977 769.418 607.262 767.191 c 615.547 764.965 622.016 758.488 624.23
 750.199 c 626.445 741.91 624.07 733.07 618 727.008 c 589.152 698.113 l 
659.289 644.047 705.25 564.484 717.043 476.715 c 728.836 388.949 705.512
 300.074 652.133 229.41 c 598.758 158.75 519.648 112.012 432 99.359 c 432
 48 l 456 48 l 464.574 48 472.496 43.426 476.785 36 c 481.07 28.574 481.07
 19.426 476.785 12 c 472.496 4.574 464.574 0 456 0 c h
361.824 144.863 m 376.586 143.723 391.414 143.723 406.176 144.863 c 480.418
 150.598 549.551 184.863 599.074 240.469 c 648.594 296.074 674.656 368.699
 671.785 443.105 c 668.918 517.512 637.344 587.914 583.684 639.543 c 530.027
 691.168 458.461 720.008 384 720.008 c 309.539 720.008 237.973 691.168 184.316
 639.543 c 130.656 587.914 99.082 517.512 96.215 443.105 c 93.344 368.699
 119.406 296.074 168.926 240.469 c 218.449 184.863 287.582 150.598 361.824
 144.863 c 0 168 m 0 204.145 15.984 236.594 41.281 258.574 c 78.336 185.625
 137.625 126.336 210.574 89.281 c 189.062 64.523 158.355 49.652 125.594 
48.125 c 92.832 46.598 60.871 58.543 37.145 81.188 c 13.422 103.832 0 135.203
 0 168 c 648 48 m 611.855 48 579.406 63.984 557.426 89.281 c 630.375 126.336
 689.664 185.625 726.719 258.574 c 751.477 237.062 766.348 206.355 767.875
 173.594 c 769.402 140.832 757.457 108.871 734.812 85.145 c 712.168 61.422
 680.797 48 648 48 c f
Q Q
showpage
%%Trailer
%%EOF
