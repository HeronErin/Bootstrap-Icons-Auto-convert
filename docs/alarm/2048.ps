%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:07 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 528 m 816 510.852 806.852 495.004 792 486.43 c 777.148 477.855 758.852
 477.855 744 486.43 c 729.148 495.004 720 510.852 720 528 c 720 850.754 
l 582.816 1079.234 l 582.816 1079.23 l 573.984 1093.945 573.672 1112.254
 582 1127.258 c 590.328 1142.262 606.027 1151.688 623.184 1151.977 c 640.344
 1152.27 656.352 1143.387 665.184 1128.672 c 809.184 888.672 l 813.648 881.215
 816.004 872.688 816 864 c h
816 528 m f
624 0 m 606.852 0 591.004 9.148 582.43 24 c 573.855 38.852 573.855 57.148
 582.43 72 c 591.004 86.852 606.852 96 624 96 c 672 96 l 672 198.719 l 496.715
 224.043 338.512 317.531 231.773 458.859 c 125.039 600.188 78.402 777.934
 102 953.461 c 125.598 1128.984 217.52 1288.102 357.793 1396.223 c 300 1454.016
 l 290.988 1463.016 285.918 1475.23 285.91 1487.965 c 285.898 1500.703 290.953
 1512.922 299.953 1521.938 c 308.953 1530.949 321.164 1536.02 333.902 1536.027
 c 346.641 1536.035 358.859 1530.984 367.871 1521.984 c 439.488 1450.367
 l 539.809 1506.68 652.957 1536.172 768 1536 c 883.043 1536.172 996.191 
1506.68 1096.512 1450.367 c 1168.129 1521.984 l 1180.27 1534.109 1197.957
 1538.836 1214.527 1534.383 c 1231.098 1529.93 1244.035 1516.973 1248.465
 1500.398 c 1252.891 1483.82 1248.141 1466.141 1236 1454.016 c 1178.305 
1396.223 l 1318.578 1288.094 1410.5 1128.965 1434.086 953.43 c 1457.676 
777.898 1411.023 600.148 1304.27 458.824 c 1197.516 317.5 1039.297 224.023
 864 198.719 c 864 96 l 912 96 l 929.148 96 944.996 86.852 953.57 72 c 962.145
 57.148 962.145 38.852 953.57 24 c 944.996 9.148 929.148 0 912 0 c h
723.648 289.727 m 753.172 287.449 782.828 287.449 812.352 289.727 c 960.832
 301.195 1099.102 369.723 1198.145 480.938 c 1297.188 592.148 1349.309 737.398
 1343.574 886.211 c 1337.836 1035.023 1274.684 1175.828 1167.371 1279.082
 c 1060.059 1382.34 916.922 1440.02 768 1440.02 c 619.078 1440.02 475.941
 1382.34 368.629 1279.082 c 261.316 1175.828 198.164 1035.023 192.426 886.211
 c 186.691 737.398 238.812 592.148 337.855 480.938 c 436.898 369.723 575.168
 301.195 723.648 289.727 c 0 336 m 0 408.289 31.969 473.184 82.559 517.152
 c 156.676 371.246 275.246 252.676 421.152 178.559 c 389.078 141.652 346.492
 115.422 299.098 103.379 c 251.703 91.34 201.766 94.062 155.961 111.184 
c 110.156 128.309 70.676 159.012 42.805 199.191 c 14.934 239.367 -0.004 
287.102 0 336 c 1296 96 m 1223.711 96 1158.816 127.969 1114.848 178.559 
c 1260.754 252.676 1379.324 371.246 1453.441 517.152 c 1490.348 485.078 
1516.578 442.492 1528.621 395.098 c 1540.66 347.703 1537.938 297.766 1520.816
 251.961 c 1503.691 206.156 1472.988 166.676 1432.809 138.805 c 1392.633
 110.934 1344.898 95.996 1296 96 c f
Q Q
showpage
%%Trailer
%%EOF
