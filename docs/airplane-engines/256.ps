%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:45 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 68x68mm 192 192 0 () ()
%%BoundingBox: 0 0 192 192
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 68x68mm
%%PageBoundingBox: 0 0 192 192
192 192 cairo_set_page_size
%%EndPageSetup
q 0 0 192 192 rectclip
1 0 0 -1 0 192 cm q
0 g
96 0 m 86.555 0 80.496 7.105 77.137 13.812 c 73.812 20.738 72.059 28.316
 72 36 c 72 80.293 l 48 92.293 l 48 90 l 48 88.41 47.367 86.883 46.242 85.758
 c 45.117 84.633 43.59 84 42 84 c 30 84 l 26.688 84 24 86.688 24 90 c 24
 104.293 l 9.961 111.312 l 6.969 112.805 4.449 115.105 2.691 117.949 c 0.934
 120.793 0 124.07 0 127.414 c 0 144 l 0 145.762 0.777 147.438 2.121 148.574
 c 3.469 149.715 5.246 150.207 6.984 149.914 c 26.555 146.648 l 30.312 157.891
 l 30.312 157.895 l 31.133 160.34 33.422 161.988 36 161.988 c 38.578 161.988
 40.867 160.34 41.688 157.895 c 46.547 143.328 l 73.066 138.898 l 77.566
 165.934 l 61.75 181.75 l 61.754 181.754 l 60.031 183.469 59.516 186.051
 60.445 188.297 c 61.379 190.543 63.57 192.004 66 192 c 126 192 l 128.43
 192.004 130.621 190.543 131.555 188.297 c 132.484 186.051 131.969 183.469
 130.246 181.754 c 114.43 165.938 l 118.93 138.902 l 145.449 143.332 l 150.309
 157.898 l 150.312 157.895 l 151.133 160.34 153.422 161.988 156 161.988 
c 158.578 161.988 160.867 160.34 161.688 157.895 c 165.445 146.652 l 185.004
 149.918 l 185.004 149.914 l 186.746 150.211 188.527 149.719 189.875 148.582
 c 191.223 147.441 192 145.766 192 144 c 192 127.414 l 192 124.07 191.066
 120.793 189.309 117.949 c 187.551 115.105 185.031 112.805 182.039 111.312
 c 168 104.293 l 168 90 l 168 88.41 167.367 86.883 166.242 85.758 c 165.117
 84.633 163.59 84 162 84 c 150 84 l 146.688 84 144 86.688 144 90 c 144 92.293
 l 120 80.293 l 120 36 l 120 29.184 118.32 20.746 114.863 13.812 c 111.504
 7.094 105.445 0 96 0 c 84 36 m 84 30.816 85.32 24.254 87.863 19.188 c 90.504
 13.906 93.445 12 96 12 c 98.555 12 101.496 13.895 104.137 19.188 c 106.668
 24.238 108 30.828 108 36 c 108 84 l 108 86.27 109.281 88.348 111.312 89.363
 c 176.688 122.051 l 178.719 123.07 180 125.145 180 127.414 c 180 136.918
 l 114.984 126.082 l 114.984 126.086 l 111.723 125.543 108.633 127.742 108.086
 131.004 c 102.086 167.004 l 101.762 168.922 102.387 170.875 103.766 172.246
 c 111.52 180 l 80.484 180 l 88.25 172.246 l 88.246 172.246 l 89.621 170.879
 90.246 168.93 89.93 167.016 c 83.93 131.016 l 83.668 129.445 82.789 128.043
 81.496 127.117 c 80.199 126.191 78.586 125.82 77.016 126.086 c 12 136.922
 l 12 127.414 l 12 125.145 13.281 123.07 15.312 122.051 c 80.688 89.363 
l 82.719 88.348 84 86.27 84 84 c h
84 36 m f
Q Q
showpage
%%Trailer
%%EOF
