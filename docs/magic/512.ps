%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:55 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 11 11 376 376
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 11 11 376 376
384 384 cairo_set_page_size
%%EndPageSetup
q 11 11 365 365 rectclip
1 0 0 -1 0 384 cm q
0 g
228 64.129 m 228 70.754 233.371 76.129 240 76.129 c 246.629 76.129 252 
70.754 252 64.129 c 252 20.23 l 252 13.605 246.629 8.23 240 8.23 c 233.371
 8.23 228 13.605 228 20.23 c h
336 64.969 m 340.547 60.258 340.484 52.773 335.855 48.145 c 331.227 43.516
 323.742 43.453 319.031 48 c 288 79.031 l 285.684 81.27 284.363 84.34 284.336
 87.559 c 284.309 90.777 285.574 93.871 287.852 96.148 c 290.129 98.426 
293.223 99.691 296.441 99.664 c 299.66 99.637 302.73 98.316 304.969 96 c
 h
175.031 96 m 177.27 98.316 180.34 99.637 183.559 99.664 c 186.777 99.691
 189.871 98.426 192.148 96.148 c 194.426 93.871 195.691 90.777 195.664 87.559
 c 195.637 84.34 194.316 81.27 192 79.031 c 160.969 48 l 156.258 43.453 
148.773 43.516 144.145 48.145 c 139.516 52.773 139.453 60.258 144 64.969
 c h
160.129 156 m 166.754 156 172.129 150.629 172.129 144 c 172.129 137.371
 166.754 132 160.129 132 c 116.23 132 l 109.605 132 104.23 137.371 104.23
 144 c 104.23 150.629 109.605 156 116.23 156 c h
363.77 156 m 370.395 156 375.77 150.629 375.77 144 c 375.77 137.371 370.395
 132 363.77 132 c 319.871 132 l 313.246 132 307.871 137.371 307.871 144 
c 307.871 150.629 313.246 156 319.871 156 c h
319.031 240 m 321.27 242.316 324.34 243.637 327.559 243.664 c 330.777 243.691
 333.871 242.426 336.148 240.148 c 338.426 237.871 339.691 234.777 339.664
 231.559 c 339.637 228.34 338.316 225.27 336 223.031 c 304.969 192 l 302.73
 189.684 299.66 188.363 296.441 188.336 c 293.223 188.309 290.129 189.574
 287.852 191.852 c 285.574 194.129 284.309 197.223 284.336 200.441 c 284.363
 203.66 285.684 206.73 288 208.969 c h
228 267.77 m 228 274.395 233.371 279.77 240 279.77 c 246.629 279.77 252
 274.395 252 267.77 c 252 223.871 l 252 217.246 246.629 211.871 240 211.871
 c 233.371 211.871 228 217.246 228 223.871 c h
272.496 145.441 m 277.164 140.758 277.164 133.18 272.496 128.496 c 255.504
 111.504 l 250.816 106.82 243.223 106.82 238.535 111.504 c 207.504 142.559
 l 202.82 147.246 202.82 154.844 207.504 159.527 c 224.496 176.52 l 229.184
 181.203 236.777 181.203 241.465 176.52 c 272.496 145.488 l h
200.496 217.441 m 205.164 212.758 205.164 205.18 200.496 200.496 c 183.504
 183.504 l 178.816 178.82 171.223 178.82 166.535 183.504 c 15.504 334.559
 l 10.82 339.246 10.82 346.844 15.504 351.527 c 32.496 368.52 l 37.184 373.203
 44.777 373.203 49.465 368.52 c h
200.496 217.441 m f
Q Q
showpage
%%Trailer
%%EOF
