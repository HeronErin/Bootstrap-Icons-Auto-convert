%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 24 11 724 577
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 24 11 724 577
768 768 cairo_set_page_size
%%EndPageSetup
q 24 11 700 566 rectclip
1 0 0 -1 0 768 cm q
0 g
394.414 531.266 m 452.781 531.266 487.918 489.555 487.918 420.387 c 487.918
 386.691 l 487.918 317.57 453.023 276.051 395.324 276.051 c 359.707 276.051
 331.582 292.707 323.371 318.723 c 320.348 318.723 l 320.352 191.184 l 258.43
 191.184 l 258.434 528 l 319.395 528 l 319.395 490.031 l 322.465 490.031
 l 332.543 515.566 359.711 531.312 394.418 531.312 c h
373.773 482.066 m 342.094 482.066 320.348 457.203 320.348 420.625 c 320.352
 389.762 l 320.352 350.16 340.512 325.297 373.055 325.297 c 405.887 325.297
 424.656 350.16 424.656 393.266 c 424.656 414.867 l 424.656 457.492 406.129
 482.113 373.777 482.113 c h
105.789 531.746 m 142.605 531.746 163.438 514.656 173.277 496.371 c 176.109
 496.371 l 176.113 528 l 234.48 528 l 234.48 360.91 l 234.48 297.84 189.023
 275.324 133.199 275.324 c 65.039 275.328 36 308.16 33.121 348.961 c 91.488
 348.961 l 94.559 333.457 106.512 322.465 131.809 322.465 c 157.105 322.465
 173.281 334.418 173.281 359.473 c 173.281 381.746 l 112.609 381.742 l 54.961
 381.742 24 411.266 24 455.809 c 24 502.703 57.266 531.746 105.793 531.746
 c 125.953 486.289 m 104.832 486.289 85.395 475.008 85.395 451.824 c 85.395
 432.863 98.305 418.992 125.715 418.992 c 173.281 418.992 l 173.281 444.816
 l 173.281 468.961 151.969 486.289 125.953 486.289 c 553.008 513.504 m 525.312
 494.305 509.809 461.281 509.809 418.32 c 509.809 387.121 l 509.809 318.961
 552.719 274.898 620.449 274.898 c 685.344 274.898 722.16 314.258 723.121
 361.586 c 666.145 361.586 l 664.223 344.738 652.559 324.34 622.082 324.34
 c 589.73 324.34 571.922 349.156 571.922 388.082 c 571.922 418.082 l 571.922
 440.547 577.73 458.113 588.387 469.297 c h
553.008 513.504 m f
694.512 451.871 m 701.977 457.84 706.766 466.527 707.82 476.027 c 708.871
 485.527 706.105 495.055 700.129 502.512 c 508.129 742.512 l 501.727 750.504
 492.223 755.391 482 755.949 c 471.773 756.508 461.797 752.688 454.559 745.441
 c 334.559 625.441 l 327.414 618.781 323.281 609.504 323.109 599.738 c 322.934
 589.969 326.738 580.555 333.645 573.645 c 340.555 566.738 349.969 562.934
 359.738 563.109 c 369.504 563.281 378.781 567.414 385.441 574.559 c 477.027
 666.094 l 643.875 457.484 l 643.871 457.488 l 649.84 450.023 658.527 445.234
 668.027 444.18 c 677.527 443.129 687.055 445.895 694.512 451.871 c f
Q Q
showpage
%%Trailer
%%EOF
