%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:19 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
432 576 m 449.148 576 464.996 566.852 473.57 552 c 482.145 537.148 482.145
 518.852 473.57 504 c 464.996 489.148 449.148 480 432 480 c 414.852 480 
399.004 489.148 390.43 504 c 381.855 518.852 381.855 537.148 390.43 552 
c 399.004 566.852 414.852 576 432 576 c 576 576 m 593.148 576 608.996 566.852
 617.57 552 c 626.145 537.148 626.145 518.852 617.57 504 c 608.996 489.148
 593.148 480 576 480 c 558.852 480 543.004 489.148 534.43 504 c 525.855 
518.852 525.855 537.148 534.43 552 c 543.004 566.852 558.852 576 576 576
 c 768 528 m 768 545.148 758.852 560.996 744 569.57 c 729.148 578.145 710.852
 578.145 696 569.57 c 681.148 560.996 672 545.148 672 528 c 672 510.852 
681.148 495.004 696 486.43 c 710.852 477.855 729.148 477.855 744 486.43 
c 758.852 495.004 768 510.852 768 528 c f
1152 96 m 1185.703 96 1218.812 104.871 1248 121.723 c 1277.188 138.574 
1301.426 162.812 1318.277 192 c 1335.129 221.188 1344 254.297 1344 288 c
 1377.703 288 1410.812 296.871 1440 313.723 c 1469.188 330.574 1493.426 
354.812 1510.277 384 c 1527.129 413.188 1536 446.297 1536 480 c 1536 1248
 l 1536 1281.703 1527.129 1314.812 1510.277 1344 c 1493.426 1373.188 1469.188
 1397.426 1440 1414.277 c 1410.812 1431.129 1377.703 1440 1344 1440 c 384
 1440 l 333.078 1440 284.242 1419.773 248.234 1383.766 c 212.227 1347.758
 192 1298.922 192 1248 c 141.078 1248 92.242 1227.773 56.234 1191.766 c 
20.227 1155.758 0 1106.922 0 1056 c 0 288 l 0 237.078 20.227 188.242 56.234
 152.234 c 92.242 116.227 141.078 96 192 96 c h
192 1152 m 192 480 l 192 429.078 212.227 380.242 248.234 344.234 c 284.242
 308.227 333.078 288 384 288 c 1248 288 l 1248 262.539 1237.887 238.121 
1219.883 220.117 c 1201.879 202.113 1177.461 192 1152 192 c 192 192 l 166.539
 192 142.121 202.113 124.117 220.117 c 106.113 238.121 96 262.539 96 288
 c 96 1056 l 96 1081.461 106.113 1105.879 124.117 1123.883 c 142.121 1141.887
 166.539 1152 192 1152 c 288 768 m 288 1248 l 288 1273.461 298.113 1297.879
 316.117 1315.883 c 334.121 1333.887 358.539 1344 384 1344 c 1344 1344 l
 1369.461 1344 1393.879 1333.887 1411.883 1315.883 c 1429.887 1297.879 1440
 1273.461 1440 1248 c 1440 768 l h
1440 672 m 1440 480 l 1440 454.539 1429.887 430.121 1411.883 412.117 c 
1393.879 394.113 1369.461 384 1344 384 c 384 384 l 358.539 384 334.121 394.113
 316.117 412.117 c 298.113 430.121 288 454.539 288 480 c 288 672 l h
1440 672 m f
Q Q
showpage
%%Trailer
%%EOF
