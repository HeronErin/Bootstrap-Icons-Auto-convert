%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:04 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 24 0 360 360
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 24 0 360 360
384 384 cairo_set_page_size
%%EndPageSetup
q 24 0 336 360 rectclip
1 0 0 -1 0 384 cm q
0 g
108 24 m 98.453 24 89.297 27.793 82.543 34.543 c 75.793 41.297 72 50.453
 72 60 c 72 72 l 168 72 l 168 60 l 168 50.453 164.207 41.297 157.457 34.543
 c 150.703 27.793 141.547 24 132 24 c h
168 96 m 168 120 l 216 120 l 216 96 l 312 96 l 312 117.168 l 312 121.711
 314.562 125.863 318.625 127.895 c 340.105 138.621 l 340.105 138.625 l 346.086
 141.613 351.113 146.211 354.629 151.902 c 358.141 157.59 360.004 164.145
 360 170.832 c 360 312 l 216 312 l 216 276 l 215.996 272.816 217.254 269.758
 219.504 267.504 c 240 247.031 l 240 228 l 240 224.816 238.734 221.766 236.484
 219.516 c 234.234 217.266 231.184 216 228 216 c 156 216 l 149.371 216 144
 221.371 144 228 c 144 247.031 l 164.496 267.504 l 166.746 269.758 168.004
 272.816 168 276 c 168 312 l 24 312 l 24 170.832 l 24 164.145 25.863 157.586
 29.383 151.898 c 32.902 146.207 37.934 141.613 43.922 138.625 c 65.379 
127.898 l 65.375 127.895 l 69.438 125.863 72 121.711 72 117.168 c 72 96 
l h
24 336 m 24 348 l 24 357.547 27.793 366.703 34.543 373.457 c 41.297 380.207
 50.453 384 60 384 c 132 384 l 141.547 384 150.703 380.207 157.457 373.457
 c 164.207 366.703 168 357.547 168 348 c 168 336 l h
216 336 m 216 348 l 216 357.547 219.793 366.703 226.543 373.457 c 233.297
 380.207 242.453 384 252 384 c 324 384 l 333.547 384 342.703 380.207 349.457
 373.457 c 356.207 366.703 360 357.547 360 348 c 360 336 l h
312 72 m 216 72 l 216 60 l 216 50.453 219.793 41.297 226.543 34.543 c 233.297
 27.793 242.453 24 252 24 c 276 24 l 285.547 24 294.703 27.793 301.457 34.543
 c 308.207 41.297 312 50.453 312 60 c h
312 72 m f
Q Q
showpage
%%Trailer
%%EOF
