%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 0 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 0 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 48 0 672 720 rectclip
1 0 0 -1 0 768 cm q
0 g
216 48 m 196.906 48 178.59 55.586 165.09 69.09 c 151.586 82.59 144 100.906
 144 120 c 144 144 l 336 144 l 336 120 l 336 100.906 328.414 82.59 314.91
 69.09 c 301.41 55.586 283.094 48 264 48 c h
336 192 m 336 240 l 432 240 l 432 192 l 624 192 l 624 234.336 l 624 238.789
 625.238 243.156 627.578 246.945 c 629.918 250.734 633.266 253.797 637.246
 255.793 c 680.207 277.25 l 680.207 277.246 l 692.168 283.23 702.227 292.426
 709.254 303.805 c 716.285 315.18 720.004 328.289 720 341.664 c 720 624 
l 432 624 l 432 552 l 431.988 545.629 434.508 539.52 439.008 535.008 c 480
 494.062 l 480 456 l 480 449.637 477.473 443.531 472.969 439.031 c 468.469
 434.527 462.363 432 456 432 c 312 432 l 305.637 432 299.531 434.527 295.031
 439.031 c 290.527 443.531 288 449.637 288 456 c 288 494.062 l 328.992 535.008
 l 333.492 539.52 336.012 545.629 336 552 c 336 624 l 48 624 l 48 341.664
 l 48 328.285 51.727 315.172 58.766 303.793 c 65.801 292.418 75.871 283.223
 87.84 277.246 c 130.75 255.789 l 130.754 255.793 l 134.734 253.797 138.082
 250.734 140.422 246.945 c 142.762 243.156 144 238.789 144 234.336 c 144
 192 l h
48 672 m 48 696 l 48 715.094 55.586 733.41 69.09 746.91 c 82.59 760.414
 100.906 768 120 768 c 264 768 l 283.094 768 301.41 760.414 314.91 746.91
 c 328.414 733.41 336 715.094 336 696 c 336 672 l h
432 672 m 432 696 l 432 715.094 439.586 733.41 453.09 746.91 c 466.59 760.414
 484.906 768 504 768 c 648 768 l 667.094 768 685.41 760.414 698.91 746.91
 c 712.414 733.41 720 715.094 720 696 c 720 672 l h
624 144 m 432 144 l 432 120 l 432 100.906 439.586 82.59 453.09 69.09 c 
466.59 55.586 484.906 48 504 48 c 552 48 l 571.094 48 589.41 55.586 602.91
 69.09 c 616.414 82.59 624 100.906 624 120 c h
624 144 m f
Q Q
showpage
%%Trailer
%%EOF
