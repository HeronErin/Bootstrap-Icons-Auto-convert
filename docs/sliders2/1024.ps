%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 48 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 48 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 48 48 672 672 rectclip
1 0 0 -1 0 768 cm q
0 g
504 48 m 510.363 48 516.469 50.527 520.969 55.031 c 525.473 59.531 528 
65.637 528 72 c 528 264 l 528 272.574 523.426 280.496 516 284.785 c 508.574
 289.07 499.426 289.07 492 284.785 c 484.574 280.496 480 272.574 480 264
 c 480 192 l 72 192 l 63.426 192 55.504 187.426 51.215 180 c 46.93 172.574
 46.93 163.426 51.215 156 c 55.504 148.574 63.426 144 72 144 c 480 144 l
 480 72 l 480 65.637 482.527 59.531 487.031 55.031 c 491.531 50.527 497.637
 48 504 48 c 576 168 m 576 161.637 578.527 155.531 583.031 151.031 c 587.531
 146.527 593.637 144 600 144 c 696 144 l 704.574 144 712.496 148.574 716.785
 156 c 721.07 163.426 721.07 172.574 716.785 180 c 712.496 187.426 704.574
 192 696 192 c 600 192 l 593.637 192 587.531 189.473 583.031 184.969 c 578.527
 180.469 576 174.363 576 168 c 264 264 m 270.363 264 276.469 266.527 280.969
 271.031 c 285.473 275.531 288 281.637 288 288 c 288 360 l 696 360 l 704.574
 360 712.496 364.574 716.785 372 c 721.07 379.426 721.07 388.574 716.785
 396 c 712.496 403.426 704.574 408 696 408 c 288 408 l 288 480 l 288 488.574
 283.426 496.496 276 500.785 c 268.574 505.07 259.426 505.07 252 500.785
 c 244.574 496.496 240 488.574 240 480 c 240 288 l 240 281.637 242.527 275.531
 247.031 271.031 c 251.531 266.527 257.637 264 264 264 c 48 384 m 48 377.637
 50.527 371.531 55.031 367.031 c 59.531 362.527 65.637 360 72 360 c 168 
360 l 176.574 360 184.496 364.574 188.785 372 c 193.07 379.426 193.07 388.574
 188.785 396 c 184.496 403.426 176.574 408 168 408 c 72 408 l 65.637 408
 59.531 405.473 55.031 400.969 c 50.527 396.469 48 390.363 48 384 c 504 
480 m 510.363 480 516.469 482.527 520.969 487.031 c 525.473 491.531 528 
497.637 528 504 c 528 696 l 528 704.574 523.426 712.496 516 716.785 c 508.574
 721.07 499.426 721.07 492 716.785 c 484.574 712.496 480 704.574 480 696
 c 480 624 l 72 624 l 63.426 624 55.504 619.426 51.215 612 c 46.93 604.574
 46.93 595.426 51.215 588 c 55.504 580.574 63.426 576 72 576 c 480 576 l
 480 504 l 480 497.637 482.527 491.531 487.031 487.031 c 491.531 482.527
 497.637 480 504 480 c 576 600 m 576 593.637 578.527 587.531 583.031 583.031
 c 587.531 578.527 593.637 576 600 576 c 696 576 l 704.574 576 712.496 580.574
 716.785 588 c 721.07 595.426 721.07 604.574 716.785 612 c 712.496 619.426
 704.574 624 696 624 c 600 624 l 593.637 624 587.531 621.473 583.031 616.969
 c 578.527 612.469 576 606.363 576 600 c f*
Q Q
showpage
%%Trailer
%%EOF
