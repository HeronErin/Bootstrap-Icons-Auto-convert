%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 0 m 485.844 0 583.516 40.457 655.527 112.473 c 727.543 184.484 768 
282.156 768 384 c 768 485.844 727.543 583.516 655.527 655.527 c 583.516 
727.543 485.844 768 384 768 c 282.156 768 184.484 727.543 112.473 655.527
 c 40.457 583.516 0 485.844 0 384 c 0 282.156 40.457 184.484 112.473 112.473
 c 184.484 40.457 282.156 0 384 0 c 336 456 m 336 416.258 314.496 384 288
 384 c 261.504 384 240 416.258 240 456 c 240 495.742 261.504 528 288 528
 c 314.496 528 336 495.742 336 456 c 205.68 308.785 m 211.191 311.965 217.742
 312.828 223.891 311.18 c 230.039 309.535 235.281 305.512 238.465 300 c 
253.211 274.453 274.426 253.242 299.977 238.496 c 325.523 223.75 354.504
 215.992 384 216 c 446.16 216 500.449 249.742 529.535 300 c 533.852 307.363
 541.758 311.883 550.293 311.863 c 558.832 311.844 566.715 307.293 571 299.906
 c 575.281 292.523 575.324 283.422 571.105 276 c 552.141 243.156 524.867
 215.887 492.023 196.93 c 459.18 177.969 421.922 167.992 384 168 c 346.078
 167.992 308.82 177.969 275.977 196.93 c 243.133 215.887 215.859 243.156
 196.895 276 c 193.715 281.512 192.852 288.062 194.5 294.211 c 196.145 300.359
 200.168 305.602 205.68 308.785 c 480 384 m 453.504 384 432 416.258 432 
456 c 432 495.742 453.504 528 480 528 c 506.496 528 528 495.742 528 456 
c 528 416.258 506.496 384 480 384 c f
Q Q
showpage
%%Trailer
%%EOF
