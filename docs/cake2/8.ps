%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 2x2mm 6 6 0 () ()
%%BoundingBox: 0 0 6 6
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 2x2mm
%%PageBoundingBox: 0 0 6 6
6 6 cairo_set_page_size
%%EndPageSetup
q 0 0 6 6 rectclip
1 0 0 -1 0 6 cm q
0 g
1.309 0.004 m 1.086 0.301 l 1 0.418 1.016 0.582 1.125 0.68 c 1.125 1.688
 l 1.07 1.699 1.016 1.715 0.965 1.727 c 0.703 1.797 0.477 1.883 0.309 1.988
 c 0.152 2.086 0 2.234 0 2.438 c 0 5.062 l 0 5.266 0.152 5.414 0.309 5.512
 c 0.473 5.617 0.699 5.703 0.965 5.773 c 1.492 5.914 2.211 6 3 6 c 3.789
 6 4.508 5.914 5.035 5.773 c 5.297 5.703 5.523 5.617 5.691 5.512 c 5.848
 5.414 6 5.266 6 5.062 c 6 2.438 l 6 2.234 5.848 2.086 5.691 1.988 c 5.527
 1.883 5.301 1.797 5.035 1.727 c 4.984 1.711 4.93 1.699 4.875 1.688 c 4.875
 0.676 l 4.98 0.578 4.996 0.418 4.91 0.301 c 4.688 0.004 l 4.465 0.301 l
 4.461 0.301 l 4.375 0.418 4.391 0.582 4.5 0.68 c 4.5 1.613 l 4.25 1.574
 4 1.543 3.75 1.527 c 3.75 0.676 l 3.855 0.578 3.871 0.418 3.785 0.301 c
 3.562 0.004 l 3.34 0.301 l 3.336 0.301 l 3.25 0.418 3.266 0.582 3.375 0.68
 c 3.375 1.508 l 3.125 1.496 2.875 1.496 2.625 1.508 c 2.625 0.676 l 2.73
 0.578 2.746 0.418 2.66 0.301 c 2.438 0.004 l 2.215 0.301 l 2.211 0.301 
l 2.125 0.418 2.141 0.582 2.25 0.68 c 2.25 1.527 l 1.984 1.547 1.73 1.574
 1.5 1.613 c 1.5 0.676 l 1.605 0.578 1.621 0.418 1.535 0.301 c h
1.059 2.086 m 1.125 2.07 l 1.125 2.434 l 1.242 2.461 1.367 2.488 1.5 2.508
 c 1.5 1.992 l 1.75 1.949 2 1.922 2.25 1.902 c 2.25 2.598 l 2.371 2.605 
2.496 2.613 2.625 2.617 c 2.625 1.883 l 2.875 1.871 3.125 1.871 3.375 1.883
 c 3.375 2.621 l 3.504 2.617 3.629 2.609 3.75 2.602 c 3.75 1.902 l 4.02 
1.922 4.273 1.953 4.5 1.992 c 4.5 2.508 l 4.633 2.484 4.758 2.461 4.875 
2.434 c 4.875 2.07 l 4.941 2.086 l 5.188 2.152 5.371 2.227 5.492 2.301 c
 5.621 2.383 5.625 2.434 5.625 2.434 c 5.625 2.438 5.621 2.484 5.492 2.566
 c 5.371 2.641 5.188 2.715 4.941 2.781 c 4.453 2.918 3.766 3 3 3 c 2.234
 3 1.547 2.918 1.059 2.785 c 0.812 2.719 0.629 2.645 0.508 2.57 c 0.379 
2.488 0.375 2.441 0.375 2.438 c 0.375 2.434 0.379 2.387 0.508 2.305 c 0.629
 2.23 0.812 2.156 1.059 2.09 c 5.625 2.926 m 5.625 3.312 l 5.371 3.652 l
 5.27 3.789 5.082 3.832 4.93 3.758 c 4.652 3.617 4.312 3.672 4.094 3.891
 c 3.961 4.023 l 3.832 4.156 3.621 4.168 3.473 4.059 c 3.449 4.043 l 3.449
 4.039 l 3.184 3.84 2.816 3.84 2.551 4.039 c 2.527 4.055 l 2.527 4.059 l
 2.379 4.168 2.168 4.152 2.039 4.023 c 1.906 3.891 l 1.688 3.672 1.348 3.617
 1.07 3.754 c 0.918 3.832 0.734 3.789 0.633 3.652 c 0.375 3.309 l 0.375 
2.926 l 0.531 3.012 0.734 3.086 0.965 3.148 c 1.492 3.289 2.211 3.375 3 
3.375 c 3.789 3.375 4.508 3.289 5.035 3.148 c 5.266 3.086 5.465 3.012 5.625
 2.926 c 5.625 3.93 m 5.625 5.062 l 5.625 5.066 5.621 5.113 5.492 5.195 
c 5.371 5.27 5.188 5.344 4.941 5.41 c 4.453 5.543 3.766 5.625 3 5.625 c 
2.234 5.625 1.547 5.543 1.059 5.41 c 0.812 5.344 0.629 5.27 0.508 5.195 
c 0.379 5.113 0.375 5.062 0.375 5.062 c 0.375 3.93 l 0.594 4.172 0.945 4.238
 1.238 4.09 c 1.371 4.023 1.535 4.051 1.641 4.156 c 1.77 4.289 l 1.773 4.289
 l 2.035 4.551 2.453 4.582 2.754 4.355 c 2.777 4.34 l 2.773 4.34 l 2.91 
4.242 3.09 4.242 3.227 4.34 c 3.25 4.355 l 3.246 4.355 l 3.547 4.582 3.965
 4.551 4.227 4.289 c 4.359 4.156 l 4.465 4.051 4.629 4.023 4.762 4.09 c 
5.055 4.234 5.406 4.168 5.625 3.93 c f
Q Q
showpage
%%Trailer
%%EOF
