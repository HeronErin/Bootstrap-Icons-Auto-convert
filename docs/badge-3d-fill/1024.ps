%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
487.535 286.465 m 447.023 286.465 l 447.023 481.344 l 487.535 481.344 l
 541.102 481.344 565.344 449.328 565.344 384.383 c 565.344 319.391 540.863
 286.461 487.535 286.461 c f
0 192 m 0 166.539 10.113 142.121 28.117 124.117 c 46.121 106.113 70.539
 96 96 96 c 672 96 l 697.461 96 721.879 106.113 739.883 124.117 c 757.887
 142.121 768 166.539 768 192 c 768 576 l 768 601.461 757.887 625.879 739.883
 643.883 c 721.879 661.887 697.461 672 672 672 c 96 672 l 70.539 672 46.121
 661.887 28.117 643.883 c 10.113 625.879 0 601.461 0 576 c h
248.832 401.664 m 279.84 401.664 299.473 419.809 299.711 444.863 c 300.094
 470.641 279.215 488.977 247.582 488.977 c 218.879 488.785 197.805 473.375
 196.316 452.688 c 144 452.688 l 145.441 496.559 181.969 533.711 247.344
 533.711 c 306.863 533.711 357.023 502.031 356.398 447.406 c 355.773 401.664
 320.543 381.168 294.383 378.672 c 294.383 375.695 l 315.504 372.336 348.383
 350.398 347.566 309.695 c 346.941 266.207 309.168 234.336 249.023 234.574
 c 186.145 234.812 150.961 269.805 149.473 314.734 c 202.418 314.734 l 203.473
 295.965 220.801 278.688 247.348 278.688 c 272.883 278.688 291.891 294.527
 291.891 317.711 c 292.082 340.703 273.508 357.789 247.348 357.789 c 217.012
 357.789 l 217.012 401.66 l h
390.047 528 m 495.117 528 l 582 528 624 474.863 624 383.281 c 624 292.371
 582.672 240.051 495.121 240.051 c 390.047 240.047 l h
390.047 528 m f
Q Q
showpage
%%Trailer
%%EOF
