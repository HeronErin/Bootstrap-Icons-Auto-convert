%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 120 768 649
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 120 768 649
768 768 cairo_set_page_size
%%EndPageSetup
q 0 120 768 529 rectclip
1 0 0 -1 0 768 cm q
0 g
460.078 123.266 m 464.77 125.996 468.395 130.234 470.363 135.289 c 472.336
 140.348 472.535 145.922 470.93 151.105 c 416.496 327.938 l 512.016 327.938
 l 518.301 327.934 524.336 330.395 528.824 334.797 c 533.312 339.195 535.898
 345.18 536.02 351.461 c 536.145 357.746 533.801 363.828 529.488 368.398
 c 273.457 640.414 l 268.465 645.723 261.332 648.477 254.07 647.898 c 246.809
 647.32 240.199 643.477 236.109 637.449 c 232.02 631.418 230.891 623.859
 233.039 616.895 c 287.52 440.016 l 192 440.016 l 185.715 440.02 179.68 
437.555 175.191 433.156 c 170.703 428.758 168.121 422.773 167.996 416.488
 c 167.871 410.207 170.215 404.125 174.527 399.551 c 430.512 127.535 l 434.227
 123.578 439.172 120.996 444.543 120.215 c 449.91 119.43 455.391 120.488
 460.078 123.215 c h
460.078 123.266 m f
96 192 m 303.938 192 l 258.816 240 l 96 240 l 83.27 240 71.062 245.059 
62.059 254.059 c 53.059 263.062 48 275.27 48 288 c 48 480 l 48 492.73 53.059
 504.938 62.059 513.941 c 71.062 522.941 83.27 528 96 528 c 210.238 528 
l 195.453 576 l 96 576 l 70.539 576 46.121 565.887 28.117 547.883 c 10.113
 529.879 0 505.461 0 480 c 0 288 l 0 262.539 10.113 238.121 28.117 220.117
 c 46.121 202.113 70.539 192 96 192 c f
96 288 m 213.602 288 l 139.586 366.672 l 124.098 383.133 117.238 405.906
 121.062 428.18 c 124.883 450.453 138.938 469.641 159.023 480 c 96 480 l
 h
508.559 192 m 493.773 240 l 576 240 l 588.73 240 600.938 245.059 609.941
 254.059 c 618.941 263.062 624 275.27 624 288 c 624 480 l 624 492.73 618.941
 504.938 609.941 513.941 c 600.938 522.941 588.73 528 576 528 c 445.246 
528 l 400.031 576 l 576 576 l 601.461 576 625.879 565.887 643.883 547.883
 c 661.887 529.879 672 505.461 672 480 c 672 288 l 672 262.539 661.887 238.121
 643.883 220.117 c 625.879 202.113 601.461 192 576 192 c h
508.559 192 m f
576 480 m 490.414 480 l 564.43 401.328 l 569.102 396.336 572.957 390.895
 575.996 385.008 c h
576 319.008 m 576 288 l 544.992 288 l 558.301 294.859 569.141 305.699 576
 319.008 c 768 384 m 768 403.094 760.414 421.41 746.91 434.91 c 733.41 448.414
 715.094 456 696 456 c 696 312 l 715.094 312 733.41 319.586 746.91 333.09
 c 760.414 346.59 768 364.906 768 384 c f
Q Q
showpage
%%Trailer
%%EOF
