%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 240 1536 1297
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 240 1536 1297
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 240 1536 1057 rectclip
1 0 0 -1 0 1536 cm q
0 g
920.16 246.527 m 929.539 251.988 936.789 260.469 940.73 270.578 c 944.668
 280.691 945.066 291.84 941.855 302.207 c 832.992 655.871 l 1024.031 655.871
 l 1036.602 655.867 1048.672 660.793 1057.648 669.59 c 1066.625 678.391 
1071.793 690.355 1072.043 702.926 c 1072.289 715.492 1067.598 727.656 1058.977
 736.801 c 546.914 1280.832 l 546.91 1280.832 l 536.93 1291.445 522.668 
1296.953 508.141 1295.797 c 493.617 1294.645 480.402 1286.953 472.223 1274.895
 c 464.043 1262.836 461.781 1247.715 466.078 1233.793 c 575.039 880.031 
l 384 880.031 l 371.43 880.035 359.359 875.109 350.383 866.312 c 341.406
 857.516 336.238 845.547 335.988 832.98 c 335.742 820.414 340.434 808.25
 349.055 799.105 c 861.023 255.074 l 861.023 255.07 l 868.453 247.156 878.344
 241.996 889.082 240.426 c 899.824 238.855 910.777 240.973 920.16 246.434
 c h
920.16 246.527 m f
192 384 m 607.871 384 l 517.633 480 l 192 480 l 166.539 480 142.121 490.113
 124.117 508.117 c 106.113 526.121 96 550.539 96 576 c 96 960 l 96 985.461
 106.113 1009.879 124.117 1027.883 c 142.121 1045.887 166.539 1056 192 1056
 c 420.48 1056 l 390.914 1152 l 192 1152 l 141.078 1152 92.242 1131.773 
56.234 1095.766 c 20.227 1059.758 0 1010.922 0 960 c 0 576 l 0 525.078 20.227
 476.242 56.234 440.234 c 92.242 404.227 141.078 384 192 384 c f
192 576 m 427.199 576 l 279.168 733.344 l 248.199 766.262 234.48 811.812
 242.121 856.363 c 249.762 900.91 277.875 939.285 318.047 960 c 192 960 
l h
1017.121 384 m 987.555 480 l 1152 480 l 1177.461 480 1201.879 490.113 1219.883
 508.117 c 1237.887 526.121 1248 550.539 1248 576 c 1248 960 l 1248 985.461
 1237.887 1009.879 1219.883 1027.883 c 1201.879 1045.887 1177.461 1056 1152
 1056 c 890.496 1056 l 800.062 1152 l 1152 1152 l 1185.703 1152 1218.812
 1143.129 1248 1126.277 c 1277.188 1109.426 1301.426 1085.188 1318.277 1056
 c 1335.129 1026.812 1344 993.703 1344 960 c 1344 576 l 1344 542.297 1335.129
 509.188 1318.277 480 c 1301.426 450.812 1277.188 426.574 1248 409.723 c
 1218.812 392.871 1185.703 384 1152 384 c h
1017.121 384 m f
1152 960 m 980.832 960 l 1128.863 802.656 l 1138.207 792.672 1145.918 781.793
 1152 770.016 c h
1152 638.016 m 1152 576 l 1089.984 576 l 1116.602 589.723 1138.277 611.398
 1152 638.016 c 1536 768 m 1536 806.191 1520.828 842.816 1493.824 869.824
 c 1466.816 896.828 1430.191 912 1392 912 c 1392 624 l 1430.191 624 1466.816
 639.172 1493.824 666.176 c 1520.828 693.184 1536 729.809 1536 768 c f
Q Q
showpage
%%Trailer
%%EOF
