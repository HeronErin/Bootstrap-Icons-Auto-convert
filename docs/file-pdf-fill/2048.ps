%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:24 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
530.207 1000.703 m 543.648 992.766 558.336 985.152 574.27 977.855 c 574.273
 977.855 l 560.797 997.918 546.379 1017.332 531.07 1036.031 c 504.191 1068.383
 483.262 1085.566 470.109 1090.941 c 466.75 1092.094 l 466.754 1092.098 
l 465.801 1090.762 464.965 1089.348 464.258 1087.871 c 458.883 1077.312 
459.074 1067.137 468.098 1053.312 c 478.273 1037.473 498.723 1019.328 530.211
 1000.703 c 765.891 842.59 m 754.5 844.957 743.105 847.453 731.715 850.078
 c 731.711 850.078 l 748.641 816.93 764.645 783.316 779.711 749.281 c 794.883
 777.402 811.215 804.883 828.672 831.648 c 807.809 834.719 786.879 838.367
 765.887 842.594 c 1008.285 932.738 m 1008.289 932.734 l 993.406 920.676
 979.445 907.52 966.527 893.375 c 988.543 893.824 1008.129 895.551 1025.281
 898.559 c 1055.715 904.031 1070.016 912.672 1075.008 918.621 c 1075.008
 918.625 l 1076.543 920.309 1077.43 922.488 1077.504 924.77 c 1077.152 931.539
 1075.176 938.121 1071.742 943.969 c 1069.836 948.66 1066.723 952.766 1062.719
 955.871 c 1060.762 957.141 1058.406 957.652 1056.098 957.312 c 1047.457
 957.023 1031.328 950.977 1008.289 932.738 c 794.688 477.121 m 790.848 500.547
 784.32 527.426 775.488 556.707 c 775.488 556.703 l 772.246 545.738 769.395
 534.66 766.945 523.488 c 759.648 489.602 758.594 463.008 762.531 444.578
 c 766.18 427.586 773.09 420.77 781.348 417.41 c 781.344 417.406 l 785.766
 415.434 790.457 414.141 795.266 413.566 c 796.512 416.445 797.953 422.398
 798.336 432.574 c 798.848 444.285 797.633 459.168 794.688 477.215 c h
794.688 477.121 m f
384 0 m 1152 0 l 1185.703 0 1218.812 8.871 1248 25.723 c 1277.188 42.574
 1301.426 66.812 1318.277 96 c 1335.129 125.188 1344 158.297 1344 192 c 
1344 1344 l 1344 1377.703 1335.129 1410.812 1318.277 1440 c 1301.426 1469.188
 1277.188 1493.426 1248 1510.277 c 1218.812 1527.129 1185.703 1536 1152 
1536 c 384 1536 l 333.078 1536 284.242 1515.773 248.234 1479.766 c 212.227
 1443.758 192 1394.922 192 1344 c 192 192 l 192 141.078 212.227 92.242 248.234
 56.234 c 284.242 20.227 333.078 0 384 0 c 399.84 1120.129 m 408.48 1137.41
 421.918 1153.059 441.887 1160.352 c 461.758 1167.551 481.438 1164.191 497.566
 1157.473 c 528.094 1144.992 558.527 1115.617 586.461 1082.016 c 618.43 
1043.52 652.027 993.023 684.477 937.055 c 684.48 937.055 l 747.117 918.465
 811.27 905.422 876.191 898.078 c 904.992 934.848 934.75 966.527 963.551
 989.277 c 990.43 1010.398 1021.438 1027.965 1053.215 1029.309 c 1053.215
 1029.312 l 1070.523 1030.145 1087.648 1025.508 1102.176 1016.062 c 1117.055
 1006.367 1128.098 992.352 1136.16 976.125 c 1144.801 958.75 1150.082 940.605
 1149.406 922.078 c 1148.832 903.809 1142.059 886.273 1130.207 872.352 c
 1108.512 846.43 1072.992 833.953 1038.047 827.711 c 995.656 821.18 952.648
 819.57 909.887 822.91 c 873.797 771.852 842.312 717.688 815.809 661.055
 c 839.809 597.695 857.762 537.789 865.73 488.832 c 869.188 467.902 871.012
 447.938 870.34 429.887 c 870.336 429.887 l 870.211 411.973 866.043 394.32
 858.145 378.238 c 848.922 360.273 832.105 347.406 812.352 343.199 c 792.961
 339.07 772.992 343.199 754.656 350.59 c 718.465 364.988 699.359 395.711
 692.16 429.598 c 685.152 462.238 688.32 500.254 696.574 538.652 c 705.023
 577.629 719.422 620.059 737.855 662.973 c 737.855 662.977 l 708.305 736.27
 674.254 807.672 635.902 876.77 c 586.438 892.359 538.754 913.113 493.633
 938.688 c 458.113 959.809 426.527 984.766 407.52 1014.238 c 387.359 1045.535
 381.121 1082.781 399.84 1120.125 c f*
Q Q
showpage
%%Trailer
%%EOF
