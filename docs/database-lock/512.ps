%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 48 0 360 360
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 48 0 360 360
384 384 cairo_set_page_size
%%EndPageSetup
q 48 0 312 360 rectclip
1 0 0 -1 0 384 cm q
0 g
312 136.754 m 305.227 141.699 297.957 145.922 290.305 149.352 c 264.527
 161.062 229.754 168 192 168 c 154.246 168 119.473 161.062 93.695 149.352
 c 86.043 145.922 78.773 141.699 72 136.754 c 72 168 l 72 176.977 80.543
 189 103.633 199.512 c 125.617 209.496 156.863 216 192 216 c 207.984 216
 223.152 214.656 237.023 212.258 c 226.703 219.699 217.727 228.891 210.574
 239.426 c 204.391 239.816 198.195 240.008 192 240 c 154.246 240 119.473
 233.062 93.695 221.352 c 86.043 217.922 78.773 213.699 72 208.754 c 72 
240 l 72 248.977 80.543 261 103.633 271.512 c 125.617 281.496 156.863 288
 192 288 c 192.648 288 l 191.953 294.375 191.816 300.801 192.238 307.199
 c 192.078 308.797 192 310.398 192 312 c 154.246 312 119.473 305.062 93.695
 293.352 c 86.043 289.922 78.773 285.699 72 280.754 c 72 312 l 72 320.977
 80.543 333 103.633 343.512 c 125.617 353.496 156.863 360 192 360 c 192 
368.711 194.328 376.895 198.383 383.93 c 196.273 383.992 194.145 384.016
 192 384 c 154.246 384 119.473 377.062 93.695 365.352 c 69 354.121 48 336.168
 48 312 c 48 96 l 48 71.832 69 53.879 93.695 42.648 c 119.473 30.938 154.246
 24 192 24 c 229.754 24 264.527 30.938 290.305 42.648 c 315 53.879 336 71.832
 336 96 c 336 198.145 l 322.512 193.387 308.211 191.355 293.93 192.168 c
 306.887 183.695 312 174.938 312 168 c h
103.633 64.516 m 80.543 74.977 72 87 72 96 c 72 104.977 80.543 117 103.633
 127.512 c 125.617 137.496 156.863 144 192 144 c 227.137 144 258.383 137.52
 280.367 127.512 c 303.457 117 312 104.953 312 96 c 312 87.023 303.457 75
 280.367 64.488 c 258.383 54.504 227.137 48 192 48 c 156.863 48 125.617 
54.48 103.633 64.488 c h
103.633 64.516 m f
216 312 m 216 305.637 218.527 299.531 223.031 295.031 c 227.531 290.527
 233.637 288 240 288 c 240 264 l 240 246.852 249.148 231.004 264 222.43 
c 278.852 213.855 297.148 213.855 312 222.43 c 326.852 231.004 336 246.852
 336 264 c 336 288 l 342.363 288 348.469 290.527 352.969 295.031 c 357.473
 299.531 360 305.637 360 312 c 360 360 l 360 366.363 357.473 372.469 352.969
 376.969 c 348.469 381.473 342.363 384 336 384 c 240 384 l 233.637 384 227.531
 381.473 223.031 376.969 c 218.527 372.469 216 366.363 216 360 c h
288 240 m 281.637 240 275.531 242.527 271.031 247.031 c 266.527 251.531
 264 257.637 264 264 c 264 288 l 312 288 l 312 264 l 312 257.637 309.473
 251.531 304.969 247.031 c 300.469 242.527 294.363 240 288 240 c f
Q Q
showpage
%%Trailer
%%EOF
