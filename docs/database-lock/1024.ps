%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 624 720 rectclip
1 0 0 -1 0 768 cm q
0 g
624 273.504 m 610.457 283.398 595.914 291.844 580.609 298.703 c 529.055
 322.129 459.504 336 384 336 c 308.496 336 238.945 322.129 187.391 298.703
 c 172.086 291.844 157.543 283.398 144 273.504 c 144 336 l 144 353.953 161.09
 378 207.266 399.023 c 251.23 418.992 313.727 432 384 432 c 415.969 432 
446.305 429.312 474.047 424.512 c 453.406 439.391 435.453 457.777 421.152
 478.848 c 408.785 479.633 396.395 480.016 384 480 c 308.496 480 238.945
 466.129 187.391 442.703 c 172.086 435.844 157.543 427.398 144 417.504 c
 144 480 l 144 497.953 161.09 522 207.266 543.023 c 251.23 562.992 313.727
 576 384 576 c 385.297 576 l 383.91 588.754 383.637 601.602 384.48 614.398
 c 384.16 617.59 384 620.793 384 624 c 308.496 624 238.945 610.129 187.391
 586.703 c 172.086 579.844 157.543 571.398 144 561.504 c 144 624 l 144 641.953
 161.09 666 207.266 687.023 c 251.23 706.992 313.727 720 384 720 c 384 737.426
 388.656 753.793 396.77 767.855 c 392.543 767.984 388.289 768.031 384 768
 c 308.496 768 238.945 754.129 187.391 730.703 c 138 708.238 96 672.336 
96 624 c 96 192 l 96 143.664 138 107.762 187.391 85.297 c 238.945 61.871
 308.496 48 384 48 c 459.504 48 529.055 61.871 580.609 85.297 c 630 107.762
 672 143.664 672 192 c 672 396.289 l 645.02 386.77 616.418 382.707 587.855
 384.336 c 613.777 367.391 624 349.871 624 336 c h
207.266 129.023 m 161.09 149.953 144 174 144 192 c 144 209.953 161.09 234
 207.266 255.023 c 251.23 274.992 313.727 288 384 288 c 454.273 288 516.77
 275.039 560.734 255.023 c 606.91 234 624 209.902 624 192 c 624 174.047 
606.91 150 560.734 128.977 c 516.77 109.008 454.273 96 384 96 c 313.727 
96 251.23 108.961 207.266 128.977 c h
207.266 129.023 m f
432 624 m 432 611.27 437.059 599.062 446.059 590.059 c 455.062 581.059 
467.27 576 480 576 c 480 528 l 480 493.703 498.297 462.012 528 444.863 c
 557.703 427.711 594.297 427.711 624 444.863 c 653.703 462.012 672 493.703
 672 528 c 672 576 l 684.73 576 696.938 581.059 705.941 590.059 c 714.941
 599.062 720 611.27 720 624 c 720 720 l 720 732.73 714.941 744.938 705.941
 753.941 c 696.938 762.941 684.73 768 672 768 c 480 768 l 467.27 768 455.062
 762.941 446.059 753.941 c 437.059 744.938 432 732.73 432 720 c h
576 480 m 563.27 480 551.062 485.059 542.059 494.059 c 533.059 503.062 
528 515.27 528 528 c 528 576 l 624 576 l 624 528 l 624 515.27 618.941 503.062
 609.941 494.059 c 600.938 485.059 588.73 480 576 480 c f
Q Q
showpage
%%Trailer
%%EOF
