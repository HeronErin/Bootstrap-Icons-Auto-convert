%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:18 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 336
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 288 rectclip
1 0 0 -1 0 384 cm q
0 g
39.238 171.504 m 39.238 171.504 73.922 120.289 143.281 114.984 c 143.281
 96.41 l 66.48 102.551 0 167.594 0 167.594 c 0 167.594 37.68 276.457 143.281
 286.441 c 143.281 266.664 l 65.762 256.922 39.242 171.504 39.242 171.504
 c 143.281 227.398 m 143.281 245.469 l 84.723 235.027 68.449 174.141 68.449
 174.141 c 68.449 174.145 96.551 142.992 143.281 137.93 c 143.281 157.801
 l 143.184 157.801 l 118.68 154.848 99.504 177.723 99.504 177.723 c 99.504
 177.723 110.258 216.289 143.281 227.402 c 144 48 m 143.281 96.406 l 145.531
 96.227 147.789 96.09 150.047 96 c 237.336 93.047 294.215 167.594 294.215
 167.594 c 294.215 167.594 228.887 247.035 160.848 247.035 c 154.609 247.004
 148.75 246.484 143.281 245.477 c 143.281 266.668 l 147.953 267.293 152.832
 267.613 157.922 267.629 c 221.234 267.629 267.027 235.277 311.379 196.996
 c 318.746 202.898 348.844 217.203 355.035 223.492 c 312.867 258.773 214.586
 287.262 158.883 287.262 c 158.879 287.258 l 153.672 287.227 148.465 286.953
 143.281 286.441 c 143.281 336 l 384 336 l 384.719 48 l h
143.281 137.93 m 143.281 114.984 l 145.531 114.812 147.789 114.691 150.047
 114.625 c 212.832 112.656 254.016 168.578 254.016 168.578 c 254.016 168.574
 209.52 230.352 161.832 230.352 c 154.969 230.352 148.824 229.246 143.281
 227.398 c 143.281 157.797 l 167.715 160.75 172.633 171.523 187.32 196.027
 c 220.008 168.48 l 220.008 168.48 196.152 137.184 155.93 137.184 c 151.703
 137.211 147.48 137.457 143.281 137.93 c f
Q Q
showpage
%%Trailer
%%EOF
