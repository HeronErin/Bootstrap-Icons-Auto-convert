%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 0 720 762
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 0 720 762
768 768 cairo_set_page_size
%%EndPageSetup
q 48 0 672 762 rectclip
1 0 0 -1 0 768 cm q
0 g
509.809 24.719 m 415.055 0.961 352.945 0.961 258.238 24.719 c 213.887 35.758
 163.102 61.488 124.797 83.277 c 75.168 111.457 48 164.734 48 219.938 c 
48 648 l 48 679.824 60.645 710.348 83.148 732.852 c 105.652 755.355 136.176
 768 168 768 c 600 768 l 631.824 768 662.348 755.355 684.852 732.852 c 707.355
 710.348 720 679.824 720 648 c 720 219.984 l 720 164.785 692.879 111.504
 643.199 83.23 c 604.941 61.488 554.16 35.805 509.809 24.672 c h
312 96 m 456 96 l 464.574 96 472.496 100.574 476.785 108 c 481.07 115.426
 481.07 124.574 476.785 132 c 472.496 139.426 464.574 144 456 144 c 312 
144 l 303.426 144 295.504 139.426 291.215 132 c 286.93 124.574 286.93 115.426
 291.215 108 c 295.504 100.574 303.426 96 312 96 c 216 192 m 552 192 l 571.094
 192 589.41 199.586 602.91 213.09 c 616.414 226.59 624 244.906 624 264 c
 624 360 l 624 379.094 616.414 397.41 602.91 410.91 c 589.41 424.414 571.094
 432 552 432 c 216 432 l 196.906 432 178.59 424.414 165.09 410.91 c 151.586
 397.41 144 379.094 144 360 c 144 264 l 144 244.906 151.586 226.59 165.09
 213.09 c 178.59 199.586 196.906 192 216 192 c 240 624 m 240 641.148 230.852
 656.996 216 665.57 c 201.148 674.145 182.852 674.145 168 665.57 c 153.148
 656.996 144 641.148 144 624 c 144 606.852 153.148 591.004 168 582.43 c 
182.852 573.855 201.148 573.855 216 582.43 c 230.852 591.004 240 606.852
 240 624 c 240 624 m 240 606.852 249.148 591.004 264 582.43 c 278.852 573.855
 297.148 573.855 312 582.43 c 326.852 591.004 336 606.852 336 624 c 336 
641.148 326.852 656.996 312 665.57 c 297.148 674.145 278.852 674.145 264
 665.57 c 249.148 656.996 240 641.148 240 624 c 624 624 m 624 641.148 614.852
 656.996 600 665.57 c 585.148 674.145 566.852 674.145 552 665.57 c 537.148
 656.996 528 641.148 528 624 c 528 606.852 537.148 591.004 552 582.43 c 
566.852 573.855 585.148 573.855 600 582.43 c 614.852 591.004 624 606.852
 624 624 c 480 576 m 497.148 576 512.996 585.148 521.57 600 c 530.145 614.852
 530.145 633.148 521.57 648 c 512.996 662.852 497.148 672 480 672 c 462.852
 672 447.004 662.852 438.43 648 c 429.855 633.148 429.855 614.852 438.43
 600 c 447.004 585.148 462.852 576 480 576 c 192 264 m 192 257.637 194.527
 251.531 199.031 247.031 c 203.531 242.527 209.637 240 216 240 c 360 240
 l 360 384 l 216 384 l 209.637 384 203.531 381.473 199.031 376.969 c 194.527
 372.469 192 366.363 192 360 c h
408 384 m 408 240 l 552 240 l 558.363 240 564.469 242.527 568.969 247.031
 c 573.473 251.531 576 257.637 576 264 c 576 360 l 576 366.363 573.473 372.469
 568.969 376.969 c 564.469 381.473 558.363 384 552 384 c h
408 384 m f
Q Q
showpage
%%Trailer
%%EOF
