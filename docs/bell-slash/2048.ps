%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:35 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 45 0 1536 1467
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 45 0 1536 1467
1536 1536 cairo_set_page_size
%%EndPageSetup
q 45 0 1491 1467 rectclip
1 0 0 -1 0 1536 cm q
0 g
495.742 1344 m 1440 1344 l 1411.297 1324.895 1386.527 1290.91 1365.121 
1248 c 1278.723 1075.199 1248 756.48 1248 672 c 1248 646.656 1246.078 621.824
 1242.238 597.504 c 1152.191 687.551 l 1154.113 755.52 1167.262 894.336 
1196.062 1031.23 c 1211.52 1104.863 1232.254 1181.566 1259.711 1248 c 591.742
 1248 l h
1031.52 392.641 m 979.441 343.52 914.668 309.938 844.512 295.68 c 768 280.031
 l 691.488 295.488 l 604.668 313.141 526.621 360.273 470.582 428.895 c 414.539
 497.516 383.949 583.402 384 672 c 384 732.289 371.137 882.91 339.938 1031.23
 c 335.137 1054.141 329.824 1077.117 324 1100.16 c 165.312 1258.848 l 167.234
 1255.328 169.121 1251.711 170.977 1248 c 257.184 1075.199 288 756.48 288
 672 c 288 439.68 453.121 245.762 672.48 201.504 c 669.77 174.512 678.609
 147.633 696.809 127.512 c 715.008 107.395 740.871 95.914 768 95.914 c 795.129
 95.914 820.992 107.395 839.191 127.512 c 857.391 147.633 866.23 174.512
 863.52 201.504 c 953.953 219.742 1035.168 263.426 1099.391 324.77 c h
960 1440 m 960 1490.922 939.773 1539.758 903.766 1575.766 c 867.758 1611.773
 818.922 1632 768 1632 c 717.078 1632 668.242 1611.773 632.234 1575.766 
c 596.227 1539.758 576 1490.922 576 1440 c h
60 1500 m 47.137 1512.863 42.117 1531.609 46.824 1549.176 c 51.531 1566.746
 65.254 1580.469 82.824 1585.176 c 100.391 1589.883 119.137 1584.863 132
 1572 c 1548 156 l 1560.863 143.137 1565.883 124.391 1561.176 106.824 c 
1556.469 89.254 1542.746 75.531 1525.176 70.824 c 1507.609 66.117 1488.863
 71.137 1476 84 c h
60 1500 m f
Q Q
showpage
%%Trailer
%%EOF
