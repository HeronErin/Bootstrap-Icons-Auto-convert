%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 22 0 768 734
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 22 0 768 734
768 768 cairo_set_page_size
%%EndPageSetup
q 22 0 746 734 rectclip
1 0 0 -1 0 768 cm q
0 g
247.871 672 m 720 672 l 705.648 662.449 693.266 645.457 682.559 624 c 639.359
 537.602 624 378.238 624 336 c 624 323.328 623.039 310.91 621.121 298.754
 c 576.098 343.777 l 577.059 377.762 583.633 447.168 598.035 515.617 c 605.762
 552.434 616.133 590.785 629.859 624 c 295.871 624 l h
515.758 196.32 m 515.762 196.32 l 489.719 171.762 457.332 154.969 422.258
 147.84 c 384 140.016 l 345.742 147.742 l 302.332 156.57 263.312 180.137
 235.289 214.445 c 207.27 248.758 191.977 291.703 192 336 c 192 366.145 
185.566 441.457 169.969 515.617 c 167.57 527.074 164.914 538.562 162 550.082
 c 82.656 629.426 l 83.617 627.664 84.559 625.859 85.488 624 c 128.594 537.602
 144 378.238 144 336 c 144 219.84 226.559 122.879 336.238 100.754 c 334.887
 87.254 339.305 73.816 348.402 63.758 c 357.504 53.695 370.434 47.957 384
 47.957 c 397.566 47.957 410.496 53.695 419.598 63.758 c 428.695 73.816 
433.113 87.254 431.762 100.754 c 476.977 109.875 517.586 131.715 549.699
 162.387 c h
480 720 m 480 754.297 461.703 785.988 432 803.137 c 402.297 820.289 365.703
 820.289 336 803.137 c 306.297 785.988 288 754.297 288 720 c h
30 750 m 23.57 756.43 21.059 765.805 23.41 774.59 c 25.766 783.375 32.625
 790.234 41.41 792.59 c 50.195 794.941 59.57 792.43 66 786 c 774 78 l 780.43
 71.57 782.941 62.195 780.59 53.41 c 778.234 44.625 771.375 37.766 762.59
 35.41 c 753.805 33.059 744.43 35.57 738 42 c h
30 750 m f
Q Q
showpage
%%Trailer
%%EOF
