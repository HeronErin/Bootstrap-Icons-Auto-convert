%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 0 720 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 0 720 768
768 768 cairo_set_page_size
%%EndPageSetup
q 48 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
275.328 0 m 264.164 0 253.156 2.598 243.168 7.586 c 87.742 85.246 l 75.793
 91.238 65.742 100.434 58.723 111.812 c 51.703 123.188 47.992 136.297 48
 149.664 c 48 414.145 l 144 385.344 l 144 240 l 144 227.27 149.059 215.062
 158.059 206.059 c 167.062 197.059 179.27 192 192 192 c 576 192 l 588.73
 192 600.938 197.059 609.941 206.059 c 618.941 215.062 624 227.27 624 240
 c 624 385.344 l 720 414.145 l 720 149.664 l 720 136.285 716.273 123.172
 709.234 111.793 c 702.199 100.418 692.129 91.223 680.16 85.246 c 524.93
 7.586 l 514.91 2.582 503.867 -0.016 492.672 0 c h
720 464.258 m 455.855 385.059 l 455.855 385.055 l 453.617 384.367 451.289
 384.012 448.945 384 c 408 384 l 408 768 l 600 768 l 631.824 768 662.348
 755.355 684.852 732.852 c 707.355 710.348 720 679.824 720 648 c h
360 768 m 360 384 l 319.055 384 l 316.715 383.996 314.387 384.336 312.145
 385.008 c 48 464.258 l 48 648 l 48 679.824 60.645 710.348 83.148 732.852
 c 105.652 755.355 136.176 768 168 768 c h
312 96 m 456 96 l 464.574 96 472.496 100.574 476.785 108 c 481.07 115.426
 481.07 124.574 476.785 132 c 472.496 139.426 464.574 144 456 144 c 312 
144 l 303.426 144 295.504 139.426 291.215 132 c 286.93 124.574 286.93 115.426
 291.215 108 c 295.504 100.574 303.426 96 312 96 c 576 240 m 576 370.945
 l 469.633 339.023 l 462.934 337.02 455.98 336 448.992 336 c 408 336 l 408
 240 l h
360 240 m 360 336 l 319.055 336 l 312.051 335.996 305.082 337.016 298.367
 339.023 c 192 370.945 l 192 240 l h
168 480 m 176.574 480 184.496 484.574 188.785 492 c 193.07 499.426 193.07
 508.574 188.785 516 c 184.496 523.426 176.574 528 168 528 c 159.426 528
 151.504 523.426 147.215 516 c 142.93 508.574 142.93 499.426 147.215 492
 c 151.504 484.574 159.426 480 168 480 c 600 480 m 608.574 480 616.496 484.574
 620.785 492 c 625.07 499.426 625.07 508.574 620.785 516 c 616.496 523.426
 608.574 528 600 528 c 591.426 528 583.504 523.426 579.215 516 c 574.93 
508.574 574.93 499.426 579.215 492 c 583.504 484.574 591.426 480 600 480
 c 240 624 m 240 641.148 230.852 656.996 216 665.57 c 201.148 674.145 182.852
 674.145 168 665.57 c 153.148 656.996 144 641.148 144 624 c 144 606.852 
153.148 591.004 168 582.43 c 182.852 573.855 201.148 573.855 216 582.43 
c 230.852 591.004 240 606.852 240 624 c 576 672 m 558.852 672 543.004 662.852
 534.43 648 c 525.855 633.148 525.855 614.852 534.43 600 c 543.004 585.148
 558.852 576 576 576 c 593.148 576 608.996 585.148 617.57 600 c 626.145 
614.852 626.145 633.148 617.57 648 c 608.996 662.852 593.148 672 576 672
 c f
Q Q
showpage
%%Trailer
%%EOF
