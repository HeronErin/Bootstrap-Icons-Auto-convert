%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:26 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
456 0 m 462.363 0 468.469 2.527 472.969 7.031 c 477.473 11.531 480 17.637
 480 24 c 480 30.363 482.527 36.469 487.031 40.969 c 491.531 45.473 497.637
 48 504 48 c 510.363 48 516.469 50.527 520.969 55.031 c 525.473 59.531 528
 65.637 528 72 c 528 96 l 528 102.363 525.473 108.469 520.969 112.969 c 
516.469 117.473 510.363 120 504 120 c 264 120 l 257.637 120 251.531 117.473
 247.031 112.969 c 242.527 108.469 240 102.363 240 96 c 240 72 l 240 65.637
 242.527 59.531 247.031 55.031 c 251.531 50.527 257.637 48 264 48 c 270.363
 48 276.469 45.473 280.969 40.969 c 285.473 36.469 288 30.363 288 24 c 288
 17.637 290.527 11.531 295.031 7.031 c 299.531 2.527 305.637 0 312 0 c h
456 0 m f
144 120 m 144 113.637 146.527 107.531 151.031 103.031 c 155.531 98.527 
161.637 96 168 96 c 192 96 l 200.574 96 208.496 91.426 212.785 84 c 217.07
 76.574 217.07 67.426 212.785 60 c 208.496 52.574 200.574 48 192 48 c 168
 48 l 148.906 48 130.59 55.586 117.09 69.09 c 103.586 82.59 96 100.906 96
 120 c 96 696 l 96 715.094 103.586 733.41 117.09 746.91 c 130.59 760.414
 148.906 768 168 768 c 600 768 l 619.094 768 637.41 760.414 650.91 746.91
 c 664.414 733.41 672 715.094 672 696 c 672 120 l 672 100.906 664.414 82.59
 650.91 69.09 c 637.41 55.586 619.094 48 600 48 c 576 48 l 567.426 48 559.504
 52.574 555.215 60 c 550.93 67.426 550.93 76.574 555.215 84 c 559.504 91.426
 567.426 96 576 96 c 600 96 l 606.363 96 612.469 98.527 616.969 103.031 
c 621.473 107.531 624 113.637 624 120 c 624 696 l 624 702.363 621.473 708.469
 616.969 712.969 c 612.469 717.473 606.363 720 600 720 c 168 720 l 161.637
 720 155.531 717.473 151.031 712.969 c 146.527 708.469 144 702.363 144 696
 c h
144 120 m f
384 398.062 m 328.992 343.008 l 322.922 336.938 314.074 334.566 305.781
 336.789 c 297.488 339.012 291.012 345.488 288.789 353.781 c 286.566 362.074
 288.938 370.922 295.008 376.992 c 350.062 432 l 295.008 487.008 l 288.938
 493.078 286.566 501.926 288.789 510.219 c 291.012 518.512 297.488 524.988
 305.781 527.211 c 314.074 529.434 322.922 527.062 328.992 520.992 c 384
 465.938 l 439.008 520.992 l 445.078 527.062 453.926 529.434 462.219 527.211
 c 470.512 524.988 476.988 518.512 479.211 510.219 c 481.434 501.926 479.062
 493.078 472.992 487.008 c 417.938 432 l 472.992 376.992 l 479.062 370.922
 481.434 362.074 479.211 353.781 c 476.988 345.488 470.512 339.012 462.219
 336.789 c 453.926 334.566 445.078 336.938 439.008 343.008 c h
384 398.062 m f
Q Q
showpage
%%Trailer
%%EOF
