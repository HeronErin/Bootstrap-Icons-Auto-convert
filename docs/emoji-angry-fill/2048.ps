%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:36 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 1536 m 971.688 1536 1167.031 1455.086 1311.059 1311.059 c 1455.086 
1167.031 1536 971.688 1536 768 c 1536 564.312 1455.086 368.969 1311.059 
224.941 c 1167.031 80.914 971.688 0 768 0 c 564.312 0 368.969 80.914 224.941
 224.941 c 80.914 368.969 0 564.312 0 768 c 0 971.688 80.914 1167.031 224.941
 1311.059 c 368.969 1455.086 564.312 1536 768 1536 c 389.09 410.496 m 394.793
 399.141 404.766 390.512 416.824 386.496 c 428.879 382.484 442.035 383.414
 453.406 389.09 c 645.406 485.09 l 658.375 491.582 667.707 503.594 670.805
 517.762 c 673.898 531.93 670.422 546.738 661.344 558.047 c 668.16 577.824
 672 600.285 672 624 c 672 703.488 628.992 768 576 768 c 523.008 768 480
 703.488 480 624 c 480 584.832 490.465 549.312 507.359 523.297 c 410.496
 474.914 l 410.496 474.91 l 399.141 469.207 390.512 459.234 386.496 447.176
 c 382.484 435.121 383.414 421.965 389.09 410.594 c h
411.363 1193.566 m 411.359 1193.566 l 400.336 1187.203 392.293 1176.719
 388.996 1164.422 c 385.703 1152.125 387.426 1139.023 393.793 1128 c 431.715
 1062.316 486.262 1007.773 551.953 969.855 c 617.641 931.938 692.152 911.984
 768 912 c 843.848 911.984 918.359 931.938 984.047 969.855 c 1049.738 1007.773
 1104.285 1062.316 1142.207 1128 c 1148.676 1139.031 1150.473 1152.184 1147.203
 1164.543 c 1143.938 1176.906 1135.871 1187.453 1124.801 1193.844 c 1113.727
 1200.238 1100.562 1201.949 1088.223 1198.598 c 1075.883 1195.25 1065.391
 1187.113 1059.07 1176 c 1029.574 1124.91 987.145 1082.484 936.051 1052.992
 c 884.953 1023.504 826.996 1007.984 768 1008 c 709.004 1007.984 651.047
 1023.504 599.949 1052.992 c 548.855 1082.484 506.426 1124.91 476.93 1176
 c 470.562 1187.023 460.078 1195.07 447.781 1198.363 c 435.484 1201.656 
422.383 1199.934 411.359 1193.566 c 960 768 m 907.008 768 864 703.488 864
 624 c 864 600.289 867.84 577.922 874.559 558.145 c 865.516 546.805 862.062
 531.996 865.152 517.824 c 868.246 503.656 877.551 491.633 890.496 485.09
 c 1082.496 389.09 l 1093.891 383.266 1107.137 382.238 1119.293 386.227 
c 1131.453 390.215 1141.512 398.891 1147.246 410.328 c 1152.977 421.77 1153.906
 435.023 1149.824 447.148 c 1145.742 459.273 1136.988 469.27 1125.504 474.91
 c 1028.641 523.293 l 1045.535 549.215 1056 584.734 1056 623.996 c 1056 
703.484 1012.992 767.996 960 767.996 c f
Q Q
showpage
%%Trailer
%%EOF
