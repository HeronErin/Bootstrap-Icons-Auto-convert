%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:44 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 68x68mm 192 192 0 () ()
%%BoundingBox: 6 22 169 187
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 68x68mm
%%PageBoundingBox: 6 22 169 187
192 192 cairo_set_page_size
%%EndPageSetup
q 6 22 163 165 rectclip
1 0 0 -1 0 192 cm q
0 g
74.305 33.359 m 68.809 25.234 63.18 18.383 58.105 13.645 c 55.582 11.176
 52.711 9.094 49.586 7.465 c 46.98 6.219 42.867 5.004 39 7.227 c 34.598 
9.781 33.875 14.785 33.84 17.98 c 33.805 21.629 34.609 25.949 35.914 30.508
 c 38.266 38.75 42.586 48.844 48.336 59.332 c 9.023 98.641 l 5.699 101.965
 5.797 106.512 6.406 109.656 c 7.066 113.051 8.648 116.773 10.727 120.492
 c 14.902 128.016 21.766 136.824 30.238 145.309 c 38.723 153.793 47.531 
160.645 55.055 164.82 c 58.773 166.895 62.496 168.48 65.891 169.141 c 69.035
 169.742 73.57 169.848 76.906 166.523 c 144.285 99.145 l 145.699 102.23 
145.391 105.289 144.887 110.414 c 144.527 113.918 144.07 118.395 144.012
 124.527 c 144.012 126.004 l 144.047 126.004 l 144.047 126 l 144.57 132.215
 149.766 136.996 156.008 136.996 c 162.246 136.996 167.441 132.215 167.965
 126 c 168 126 l 168 125.316 l 168.012 124.848 167.996 124.379 167.953 123.91
 c 167.293 108.91 159.555 91.055 145.633 81.98 c 145.633 81.984 l 144.895
 80.199 144.047 78.461 143.102 76.777 c 138.914 69.266 132.062 60.457 123.578
 51.973 c 115.094 43.488 106.285 36.625 98.762 32.449 c 95.043 30.387 91.32
 28.801 87.926 28.129 c 84.781 27.527 80.246 27.434 76.91 30.758 c h
49.922 22.402 m 54.492 26.676 60.051 33.465 65.652 41.988 c 57.203 50.449
 l 52.617 41.727 49.281 33.625 47.445 27.191 c 47.449 27.191 l 46.645 24.562
 46.117 21.855 45.875 19.117 c 46.973 19.836 48.32 20.934 49.918 22.406 
c 54.645 69.984 m 61.125 80.207 67.93 88.789 73.93 94.379 c 73.934 94.379
 l 76.359 96.641 80.156 96.504 82.414 94.078 c 84.676 91.656 84.543 87.855
 82.117 85.598 c 76.68 80.535 69.914 71.965 63.348 61.273 c 76.402 48.219
 l 77.051 49.668 77.781 51.125 78.598 52.598 c 82.785 60.121 89.637 68.93
 98.121 77.414 c 106.594 85.898 115.402 92.75 122.938 96.926 c 124.402 97.75
 125.863 98.48 127.316 99.121 c 68.984 157.465 l 68.168 157.344 l 66.523
 157.02 64.062 156.098 60.871 154.32 c 54.582 150.816 46.641 144.719 38.719
 136.801 c 30.797 128.879 24.703 120.961 21.199 114.648 c 19.434 111.469
 18.5 109.008 18.188 107.363 c 18.066 106.547 l h
89.086 46.766 m 89.09 46.766 l 87.84 44.652 86.871 42.391 86.195 40.031
 c 87.816 40.426 90.082 41.352 92.938 42.922 c 99.227 46.426 107.168 52.523
 115.09 60.441 c 120.488 65.84 125.051 71.254 128.504 76.16 c 128.508 76.164
 l 124.215 75.871 119.898 76.238 115.715 77.258 c 112.547 74.625 109.504
 71.844 106.598 68.93 c 98.676 61.008 92.594 53.066 89.102 46.766 c h
89.086 46.766 m f
Q Q
showpage
%%Trailer
%%EOF
