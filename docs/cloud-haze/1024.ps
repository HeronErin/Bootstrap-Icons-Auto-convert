%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
192 552 m 192 545.637 194.527 539.531 199.031 535.031 c 203.531 530.527
 209.637 528 216 528 c 648 528 l 656.574 528 664.496 532.574 668.785 540
 c 673.07 547.426 673.07 556.574 668.785 564 c 664.496 571.426 656.574 576
 648 576 c 216 576 l 209.637 576 203.531 573.473 199.031 568.969 c 194.527
 564.469 192 558.363 192 552 c 48 648 m 48 641.637 50.527 635.531 55.031
 631.031 c 59.531 626.527 65.637 624 72 624 c 504 624 l 512.574 624 520.496
 628.574 524.785 636 c 529.07 643.426 529.07 652.574 524.785 660 c 520.496
 667.426 512.574 672 504 672 c 72 672 l 65.637 672 59.531 669.473 55.031
 664.969 c 50.527 660.469 48 654.363 48 648 c 144 744 m 144 737.637 146.527
 731.531 151.031 727.031 c 155.531 722.527 161.637 720 168 720 c 600 720
 l 608.574 720 616.496 724.574 620.785 732 c 625.07 739.426 625.07 748.574
 620.785 756 c 616.496 763.426 608.574 768 600 768 c 168 768 l 161.637 768
 155.531 765.473 151.031 760.969 c 146.527 756.469 144 750.363 144 744 c
 643.441 193.297 m 633.473 143.047 607.691 97.305 569.867 62.758 c 532.039
 28.211 484.156 6.672 433.211 1.285 c 382.27 -4.098 330.938 6.957 286.727
 32.832 c 242.516 58.707 207.742 98.051 187.488 145.105 c 157.125 141.605
 126.379 146.457 98.57 159.137 c 70.758 171.816 46.934 191.844 29.66 217.059
 c 12.387 242.277 2.32 271.727 0.547 302.242 c -1.23 332.754 5.352 363.172
 19.582 390.223 c 33.816 417.273 55.156 439.93 81.309 455.746 c 107.461 
471.566 137.434 479.953 168 480 c 624 480 l 673.172 480.055 718.969 455.02
 745.469 413.602 c 771.965 372.18 775.496 320.102 754.832 275.484 c 734.168
 230.867 692.168 199.879 643.441 193.297 c 408 48 m 455.23 47.988 500.805
 65.391 536.016 96.871 c 571.223 128.352 593.594 171.703 598.848 218.641
 c 599.5 224.539 602.312 229.984 606.746 233.93 c 611.18 237.871 616.914
 240.035 622.848 240 c 624 240 l 658.297 240 689.988 258.297 707.137 288
 c 724.289 317.703 724.289 354.297 707.137 384 c 689.988 413.703 658.297
 432 624 432 c 168 432 l 133.637 431.984 100.926 417.234 78.164 391.492 
c 55.398 365.746 44.766 331.48 48.953 297.371 c 53.145 263.266 71.754 232.59
 100.07 213.117 c 128.387 193.648 163.691 187.254 197.039 195.551 c 202.922
 197.02 209.141 196.207 214.445 193.277 c 219.754 190.348 223.754 185.52
 225.648 179.762 c 238.32 141.41 262.766 108.031 295.504 84.375 c 328.242
 60.719 367.609 47.988 408 48 c f
Q Q
showpage
%%Trailer
%%EOF
