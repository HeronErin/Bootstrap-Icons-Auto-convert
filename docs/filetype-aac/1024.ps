%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:17 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 576 720 l 588.73 720 600.938 714.941 609.941
 705.941 c 618.941 696.938 624 684.73 624 672 c 624 216 l 528 216 l 508.906
 216 490.59 208.414 477.09 194.91 c 463.586 181.41 456 163.094 456 144 c
 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059 62.059 c 149.059 71.062
 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96 70.539 106.113 46.121 
124.117 28.117 c 142.121 10.113 166.539 0 192 0 c 456 0 l h
393.215 626.594 m 389.656 636.316 387.977 646.625 388.273 656.977 c 388.273
 680.738 l 388.273 692.547 389.922 702.578 393.219 710.836 c 393.215 710.832
 l 395.977 718.43 400.98 725.008 407.566 729.695 c 414.406 734.016 422.379
 736.203 430.465 735.984 c 437.137 736.086 443.742 734.641 449.762 731.762
 c 455.098 729.027 459.605 724.918 462.816 719.855 c 466.074 714.57 468 
708.578 468.434 702.383 c 505.152 702.383 l 505.152 706.031 l 504.688 717.629
 500.926 728.852 494.305 738.383 c 487.777 747.664 478.977 754.926 467.906
 760.176 c 467.902 760.176 l 456.098 765.602 443.215 768.289 430.223 768.047
 c 412.941 768.047 398.301 764.59 386.301 757.68 c 386.305 757.68 l 374.293
 750.715 364.734 740.203 358.945 727.586 c 352.707 714.531 349.602 698.914
 349.633 680.738 c 349.633 656.836 l 349.633 638.66 352.77 623.012 359.039
 609.891 c 365.277 596.738 374.414 586.609 386.445 579.508 c 398.543 572.371
 413.133 568.805 430.223 568.805 c 440.688 568.805 450.383 570.355 459.312
 573.461 c 468.273 576.438 476.113 580.789 482.832 586.516 c 482.832 586.512
 l 496.422 598.129 504.52 614.914 505.152 632.785 c 505.152 636.289 l 468.434
 636.289 l 467.984 629.836 466.012 623.586 462.672 618.047 c 459.547 612.758
 455.031 608.422 449.617 605.52 c 443.746 602.328 437.145 600.723 430.465
 600.863 c 422.371 600.617 414.406 602.938 407.711 607.488 c 401.117 612.301
 396.078 618.945 393.215 626.594 c 38.398 764.398 m 53.422 715.055 l 117.602
 715.055 l 132.672 764.398 l 172.992 764.398 l 108.914 572.445 l 64.465 
572.445 l 0.051 764.445 l h
86.496 609.168 m 109.969 686.785 l 61.297 686.785 l 84.816 609.168 l h
212.734 764.398 m 227.758 715.055 l 291.84 715.055 l 306.863 764.398 l 
347.23 764.398 l 283.199 572.449 l 238.75 572.449 l 174.383 764.449 l h
260.781 609.168 m 284.301 686.785 l 235.633 686.785 l 259.152 609.168 l
 h
260.781 609.168 m f*
Q Q
showpage
%%Trailer
%%EOF
