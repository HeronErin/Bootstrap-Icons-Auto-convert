%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 336 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 336 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 336 384 rectclip
1 0 0 -1 0 384 cm q
0 g
336 108 m 336 336 l 336 348.73 330.941 360.938 321.941 369.941 c 312.938
 378.941 300.73 384 288 384 c 288 360 l 294.363 360 300.469 357.473 304.969
 352.969 c 309.473 348.469 312 342.363 312 336 c 312 108 l 264 108 l 254.453
 108 245.297 104.207 238.543 97.457 c 231.793 90.703 228 81.547 228 72 c
 228 24 l 96 24 l 89.637 24 83.531 26.527 79.031 31.031 c 74.527 35.531 
72 41.637 72 48 c 72 264 l 48 264 l 48 48 l 48 35.27 53.059 23.062 62.059
 14.059 c 71.062 5.059 83.27 0 96 0 c 228 0 l h
196.609 313.297 m 194.828 318.156 193.988 323.312 194.137 328.488 c 194.137
 340.367 l 194.137 346.27 194.961 351.289 196.609 355.414 c 197.988 359.215
 200.492 362.504 203.785 364.848 c 207.203 367.008 211.188 368.102 215.23
 367.992 c 218.566 368.043 221.871 367.32 224.879 365.879 c 227.547 364.516
 229.801 362.457 231.406 359.93 c 233.035 357.285 234 354.289 234.215 351.191
 c 252.574 351.191 l 252.574 353.016 l 252.344 358.812 250.465 364.426 247.152
 369.191 c 243.887 373.832 239.488 377.465 233.953 380.086 c 233.953 380.09
 l 228.047 382.801 221.609 384.145 215.113 384.023 c 206.473 384.023 199.152
 382.297 193.152 378.84 c 187.148 375.359 182.367 370.102 179.473 363.793
 c 176.352 357.266 174.801 349.457 174.816 340.367 c 174.816 328.414 l 174.816
 319.324 176.383 311.504 179.52 304.941 c 182.641 298.367 187.207 293.301
 193.223 289.75 c 199.27 286.184 206.566 284.398 215.109 284.398 c 220.34
 284.398 225.188 285.176 229.652 286.727 c 234.133 288.215 238.051 290.391
 241.414 293.254 c 241.414 293.258 l 248.211 299.066 252.262 307.457 252.574
 316.391 c 252.574 318.145 l 234.215 318.145 l 233.992 314.918 233.004 311.793
 231.336 309.023 c 229.773 306.379 227.516 304.211 224.809 302.762 c 221.871
 301.164 218.57 300.363 215.23 300.434 c 211.188 300.309 207.203 301.469
 203.855 303.742 c 200.559 306.152 198.039 309.473 196.609 313.297 c 19.199
 382.199 m 26.711 357.527 l 58.801 357.527 l 66.336 382.199 l 86.496 382.199
 l 54.457 286.223 l 32.234 286.223 l 0.027 382.223 l h
43.246 304.582 m 54.98 343.391 l 30.648 343.391 l 42.41 304.582 l h
106.367 382.199 m 113.879 357.527 l 145.922 357.527 l 153.434 382.199 l
 173.617 382.199 l 141.602 286.223 l 119.379 286.223 l 87.195 382.223 l 
h
130.391 304.582 m 142.152 343.391 l 117.816 343.391 l 129.578 304.582 l
 h
130.391 304.582 m f*
Q Q
showpage
%%Trailer
%%EOF
