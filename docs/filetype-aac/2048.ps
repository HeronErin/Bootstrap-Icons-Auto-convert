%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:18 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1344 l 1344 1377.703 1335.129 1410.812 1318.277 1440 c 
1301.426 1469.188 1277.188 1493.426 1248 1510.277 c 1218.812 1527.129 1185.703
 1536 1152 1536 c 1152 1440 l 1177.461 1440 1201.879 1429.887 1219.883 1411.883
 c 1237.887 1393.879 1248 1369.461 1248 1344 c 1248 432 l 1056 432 l 1017.809
 432 981.184 416.828 954.176 389.824 c 927.172 362.816 912 326.191 912 288
 c 912 96 l 384 96 l 358.539 96 334.121 106.113 316.117 124.117 c 298.113
 142.121 288 166.539 288 192 c 288 1056 l 192 1056 l 192 192 l 192 141.078
 212.227 92.242 248.234 56.234 c 284.242 20.227 333.078 0 384 0 c 912 0 
l h
786.434 1253.184 m 779.309 1272.629 775.953 1293.254 776.543 1313.953 c
 776.543 1361.473 l 776.543 1385.09 779.84 1405.152 786.43 1421.664 c 786.434
 1421.664 l 791.949 1436.859 801.961 1450.02 815.137 1459.391 c 828.816 
1468.031 844.754 1472.41 860.93 1471.969 c 874.273 1472.172 887.48 1469.277
 899.52 1463.52 c 910.191 1458.055 919.207 1449.836 925.633 1439.711 c 932.145
 1429.145 936 1417.152 936.863 1404.77 c 1010.305 1404.77 l 1010.305 1412.066
 l 1010.305 1412.062 l 1009.379 1435.258 1001.852 1457.703 988.609 1476.77
 c 975.555 1495.328 957.953 1509.859 935.809 1520.355 c 935.809 1520.352
 l 912.191 1531.199 886.434 1536.582 860.449 1536.098 c 825.891 1536.098
 796.609 1529.188 772.609 1515.363 c 772.609 1515.359 l 748.59 1501.43 729.473
 1480.402 717.887 1455.168 c 705.406 1429.055 699.199 1397.824 699.262 1361.473
 c 699.262 1313.664 l 699.262 1277.312 705.535 1246.016 718.078 1219.777
 c 730.559 1193.473 748.832 1173.219 772.895 1159.008 c 797.086 1144.734
 826.27 1137.602 860.445 1137.602 c 881.375 1137.602 900.766 1140.707 918.621
 1146.914 c 936.543 1152.867 952.223 1161.57 965.66 1173.027 c 965.664 1173.023
 l 992.848 1196.258 1009.039 1229.828 1010.305 1265.566 c 1010.305 1272.574
 l 936.863 1272.574 l 935.969 1259.676 932.02 1247.172 925.344 1236.098 
c 919.094 1225.512 910.062 1216.848 899.23 1211.039 c 887.492 1204.656 874.289
 1201.445 860.93 1201.727 c 844.742 1201.238 828.816 1205.875 815.426 1214.977
 c 802.23 1224.605 792.152 1237.887 786.434 1253.184 c 76.801 1528.801 m
 106.848 1430.113 l 235.199 1430.113 l 265.344 1528.801 l 345.984 1528.801
 l 217.824 1144.898 l 128.93 1144.898 l 0.098 1528.898 l h
172.992 1218.336 m 219.938 1373.566 l 122.594 1373.566 l 169.633 1218.336
 l h
425.473 1528.801 m 455.52 1430.113 l 583.68 1430.113 l 613.727 1528.801
 l 694.461 1528.801 l 566.398 1144.895 l 477.504 1144.895 l 348.77 1528.895
 l h
521.57 1218.336 m 568.609 1373.566 l 471.266 1373.566 l 518.305 1218.336
 l h
521.57 1218.336 m f*
Q Q
showpage
%%Trailer
%%EOF
