%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 0 1440 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 0 1440 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
384 1056 m 384 1021.703 402.297 990.012 432 972.863 c 461.703 955.711 498.297
 955.711 528 972.863 c 557.703 990.012 576 1021.703 576 1056 c 576 1152 
l 576 1186.297 557.703 1217.988 528 1235.137 c 498.297 1252.289 461.703 
1252.289 432 1235.137 c 402.297 1217.988 384 1186.297 384 1152 c h
960 672 m 960 637.703 978.297 606.012 1008 588.863 c 1037.703 571.711 1074.297
 571.711 1104 588.863 c 1133.703 606.012 1152 637.703 1152 672 c 1152 1152
 l 1152 1186.297 1133.703 1217.988 1104 1235.137 c 1074.297 1252.289 1037.703
 1252.289 1008 1235.137 c 978.297 1217.988 960 1186.297 960 1152 c h
672 864 m 672 829.703 690.297 798.012 720 780.863 c 749.703 763.711 786.297
 763.711 816 780.863 c 845.703 798.012 864 829.703 864 864 c 864 1152 l 
864 1186.297 845.703 1217.988 816 1235.137 c 786.297 1252.289 749.703 1252.289
 720 1235.137 c 690.297 1217.988 672 1186.297 672 1152 c h
672 864 m f
384 144 m 288 144 l 237.078 144 188.242 164.227 152.234 200.234 c 116.227
 236.242 96 285.078 96 336 c 96 1344 l 96 1377.703 104.871 1410.812 121.723
 1440 c 138.574 1469.188 162.812 1493.426 192 1510.277 c 221.188 1527.129
 254.297 1536 288 1536 c 1248 1536 l 1281.703 1536 1314.812 1527.129 1344
 1510.277 c 1373.188 1493.426 1397.426 1469.188 1414.277 1440 c 1431.129
 1410.812 1440 1377.703 1440 1344 c 1440 336 l 1440 302.297 1431.129 269.188
 1414.277 240 c 1397.426 210.812 1373.188 186.574 1344 169.723 c 1314.812
 152.871 1281.703 144 1248 144 c 1152 144 l 1152 240 l 1248 240 l 1273.461
 240 1297.879 250.113 1315.883 268.117 c 1333.887 286.121 1344 310.539 1344
 336 c 1344 1344 l 1344 1369.461 1333.887 1393.879 1315.883 1411.883 c 1297.879
 1429.887 1273.461 1440 1248 1440 c 288 1440 l 262.539 1440 238.121 1429.887
 220.117 1411.883 c 202.113 1393.879 192 1369.461 192 1344 c 192 336 l 192
 310.539 202.113 286.121 220.117 268.117 c 238.121 250.113 262.539 240 288
 240 c 384 240 l h
384 144 m f
912 96 m 924.73 96 936.938 101.059 945.941 110.059 c 954.941 119.062 960
 131.27 960 144 c 960 240 l 960 252.73 954.941 264.938 945.941 273.941 c
 936.938 282.941 924.73 288 912 288 c 624 288 l 611.27 288 599.062 282.941
 590.059 273.941 c 581.059 264.938 576 252.73 576 240 c 576 144 l 576 131.27
 581.059 119.062 590.059 110.059 c 599.062 101.059 611.27 96 624 96 c h
624 0 m 585.809 0 549.184 15.172 522.176 42.176 c 495.172 69.184 480 105.809
 480 144 c 480 240 l 480 278.191 495.172 314.816 522.176 341.824 c 549.184
 368.828 585.809 384 624 384 c 912 384 l 950.191 384 986.816 368.828 1013.824
 341.824 c 1040.828 314.816 1056 278.191 1056 240 c 1056 144 l 1056 105.809
 1040.828 69.184 1013.824 42.176 c 986.816 15.172 950.191 0 912 0 c h
624 0 m f
Q Q
showpage
%%Trailer
%%EOF
