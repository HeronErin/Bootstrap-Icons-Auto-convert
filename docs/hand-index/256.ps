%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:48 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 68x68mm 192 192 0 () ()
%%BoundingBox: 31 0 191 192
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 68x68mm
%%PageBoundingBox: 31 0 191 192
192 192 cairo_set_page_size
%%EndPageSetup
q 31 0 160 192 rectclip
1 0 0 -1 0 192 cm q
0 g
81 12 m 85.969 12 90 16.031 90 21 c 90 96 l 90 99.312 92.688 102 96 102
 c 99.312 102 102 99.312 102 96 c 102 65.605 l 103.031 65.559 l 106.836 
65.414 110.676 65.461 112.824 65.883 c 114.434 66.207 116.352 67.035 118.199
 68.066 c 119.125 68.57 120 69.832 120 71.836 c 120 96 l 120 99.312 122.688
 102 126 102 c 129.312 102 132 99.312 132 96 c 132 77.219 l 133.273 77.098
 l 137.066 76.809 140.281 76.977 141.77 77.578 c 143.184 78.129 145.371 
80.062 147.602 82.738 c 148.574 83.891 149.402 85.02 150 85.848 c 150 102
 l 150 105.312 152.688 108 156 108 c 159.312 108 162 105.312 162 102 c 162
 90 l 166.105 90 l 169.496 90 172.727 91.434 175.004 93.949 c 177.277 96.465
 178.383 99.824 178.043 103.199 c 174.789 135.777 l 174.793 135.781 l 174.371
 139.969 173.074 144.02 170.988 147.672 c 154.25 176.977 l 154.246 176.977
 l 153.18 178.844 151.191 180 149.039 180 c 72.422 180 l 70.414 180 68.539
 178.996 67.43 177.324 c 50.234 151.523 l 50.23 151.523 l 48.637 149.133
 47.637 146.391 47.316 143.531 c 43.176 106.27 l 43.176 106.273 l 42.828
 103.176 44.91 100.328 47.965 99.719 c 60 97.32 l 60 108 l 60 111.312 62.688
 114 66 114 c 69.312 114 72 111.312 72 108 c 72 21 l 72 16.031 76.031 12
 81 12 c 102 53.594 m 102 21 l 102 13.496 97.996 6.566 91.5 2.812 c 85.004
 -0.938 76.996 -0.938 70.5 2.812 c 64.004 6.566 60 13.496 60 21 c 60 85.078
 l 45.602 87.957 l 45.602 87.961 l 41.188 88.844 37.266 91.352 34.605 94.984
 c 31.949 98.621 30.754 103.117 31.246 107.594 c 35.387 144.867 l 35.387
 144.863 l 35.922 149.629 37.586 154.195 40.246 158.184 c 57.441 183.984
 l 57.445 183.984 l 60.781 188.992 66.402 192 72.422 192 c 149.043 192 l
 149.039 192 l 152.211 192 155.328 191.16 158.074 189.566 c 160.816 187.973
 163.09 185.684 164.664 182.93 c 181.402 153.637 l 184.332 148.516 186.145
 142.836 186.73 136.969 c 189.984 104.391 l 189.984 104.387 l 190.66 97.641
 188.449 90.922 183.898 85.895 c 179.348 80.867 172.883 78 166.105 78 c 
159.133 78 l 158.383 76.984 157.602 75.992 156.793 75.023 c 154.5 72.277
 150.672 68.207 146.234 66.43 c 141.867 64.676 136.082 64.844 132.34 65.133
 c 130.754 65.277 l 130.754 65.281 l 129.473 62.008 127.098 59.285 124.031
 57.574 c 121.273 55.977 118.289 54.812 115.176 54.121 c 111.457 53.379 
106.309 53.426 102.574 53.57 c h
127.129 77.895 m f
Q Q
showpage
%%Trailer
%%EOF
