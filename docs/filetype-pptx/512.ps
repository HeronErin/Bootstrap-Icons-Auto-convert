%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:55 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 36 3 348 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 36 3 348 384
384 384 cairo_set_page_size
%%EndPageSetup
q 36 3 312 381 rectclip
1 0 0 -1 0 384 cm q
0 g
336 108 m 336 264 l 312 264 l 312 108 l 264 108 l 254.453 108 245.297 104.207
 238.543 97.457 c 231.793 90.703 228 81.547 228 72 c 228 24 l 96 24 l 89.637
 24 83.531 26.527 79.031 31.031 c 74.527 35.531 72 41.637 72 48 c 72 264
 l 48 264 l 48 48 l 48 35.27 53.059 23.062 62.059 14.059 c 71.062 5.059 
83.27 0 96 0 c 228 0 l h
36 284.398 m 74.398 284.398 l 81.344 284.398 87.199 285.832 91.965 288.695
 c 96.797 291.496 100.477 295.312 103.004 300.145 c 105.531 304.977 106.797
 310.391 106.797 316.391 c 106.797 322.391 105.516 327.805 102.957 332.637
 c 100.414 337.422 96.699 341.211 91.82 344.012 c 91.824 344.016 l 86.434
 346.922 80.375 348.352 74.258 348.168 c 54.961 348.168 l 54.961 380.375
 l 36 380.375 l h
85.441 325.535 m 86.863 322.703 87.566 319.562 87.48 316.391 c 87.48 310.949
 86 306.781 83.039 303.887 c 80.078 300.977 75.977 299.52 70.727 299.52 
c 54.91 299.52 l 54.91 333.262 l 70.75 333.262 l 70.754 333.266 l 73.859
 333.344 76.938 332.668 79.727 331.297 c 82.172 329.996 84.164 327.988 85.441
 325.535 c 116.688 284.398 m 155.086 284.398 l 162.031 284.398 167.887 285.832
 172.652 288.695 c 177.484 291.496 181.164 295.312 183.691 300.145 c 186.219
 304.977 187.484 310.391 187.484 316.391 c 187.484 322.391 186.203 327.805
 183.645 332.637 c 181.117 337.422 177.406 341.211 172.508 344.012 c 172.512
 344.016 l 167.125 346.922 161.062 348.352 154.945 348.168 c 135.672 348.168
 l 135.672 380.375 l 116.711 380.375 l h
166.129 325.535 m 167.551 322.703 168.254 319.562 168.168 316.391 c 168.168
 310.949 166.688 306.781 163.727 303.887 c 160.781 300.977 156.68 299.52
 151.414 299.52 c 135.602 299.52 l 135.602 333.262 l 151.441 333.262 l 151.441
 333.266 l 154.547 333.344 157.629 332.668 160.414 331.297 c 162.859 329.996
 164.852 327.988 166.129 325.535 c 234.578 380.375 m 234.578 300.285 l 261.867
 300.285 l 261.867 284.398 l 188.305 284.398 l 188.305 300.285 l 215.52 
300.289 l 215.52 380.379 l h
325.684 284.398 m 347.117 284.398 l 316.543 332.566 l 346.641 380.375 l
 324.848 380.375 l 304.449 346.414 l 303.609 346.414 l 283.137 380.375 l
 262.473 380.375 l 292.234 331.992 l 262.762 284.398 l 285.105 284.398 l
 305.074 318.934 l 305.914 318.934 l h
325.684 284.398 m f*
Q Q
showpage
%%Trailer
%%EOF
