%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 72 7 695 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 72 7 695 768
768 768 cairo_set_page_size
%%EndPageSetup
q 72 7 623 761 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 528 l 624 528 l 624 216 l 528 216 l 508.906 216 490.59 208.414
 477.09 194.91 c 463.586 181.41 456 163.094 456 144 c 456 48 l 192 48 l 
179.27 48 167.062 53.059 158.059 62.059 c 149.059 71.062 144 83.27 144 96
 c 144 528 l 96 528 l 96 96 l 96 70.539 106.113 46.121 124.117 28.117 c 
142.121 10.113 166.539 0 192 0 c 456 0 l h
72 568.801 m 148.801 568.801 l 162.688 568.801 174.402 571.664 183.938 
577.395 c 193.602 582.996 200.961 590.625 206.016 600.289 c 211.07 609.953
 213.602 620.785 213.602 632.785 c 213.602 644.785 211.043 655.617 205.922
 665.281 c 200.832 674.848 193.41 682.434 183.648 688.035 c 183.648 688.031
 l 172.871 693.844 160.75 696.707 148.512 696.336 c 109.922 696.336 l 109.922
 760.75 l 72 760.754 l h
170.879 651.074 m 170.879 651.07 l 173.73 645.406 175.133 639.125 174.961
 632.785 c 174.961 621.906 172 613.57 166.082 607.777 c 160.16 601.953 151.953
 599.043 141.457 599.043 c 109.824 599.043 l 109.824 666.531 l 141.504 666.531
 l 141.504 666.527 l 147.719 666.688 153.879 665.336 159.457 662.594 c 164.34
 659.996 168.324 655.98 170.879 651.07 c 233.375 568.797 m 310.176 568.797
 l 324.062 568.797 335.777 571.66 345.312 577.391 c 354.977 582.992 362.336
 590.621 367.391 600.285 c 372.445 609.949 374.977 620.781 374.977 632.781
 c 374.977 644.781 372.418 655.613 367.297 665.277 c 362.242 674.844 354.816
 682.43 345.023 688.031 c 334.246 693.844 322.125 696.707 309.887 696.336
 c 271.344 696.336 l 271.344 760.75 l 233.422 760.75 l h
332.254 651.07 m 332.258 651.07 l 335.105 645.406 336.508 639.125 336.336
 632.785 c 336.336 621.906 333.375 613.57 327.457 607.777 c 321.57 601.953
 313.359 599.043 302.832 599.043 c 271.199 599.039 l 271.199 666.527 l 302.879
 666.527 l 309.094 666.688 315.254 665.336 320.832 662.594 c 325.719 659.996
 329.699 655.98 332.258 651.07 c 469.152 760.75 m 469.152 600.574 l 523.727
 600.574 l 523.727 568.797 l 376.609 568.801 l 376.609 600.578 l 431.039
 600.574 l 431.039 760.75 l h
651.359 568.797 m 694.223 568.797 l 633.07 665.133 l 693.262 760.75 l 649.676
 760.75 l 608.875 692.828 l 607.195 692.828 l 566.25 760.75 l 524.922 760.75
 l 584.441 663.98 l 525.496 568.797 l 570.184 568.797 l 610.121 637.867 
l 611.801 637.867 l h
651.359 568.797 m f*
Q Q
showpage
%%Trailer
%%EOF
