%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:57 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 144 14 1389 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 144 14 1389 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 144 14 1245 1522 rectclip
1 0 0 -1 0 1536 cm q
0 g
1344 432 m 1344 1056 l 1248 1056 l 1248 432 l 1056 432 l 1017.809 432 981.184
 416.828 954.176 389.824 c 927.172 362.816 912 326.191 912 288 c 912 96 
l 384 96 l 358.539 96 334.121 106.113 316.117 124.117 c 298.113 142.121 
288 166.539 288 192 c 288 1056 l 192 1056 l 192 192 l 192 141.078 212.227
 92.242 248.234 56.234 c 284.242 20.227 333.078 0 384 0 c 912 0 l h
144 1137.602 m 297.602 1137.602 l 325.379 1137.602 348.801 1143.328 367.875
 1154.785 c 387.203 1165.984 401.922 1181.25 412.035 1200.578 c 422.148 
1219.906 427.203 1241.57 427.203 1265.57 c 427.203 1289.57 422.082 1311.234
 411.844 1330.562 c 401.668 1349.699 386.82 1364.867 367.301 1376.066 c 
367.297 1376.062 l 345.742 1387.684 321.5 1393.414 297.023 1392.672 c 219.84
 1392.672 l 219.84 1521.504 l 144 1521.504 l h
341.762 1302.145 m 347.457 1290.812 350.262 1278.246 349.922 1265.566 c
 349.922 1243.805 344 1227.133 332.16 1215.551 c 320.32 1203.902 303.902
 1198.078 282.914 1198.078 c 219.648 1198.078 l 219.648 1333.055 l 283.008
 1333.055 l 295.438 1333.375 307.758 1330.676 318.91 1325.184 c 328.684 
1319.992 336.648 1311.957 341.762 1302.145 c 466.754 1137.602 m 620.355 
1137.602 l 648.133 1137.602 671.555 1143.328 690.629 1154.785 c 709.957 
1165.984 724.676 1181.25 734.789 1200.578 c 744.902 1219.906 749.957 1241.57
 749.957 1265.57 c 749.957 1289.57 744.836 1311.234 734.598 1330.562 c 724.484
 1349.699 709.637 1364.867 690.055 1376.066 c 690.047 1376.062 l 668.492
 1387.684 644.254 1393.414 619.777 1392.672 c 542.688 1392.672 l 542.688
 1521.504 l 466.848 1521.504 l h
664.516 1302.145 m 664.512 1302.145 l 670.211 1290.812 673.016 1278.246
 672.672 1265.566 c 672.672 1243.805 666.75 1227.133 654.91 1215.551 c 643.133
 1203.902 626.719 1198.078 605.664 1198.078 c 542.398 1198.078 l 542.398
 1333.055 l 605.762 1333.055 l 618.188 1333.375 630.508 1330.676 641.664
 1325.184 c 651.434 1319.992 659.402 1311.957 664.512 1302.145 c 938.305
 1521.504 m 938.305 1201.152 l 1047.457 1201.152 l 1047.457 1137.602 l 753.215
 1137.602 l 753.215 1201.152 l 862.078 1201.152 l 862.078 1521.504 l h
1302.719 1137.602 m 1388.445 1137.602 l 1266.141 1330.273 l 1386.523 1521.504
 l 1299.355 1521.504 l 1217.754 1385.664 l 1214.395 1385.664 l 1132.508 
1521.504 l 1049.852 1521.504 l 1168.891 1327.969 l 1051.004 1137.602 l 1140.379
 1137.602 l 1220.25 1275.746 l 1223.609 1275.746 l h
1302.719 1137.602 m f*
Q Q
showpage
%%Trailer
%%EOF
