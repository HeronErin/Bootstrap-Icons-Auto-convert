%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:59 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1440 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1440 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1248 1440 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 96 m 616.992 96 477.887 123.742 374.785 170.594 c 276 215.52 192 287.328
 192 384 c 192 480.672 276 552.48 374.785 597.406 c 477.887 644.258 616.992
 672 768 672 c 919.008 672 1058.113 644.258 1161.215 597.406 c 1260 552.48
 1344 480.672 1344 384 c 1344 287.328 1260 215.52 1161.215 170.594 c 1058.113
 123.742 919.008 96 768 96 c f
374.785 885.406 m 276 840.48 192 768.672 192 672 c 192 591.457 l 235.871
 632.93 288.383 663.555 335.039 684.77 c 453.312 738.527 606.527 768 768
 768 c 929.473 768 1082.688 738.527 1200.961 684.77 c 1247.617 663.648 1300.129
 632.93 1344 591.457 c 1344 672 l 1344 712.703 1329.121 748.992 1304.543
 780.77 c 1261.766 770.109 1217.605 766.062 1173.602 768.77 c 1135.547 765.91
 1097.309 770.641 1061.102 782.688 c 1024.895 794.734 991.441 813.859 962.688
 838.945 c 915.129 870.211 874.219 910.566 842.305 957.695 c 817.566 959.262
 792.785 960.031 768 960 c 616.992 960 477.887 932.258 374.785 885.406 c
 768 1344 m 606.527 1344 453.312 1314.527 335.039 1260.77 c 288.383 1239.648
 235.871 1208.93 192 1167.457 c 192 1248 l 192 1344.672 276 1416.48 374.785
 1461.406 c 477.887 1508.258 616.992 1536 768 1536 c 776.574 1536 785.09
 1535.902 793.535 1535.711 c 776.797 1506.59 767.992 1473.59 768 1440 c 
h
768 1200 m 768 1209.602 768.32 1219.199 768.961 1228.801 c 768.32 1235.18
 768 1241.59 768 1248 c 616.992 1248 477.887 1220.258 374.785 1173.406 c
 276 1128.48 192 1056.672 192 960 c 192 879.457 l 235.871 920.93 288.383
 951.555 335.039 972.77 c 453.312 1026.527 606.527 1056 768 1056 c 776.32
 1056 784.543 1055.938 792.672 1055.809 c 776.312 1102.121 767.969 1150.883
 768 1200 c f
864 1248 m 864 1222.539 874.113 1198.121 892.117 1180.117 c 910.121 1162.113
 934.539 1152 960 1152 c 960 1056 l 960 1005.078 980.227 956.242 1016.234
 920.234 c 1052.242 884.227 1101.078 864 1152 864 c 1202.922 864 1251.758
 884.227 1287.766 920.234 c 1323.773 956.242 1344 1005.078 1344 1056 c 1344
 1152 l 1369.461 1152 1393.879 1162.113 1411.883 1180.117 c 1429.887 1198.121
 1440 1222.539 1440 1248 c 1440 1440 l 1440 1465.461 1429.887 1489.879 1411.883
 1507.883 c 1393.879 1525.887 1369.461 1536 1344 1536 c 960 1536 l 934.539
 1536 910.121 1525.887 892.117 1507.883 c 874.113 1489.879 864 1465.461 
864 1440 c h
1152 960 m 1126.539 960 1102.121 970.113 1084.117 988.117 c 1066.113 1006.121
 1056 1030.539 1056 1056 c 1056 1152 l 1248 1152 l 1248 1056 l 1248 1030.539
 1237.887 1006.121 1219.883 988.117 c 1201.879 970.113 1177.461 960 1152
 960 c f
Q Q
showpage
%%Trailer
%%EOF
