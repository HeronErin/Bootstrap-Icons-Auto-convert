%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 624 720 rectclip
1 0 0 -1 0 768 cm q
0 g
384 48 m 308.496 48 238.945 61.871 187.391 85.297 c 138 107.762 96 143.664
 96 192 c 96 240.336 138 276.238 187.391 298.703 c 238.945 322.129 308.496
 336 384 336 c 459.504 336 529.055 322.129 580.609 298.703 c 630 276.238
 672 240.336 672 192 c 672 143.664 630 107.762 580.609 85.297 c 529.055 
61.871 459.504 48 384 48 c f
187.391 442.703 m 138 420.238 96 384.336 96 336 c 96 295.727 l 117.938 
316.461 144.191 331.773 167.52 342.383 c 226.656 369.266 303.266 384 384
 384 c 464.734 384 541.344 369.266 600.48 342.383 c 623.809 331.824 650.066
 316.461 672 295.727 c 672 336 l 672 356.352 664.559 374.496 652.273 390.383
 c 630.883 385.055 608.801 383.031 586.801 384.383 c 548.367 381.496 510.383
 394.137 481.344 419.473 c 457.566 435.105 437.109 455.285 421.152 478.848
 c 408.785 479.633 396.395 480.016 384 480 c 308.496 480 238.945 466.129
 187.391 442.703 c 384 672 m 303.266 672 226.656 657.266 167.52 630.383 
c 144.191 619.824 117.934 604.461 96 583.727 c 96 624 l 96 672.336 138 708.238
 187.391 730.703 c 238.945 754.129 308.496 768 384 768 c 388.289 768 392.543
 767.953 396.77 767.855 c 388.398 753.297 383.996 736.793 384 720 c h
384 600 m 384 604.801 384.16 609.602 384.48 614.398 c 384.16 617.59 384
 620.793 384 624 c 308.496 624 238.945 610.129 187.391 586.703 c 138 564.238
 96 528.336 96 480 c 96 439.727 l 117.938 460.461 144.191 475.773 167.52
 486.383 c 226.656 513.266 303.266 528 384 528 c 388.16 528 392.273 527.969
 396.336 527.902 c 388.156 551.059 383.984 575.441 384 600 c f
432 624 m 432 611.27 437.059 599.062 446.059 590.059 c 455.062 581.059 
467.27 576 480 576 c 480 528 l 480 493.703 498.297 462.012 528 444.863 c
 557.703 427.711 594.297 427.711 624 444.863 c 653.703 462.012 672 493.703
 672 528 c 672 576 l 684.73 576 696.938 581.059 705.941 590.059 c 714.941
 599.062 720 611.27 720 624 c 720 720 l 720 732.73 714.941 744.938 705.941
 753.941 c 696.938 762.941 684.73 768 672 768 c 480 768 l 467.27 768 455.062
 762.941 446.059 753.941 c 437.059 744.938 432 732.73 432 720 c h
576 480 m 563.27 480 551.062 485.059 542.059 494.059 c 533.059 503.062 
528 515.27 528 528 c 528 576 l 624 576 l 624 528 l 624 515.27 618.941 503.062
 609.941 494.059 c 600.938 485.059 588.73 480 576 480 c f
Q Q
showpage
%%Trailer
%%EOF
