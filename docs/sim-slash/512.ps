%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:45 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 23 0 361 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 23 0 361 384
384 384 cairo_set_page_size
%%EndPageSetup
q 23 0 338 384 rectclip
1 0 0 -1 0 384 cm q
0 g
279.504 10.559 m 301.031 32.062 l 284.062 49.031 l 262.535 27.504 l 260.285
 25.262 257.242 24 254.062 24 c 84 24 l 77.371 24 72 29.371 72 36 c 72 261.098
 l 48 285.098 l 48 36 l 48 26.453 51.793 17.297 58.543 10.543 c 65.297 3.793
 74.453 0 84 0 c 254.062 0 l 263.609 0.008 272.758 3.809 279.504 10.559 
c 252 72 m 254.801 72 257.52 72.312 260.16 72.938 c 237.098 96 l 204 96 
l 204 129.098 l 165.098 168 l 120 168 l 120 213.098 l 96 237.098 l 96 108
 l 96 98.453 99.793 89.297 106.543 82.543 c 113.297 75.793 122.453 72 132
 72 c h
288 146.902 m 264 170.902 l 264 216 l 218.902 216 l 180 254.902 l 180 288
 l 146.902 288 l 123.84 311.062 l 126.48 311.688 129.199 312 132 312 c 252
 312 l 261.547 312 270.703 308.207 277.457 301.457 c 284.207 294.703 288
 285.547 288 276 c h
84 360 m 81.527 360 79.113 359.238 77.09 357.816 c 60.051 374.855 l 66.41
 380.543 74.812 384 84.004 384 c 300.004 384 l 300 384 l 309.547 384 318.703
 380.207 325.457 373.457 c 332.207 366.703 336 357.547 336 348 c 336 98.902
 l 312 122.902 l 312 348 l 312 351.184 310.734 354.234 308.484 356.484 c
 306.234 358.734 303.184 360 300 360 c h
132 96 m 125.371 96 120 101.371 120 108 c 120 144 l 180 144 l 180 96 l 
h
264 240 m 264 276 l 264 279.184 262.734 282.234 260.484 284.484 c 258.234
 286.734 255.184 288 252 288 c 204 288 l 204 240 l h
356.496 44.496 m 361.188 39.805 361.188 32.195 356.496 27.504 c 351.805
 22.812 344.195 22.812 339.504 27.504 c 27.504 339.504 l 22.812 344.195 
22.812 351.805 27.504 356.496 c 32.195 361.188 39.805 361.188 44.496 356.496
 c h
356.496 44.496 m f
Q Q
showpage
%%Trailer
%%EOF
