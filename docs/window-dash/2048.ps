%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:58 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
240 480 m 257.148 480 272.996 470.852 281.57 456 c 290.145 441.148 290.145
 422.852 281.57 408 c 272.996 393.148 257.148 384 240 384 c 222.852 384 
207.004 393.148 198.43 408 c 189.855 422.852 189.855 441.148 198.43 456 
c 207.004 470.852 222.852 480 240 480 c 384 480 m 401.148 480 416.996 470.852
 425.57 456 c 434.145 441.148 434.145 422.852 425.57 408 c 416.996 393.148
 401.148 384 384 384 c 366.852 384 351.004 393.148 342.43 408 c 333.855 
422.852 333.855 441.148 342.43 456 c 351.004 470.852 366.852 480 384 480
 c 576 432 m 576 449.148 566.852 464.996 552 473.57 c 537.148 482.145 518.852
 482.145 504 473.57 c 489.148 464.996 480 449.148 480 432 c 480 414.852 
489.148 399.004 504 390.43 c 518.852 381.855 537.148 381.855 552 390.43 
c 566.852 399.004 576 414.852 576 432 c f
0 384 m 0 333.078 20.227 284.242 56.234 248.234 c 92.242 212.227 141.078
 192 192 192 c 1248 192 l 1281.703 192 1314.812 200.871 1344 217.723 c 1373.188
 234.574 1397.426 258.812 1414.277 288 c 1431.129 317.188 1440 350.297 1440
 384 c 1440 768 l 1440 785.148 1430.852 800.996 1416 809.57 c 1401.148 818.145
 1382.852 818.145 1368 809.57 c 1353.148 800.996 1344 785.148 1344 768 c
 1344 672 l 96 672 l 96 1152 l 96 1177.461 106.113 1201.879 124.117 1219.883
 c 142.121 1237.887 166.539 1248 192 1248 c 720 1248 l 737.148 1248 752.996
 1257.148 761.57 1272 c 770.145 1286.852 770.145 1305.148 761.57 1320 c 
752.996 1334.852 737.148 1344 720 1344 c 192 1344 l 141.078 1344 92.242 
1323.773 56.234 1287.766 c 20.227 1251.758 0 1202.922 0 1152 c h
96 576 m 1344 576 l 1344 384 l 1344 358.539 1333.887 334.121 1315.883 316.117
 c 1297.879 298.113 1273.461 288 1248 288 c 192 288 l 166.539 288 142.121
 298.113 124.117 316.117 c 106.113 334.121 96 358.539 96 384 c h
96 576 m f
1536 1200 m 1536 1289.113 1500.602 1374.574 1437.586 1437.586 c 1374.574
 1500.602 1289.113 1536 1200 1536 c 1110.887 1536 1025.426 1500.602 962.414
 1437.586 c 899.398 1374.574 864 1289.113 864 1200 c 864 1110.887 899.398
 1025.426 962.414 962.414 c 1025.426 899.398 1110.887 864 1200 864 c 1289.113
 864 1374.574 899.398 1437.586 962.414 c 1500.602 1025.426 1536 1110.887
 1536 1200 c 1008 1200 m 1008 1212.73 1013.059 1224.938 1022.059 1233.941
 c 1031.062 1242.941 1043.27 1248 1056 1248 c 1344 1248 l 1361.148 1248 
1376.996 1238.852 1385.57 1224 c 1394.145 1209.148 1394.145 1190.852 1385.57
 1176 c 1376.996 1161.148 1361.148 1152 1344 1152 c 1056 1152 l 1043.27 
1152 1031.062 1157.059 1022.059 1166.059 c 1013.059 1175.062 1008 1187.27
 1008 1200 c f
Q Q
showpage
%%Trailer
%%EOF
