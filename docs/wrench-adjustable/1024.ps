%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 11 11 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 11 11 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 11 11 757 757 rectclip
1 0 0 -1 0 768 cm q
0 g
768 216 m 768.008 248.547 760.656 280.676 746.504 309.98 c 732.348 339.289
 711.754 365.02 686.258 385.246 c 624 240 l 766.031 186.719 l 767.312 196.32
 767.969 206.078 768 216 c f
552 432 m 583.344 432 613.105 425.328 639.984 413.281 c 576 264 l 528 144
 l 711.648 70.559 l 677.805 33.398 632.062 9.203 582.297 2.145 c 532.535
 -4.918 481.867 5.594 439.023 31.875 c 396.176 58.152 363.836 98.547 347.574
 146.105 c 331.309 193.664 332.137 245.406 349.922 292.414 c 56.355 537.023
 l 56.352 537.023 l 29.602 559.328 13.465 591.855 11.895 626.648 c 10.32
 661.441 23.453 695.293 48.082 719.918 c 72.707 744.547 106.559 757.68 141.352
 756.105 c 176.145 754.535 208.672 738.398 230.977 711.648 c 475.586 418.078
 l 500.004 427.301 525.895 432.016 552 432 c 489.984 222.672 m 461.375 265.535
 l 500.207 252.574 l 505.086 250.93 510.477 252.578 513.594 256.676 c 516.715
 260.773 516.871 266.406 513.984 270.672 c 485.375 313.535 l 524.207 300.574
 l 531.793 323.375 l 459.793 347.375 l 454.926 349 449.566 347.352 446.457
 343.273 c 443.344 339.195 443.168 333.594 446.016 329.328 c 474.625 286.465
 l 435.793 299.426 l 430.914 301.07 425.523 299.422 422.406 295.324 c 419.285
 291.227 419.129 285.594 422.016 281.328 c 450.625 238.465 l 411.793 251.426
 l 404.207 228.625 l 476.207 204.625 l 481.074 203 486.434 204.648 489.543
 208.727 c 492.656 212.805 492.832 218.406 489.984 222.672 c 144 672 m 126.852
 672 111.004 662.852 102.43 648 c 93.855 633.148 93.855 614.852 102.43 600
 c 111.004 585.148 126.852 576 144 576 c 161.148 576 176.996 585.148 185.57
 600 c 194.145 614.852 194.145 633.148 185.57 648 c 176.996 662.852 161.148
 672 144 672 c f
Q Q
showpage
%%Trailer
%%EOF
