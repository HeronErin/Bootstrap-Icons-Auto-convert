%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 5 5 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 5 5 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 5 5 379 379 rectclip
1 0 0 -1 0 384 cm q
0 g
384 108 m 384.008 140.969 368.953 172.133 343.129 192.625 c 312 120 l 383.016
 93.359 l 383.656 98.16 383.984 103.039 384 108 c f
276 216 m 291.672 216 306.551 212.664 319.992 206.641 c 288 132 l 264 72
 l 355.824 35.281 l 333.082 10.309 299.969 -2.582 266.332 0.434 c 232.695
 3.449 202.402 22.027 184.465 50.641 c 166.527 79.258 163.012 114.617 174.961
 146.207 c 28.176 268.512 l 14.801 279.664 6.734 295.926 5.945 313.324 c
 5.16 330.723 11.727 347.645 24.039 359.961 c 36.355 372.273 53.277 378.84
 70.676 378.055 c 88.074 377.266 104.336 369.199 115.488 355.824 c 237.793
 209.039 l 250.004 213.648 262.949 216.008 276 216 c 244.992 111.336 m 230.688
 132.77 l 250.102 126.289 l 250.105 126.289 l 252.543 125.465 255.238 126.289
 256.797 128.34 c 258.355 130.387 258.434 133.203 256.992 135.336 c 242.688
 156.77 l 262.102 150.289 l 265.895 161.688 l 229.895 173.688 l 227.465 
174.5 224.785 173.676 223.227 171.637 c 221.672 169.598 221.582 166.797 
223.008 164.664 c 237.312 143.23 l 217.898 149.711 l 217.895 149.711 l 215.457
 150.535 212.762 149.711 211.203 147.66 c 209.645 145.613 209.566 142.797
 211.008 140.664 c 225.312 119.23 l 205.898 125.711 l 202.105 114.312 l 
238.105 102.312 l 240.535 101.5 243.215 102.324 244.773 104.363 c 246.328
 106.402 246.418 109.203 244.992 111.336 c 72 336 m 63.426 336 55.504 331.426
 51.215 324 c 46.93 316.574 46.93 307.426 51.215 300 c 55.504 292.574 63.426
 288 72 288 c 80.574 288 88.496 292.574 92.785 300 c 97.07 307.426 97.07
 316.574 92.785 324 c 88.496 331.426 80.574 336 72 336 c f
Q Q
showpage
%%Trailer
%%EOF
