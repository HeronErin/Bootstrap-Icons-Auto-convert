%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:38 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
264 360 m 298.297 360 329.988 341.703 347.137 312 c 364.289 282.297 364.289
 245.703 347.137 216 c 329.988 186.297 298.297 168 264 168 c 229.703 168
 198.012 186.297 180.863 216 c 163.711 245.703 163.711 282.297 180.863 312
 c 198.012 341.703 229.703 360 264 360 c 384 264 m 384 306.871 361.129 346.488
 324 367.922 c 286.871 389.359 241.129 389.359 204 367.922 c 166.871 346.488
 144 306.871 144 264 c 144 221.129 166.871 181.512 204 160.078 c 241.129
 138.641 286.871 138.641 324 160.078 c 361.129 181.512 384 221.129 384 264
 c f*
226.512 286.656 m 227.641 300.961 238.945 312.098 259.223 313.441 c 259.223
 324 l 268.223 324 l 268.223 313.367 l 289.223 311.902 301.488 300.672 301.488
 284.398 c 301.488 269.566 292.129 261.934 275.328 258 c 268.223 256.32 
l 268.223 227.52 l 277.246 228.551 282.957 233.473 284.328 240.289 c 300.121
 240.289 l 298.992 226.488 287.16 215.715 268.227 214.535 c 268.223 204 
l 259.223 204 l 259.223 214.801 l 241.293 216.555 229.102 227.328 229.102
 242.594 c 229.102 256.082 238.172 264.672 253.27 268.18 c 259.223 269.645
 l 259.223 300.172 l 250.008 298.781 243.887 293.691 242.52 286.66 c 226.488
 286.66 l h
259.152 254.16 m 250.297 252.121 245.496 247.922 245.496 241.633 c 245.496
 234.578 250.68 229.297 259.223 227.762 c 259.223 254.16 l h
269.52 272.062 m 280.297 274.559 285.238 278.59 285.238 285.719 c 285.238
 293.855 279.07 299.422 268.223 300.453 c 268.223 271.773 l h
269.52 272.062 m f
24 0 m 17.637 0 11.531 2.527 7.031 7.031 c 2.527 11.531 0 17.637 0 24 c
 0 216 l 0 222.363 2.527 228.469 7.031 232.969 c 11.531 237.473 17.637 240
 24 240 c 121.992 240 l 123.398 231.727 125.465 223.727 128.184 216 c 72
 216 l 72 203.27 66.941 191.062 57.941 182.059 c 48.938 173.059 36.73 168
 24 168 c 24 72 l 36.73 72 48.938 66.941 57.941 57.941 c 66.941 48.938 72
 36.73 72 24 c 312 24 l 312 36.73 317.059 48.938 326.059 57.941 c 335.062
 66.941 347.27 72 360 72 c 360 156.672 l 369.121 164.832 377.207 174.145
 384 184.367 c 384 24 l 384 17.637 381.473 11.531 376.969 7.031 c 372.469
 2.527 366.363 0 360 0 c h
24 0 m f
239.953 121.992 m 240 120 l 239.988 103.188 231.184 87.605 216.789 78.926
 c 202.391 70.242 184.5 69.727 169.629 77.562 c 154.754 85.398 145.062 100.445
 144.082 117.227 c 143.102 134.012 150.973 150.086 164.832 159.602 c 185.578
 139.875 211.73 126.781 239.953 121.992 c f
Q Q
showpage
%%Trailer
%%EOF
