%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:39 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
528 720 m 578.922 720 627.758 699.773 663.766 663.766 c 699.773 627.758
 720 578.922 720 528 c 720 477.078 699.773 428.242 663.766 392.234 c 627.758
 356.227 578.922 336 528 336 c 477.078 336 428.242 356.227 392.234 392.234
 c 356.227 428.242 336 477.078 336 528 c 336 578.922 356.227 627.758 392.234
 663.766 c 428.242 699.773 477.078 720 528 720 c 768 528 m 768 591.652 742.715
 652.695 697.707 697.707 c 652.695 742.715 591.652 768 528 768 c 464.348
 768 403.305 742.715 358.293 697.707 c 313.285 652.695 288 591.652 288 528
 c 288 464.348 313.285 403.305 358.293 358.293 c 403.305 313.285 464.348
 288 528 288 c 591.652 288 652.695 313.285 697.707 358.293 c 742.715 403.305
 768 464.348 768 528 c f*
453.023 573.312 m 455.281 601.922 477.887 624.191 518.449 626.879 c 518.449
 648 l 536.449 648 l 536.449 626.734 l 578.449 623.805 602.977 601.344 602.977
 568.797 c 602.977 539.133 584.258 523.867 550.656 515.996 c 536.449 512.637
 l 536.449 455.035 l 554.496 457.098 565.922 466.938 568.656 480.57 c 600.242
 480.57 l 597.984 452.969 574.32 431.418 536.449 429.066 c 536.449 408 l
 518.449 408 l 518.449 429.602 l 482.594 433.105 458.211 454.656 458.211
 485.188 c 458.211 512.164 476.355 529.348 506.547 536.355 c 518.449 539.285
 l 518.449 600.34 l 500.016 597.555 487.777 587.379 485.043 573.316 c 452.98
 573.316 l h
518.305 508.32 m 500.594 504.242 490.992 495.84 490.992 483.266 c 490.992
 469.152 501.359 458.594 518.449 455.523 c 518.449 508.324 l h
539.039 544.129 m 560.59 549.121 570.48 557.184 570.48 571.441 c 570.48
 587.715 558.145 598.848 536.449 600.914 c 536.449 543.555 l h
539.039 544.129 m f
48 0 m 35.27 0 23.062 5.059 14.059 14.059 c 5.059 23.062 0 35.27 0 48 c
 0 432 l 0 444.73 5.059 456.938 14.059 465.941 c 23.062 474.941 35.27 480
 48 480 c 243.984 480 l 246.801 463.457 250.93 447.457 256.367 432 c 144
 432 l 144 406.539 133.887 382.121 115.883 364.117 c 97.879 346.113 73.461
 336 48 336 c 48 144 l 73.461 144 97.879 133.887 115.883 115.883 c 133.887
 97.879 144 73.461 144 48 c 624 48 l 624 73.461 634.113 97.879 652.117 115.883
 c 670.121 133.887 694.539 144 720 144 c 720 313.344 l 738.238 329.664 754.414
 348.289 768 368.734 c 768 48 l 768 35.27 762.941 23.062 753.941 14.059 
c 744.938 5.059 732.73 0 720 0 c h
48 0 m f
479.902 243.984 m 480 240 l 479.98 206.375 462.371 175.215 433.578 157.848
 c 404.781 140.484 369.004 139.449 339.254 155.121 c 309.508 170.793 290.125
 200.887 288.164 234.457 c 286.203 268.023 301.945 300.168 329.664 319.199
 c 371.156 279.754 423.461 253.566 479.902 243.984 c f
Q Q
showpage
%%Trailer
%%EOF
