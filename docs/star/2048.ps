%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 47 1536 1489
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 47 1536 1489
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 47 1536 1442 rectclip
1 0 0 -1 0 1536 cm q
0 g
275.137 1425.602 m 267.648 1468.227 309.695 1501.539 346.754 1482.531 c
 768.195 1265.957 l 1189.539 1482.531 l 1226.594 1501.539 1268.645 1468.227
 1261.156 1425.699 c 1181.477 971.621 l 1519.59 649.445 l 1551.27 619.301
 1534.949 564.199 1492.52 558.246 c 1022.312 491.43 l 812.641 76.031 l 807.285
 64.746 797.844 55.918 786.227 51.328 c 774.609 46.742 761.68 46.742 750.062
 51.328 c 738.441 55.918 729 64.746 723.648 76.031 c 513.984 491.52 l 43.777
 558.336 l 1.441 564.289 -14.977 619.391 16.609 649.535 c 354.816 971.711
 l 275.137 1425.789 l h
746.016 1159.969 m 392.16 1341.793 l 458.785 961.922 l 462.043 944.156 
456.164 925.945 443.137 913.441 c 164.16 647.52 l 553.152 592.223 l 569.469
 589.676 583.535 579.367 590.879 564.574 c 768 213.406 l 945.312 564.574
 l 952.656 579.367 966.723 589.676 983.039 592.223 c 1372.031 647.422 l 
1093.055 913.344 l 1079.996 925.871 1074.117 944.125 1077.406 961.922 c 
1144.031 1341.793 l 790.176 1159.969 l 776.305 1152.762 759.793 1152.762
 745.922 1159.969 c h
746.016 1159.969 m f
Q Q
showpage
%%Trailer
%%EOF
