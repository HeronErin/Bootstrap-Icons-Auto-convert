%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:36 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 288 0 1248 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 288 0 1248 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 288 0 960 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
576 480 m 588.73 480 600.938 485.059 609.941 494.059 c 618.941 503.062 
624 515.27 624 528 c 624 1200 l 624 1217.148 614.852 1232.996 600 1241.57
 c 585.148 1250.145 566.852 1250.145 552 1241.57 c 537.148 1232.996 528 
1217.148 528 1200 c 528 528 l 528 515.27 533.059 503.062 542.059 494.059
 c 551.062 485.059 563.27 480 576 480 c 768 480 m 780.73 480 792.938 485.059
 801.941 494.059 c 810.941 503.062 816 515.27 816 528 c 816 1200 l 816 1217.148
 806.852 1232.996 792 1241.57 c 777.148 1250.145 758.852 1250.145 744 1241.57
 c 729.148 1232.996 720 1217.148 720 1200 c 720 528 l 720 515.27 725.059
 503.062 734.059 494.059 c 743.062 485.059 755.27 480 768 480 c 960 480 
m 972.73 480 984.938 485.059 993.941 494.059 c 1002.941 503.062 1008 515.27
 1008 528 c 1008 1200 l 1008 1217.148 998.852 1232.996 984 1241.57 c 969.148
 1250.145 950.852 1250.145 936 1241.57 c 921.148 1232.996 912 1217.148 912
 1200 c 912 528 l 912 515.27 917.059 503.062 926.059 494.059 c 935.062 485.059
 947.27 480 960 480 c f
624 0 m 611.27 0 599.062 5.059 590.059 14.059 c 581.059 23.062 576 35.27
 576 48 c 576 288 l 480 288 l 429.078 288 380.242 308.227 344.234 344.234
 c 308.227 380.242 288 429.078 288 480 c 288 1248 l 287.992 1282.289 297.168
 1315.957 314.574 1345.5 c 331.98 1375.043 356.98 1399.387 386.977 1416 
c 379.672 1444.75 386.023 1475.262 404.199 1498.707 c 422.371 1522.148 450.336
 1535.906 480 1536 c 505.461 1536 529.879 1525.887 547.883 1507.883 c 565.887
 1489.879 576 1465.461 576 1440 c 960 1440 l 960.082 1467.52 971.969 1493.68
 992.645 1511.84 c 1013.316 1530 1040.793 1538.418 1068.09 1534.953 c 1095.391
 1531.484 1119.891 1516.469 1135.371 1493.719 c 1150.852 1470.965 1155.824
 1442.664 1149.023 1416 c 1179.02 1399.387 1204.02 1375.043 1221.426 1345.5
 c 1238.832 1315.957 1248.008 1282.289 1248 1248 c 1248 480 l 1248 446.297
 1239.129 413.188 1222.277 384 c 1205.426 354.812 1181.188 330.574 1152 
313.723 c 1122.812 296.871 1089.703 288 1056 288 c 960 288 l 960 48 l 960
 35.27 954.941 23.062 945.941 14.059 c 936.938 5.059 924.73 0 912 0 c h
864 288 m 672 288 l 672 96 l 864 96 l h
1152 1248 m 1152 1273.461 1141.887 1297.879 1123.883 1315.883 c 1105.879
 1333.887 1081.461 1344 1056 1344 c 480 1344 l 454.539 1344 430.121 1333.887
 412.117 1315.883 c 394.113 1297.879 384 1273.461 384 1248 c 384 480 l 384
 454.539 394.113 430.121 412.117 412.117 c 430.121 394.113 454.539 384 480
 384 c 1056 384 l 1081.461 384 1105.879 394.113 1123.883 412.117 c 1141.887
 430.121 1152 454.539 1152 480 c h
1152 1248 m f
Q Q
showpage
%%Trailer
%%EOF
