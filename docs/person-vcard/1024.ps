%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 576 rectclip
1 0 0 -1 0 768 cm q
0 g
240 384 m 274.297 384 305.988 365.703 323.137 336 c 340.289 306.297 340.289
 269.703 323.137 240 c 305.988 210.297 274.297 192 240 192 c 205.703 192
 174.012 210.297 156.863 240 c 139.711 269.703 139.711 306.297 156.863 336
 c 174.012 365.703 205.703 384 240 384 c 432 264 m 432 257.637 434.527 251.531
 439.031 247.031 c 443.531 242.527 449.637 240 456 240 c 648 240 l 656.574
 240 664.496 244.574 668.785 252 c 673.07 259.426 673.07 268.574 668.785
 276 c 664.496 283.426 656.574 288 648 288 c 456 288 l 449.637 288 443.531
 285.473 439.031 280.969 c 434.527 276.469 432 270.363 432 264 c 432 384
 m 432 377.637 434.527 371.531 439.031 367.031 c 443.531 362.527 449.637
 360 456 360 c 648 360 l 656.574 360 664.496 364.574 668.785 372 c 673.07
 379.426 673.07 388.574 668.785 396 c 664.496 403.426 656.574 408 648 408
 c 456 408 l 449.637 408 443.531 405.473 439.031 400.969 c 434.527 396.469
 432 390.363 432 384 c 480 504 m 480 497.637 482.527 491.531 487.031 487.031
 c 491.531 482.527 497.637 480 504 480 c 648 480 l 656.574 480 664.496 484.574
 668.785 492 c 673.07 499.426 673.07 508.574 668.785 516 c 664.496 523.426
 656.574 528 648 528 c 504 528 l 497.637 528 491.531 525.473 487.031 520.969
 c 482.527 516.469 480 510.363 480 504 c f
96 96 m 70.539 96 46.121 106.113 28.117 124.117 c 10.113 142.121 0 166.539
 0 192 c 0 576 l 0 601.461 10.113 625.879 28.117 643.883 c 46.121 661.887
 70.539 672 96 672 c 672 672 l 697.461 672 721.879 661.887 739.883 643.883
 c 757.887 625.879 768 601.461 768 576 c 768 192 l 768 166.539 757.887 142.121
 739.883 124.117 c 721.879 106.113 697.461 96 672 96 c h
48 192 m 48 179.27 53.059 167.062 62.059 158.059 c 71.062 149.059 83.27
 144 96 144 c 672 144 l 684.73 144 696.938 149.059 705.941 158.059 c 714.941
 167.062 720 179.27 720 192 c 720 576 l 720 588.73 714.941 600.938 705.941
 609.941 c 696.938 618.941 684.73 624 672 624 c 430.078 624 l 431.359 616.16
 432 608.16 432 600 c 432 507.215 346.078 432 240 432 c 139.871 432 57.602
 499.105 48.77 584.688 c 48.25 581.82 47.992 578.914 48 576 c h
48 192 m f
Q Q
showpage
%%Trailer
%%EOF
