%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:36 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 432 48 1104 1488
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 432 48 1104 1488
1536 1536 cairo_set_page_size
%%EndPageSetup
q 432 48 672 1440 rectclip
1 0 0 -1 0 1536 cm q
0 g
432 288 m 432 224.348 457.285 163.305 502.293 118.293 c 547.305 73.285 
608.348 48 672 48 c 735.652 48 796.695 73.285 841.707 118.293 c 886.715 
163.305 912 224.348 912 288 c 912 1152 l 912 1203.445 884.555 1250.984 840
 1276.707 c 795.445 1302.43 740.555 1302.43 696 1276.707 c 651.445 1250.984
 624 1203.445 624 1152 c 624 480 l 624 462.852 633.148 447.004 648 438.43
 c 662.852 429.855 681.148 429.855 696 438.43 c 710.852 447.004 720 462.852
 720 480 c 720 1152 l 720 1169.148 729.148 1184.996 744 1193.57 c 758.852
 1202.145 777.148 1202.145 792 1193.57 c 806.852 1184.996 816 1169.148 816
 1152 c 816 288 l 816 236.555 788.555 189.016 744 163.293 c 699.445 137.57
 644.555 137.57 600 163.293 c 555.445 189.016 528 236.555 528 288 c 528 
1152 l 528 1215.652 553.285 1276.695 598.293 1321.707 c 643.305 1366.715
 704.348 1392 768 1392 c 831.652 1392 892.695 1366.715 937.707 1321.707 
c 982.715 1276.695 1008 1215.652 1008 1152 c 1008 480 l 1008 462.852 1017.148
 447.004 1032 438.43 c 1046.852 429.855 1065.148 429.855 1080 438.43 c 1094.852
 447.004 1104 462.852 1104 480 c 1104 1152 l 1104 1241.113 1068.602 1326.574
 1005.586 1389.586 c 942.574 1452.602 857.113 1488 768 1488 c 678.887 1488
 593.426 1452.602 530.414 1389.586 c 467.398 1326.574 432 1241.113 432 1152
 c h
432 288 m f
Q Q
showpage
%%Trailer
%%EOF
