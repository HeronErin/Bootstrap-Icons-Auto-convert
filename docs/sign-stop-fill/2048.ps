%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
995.617 794.594 m 995.617 741.504 l 995.617 662.113 955.105 623.039 900.863
 623.039 c 845.953 623.039 805.824 662.109 805.824 741.504 c 805.824 794.594
 l 805.824 874.273 845.953 913.348 900.863 913.348 c 955.102 913.348 995.617
 874.18 995.617 794.594 c 1243.875 771.555 m 1288.324 771.555 1314.434 745.441
 1314.434 700.129 c 1314.434 654.816 1288.32 628.992 1243.875 628.992 c 
1169.57 628.992 l 1169.57 771.551 l h
1243.875 771.555 m f
469.727 0 m 457.023 0.004 444.836 5.043 435.84 14.016 c 14.016 435.84 l
 5.043 444.836 0.004 457.023 0 469.727 c 0 1066.273 l 0.004 1078.977 5.043
 1091.164 14.016 1100.16 c 435.84 1521.984 l 444.836 1530.957 457.023 1535.996
 469.727 1536 c 1066.273 1536 l 1078.977 1535.996 1091.164 1530.957 1100.16
 1521.984 c 1521.984 1100.16 l 1530.957 1091.164 1535.996 1078.977 1536 
1066.273 c 1536 469.727 l 1535.996 457.023 1530.957 444.836 1521.984 435.84
 c 1100.16 14.016 l 1091.164 5.043 1078.977 0.004 1066.273 0 c h
303.359 967.68 m 213.984 967.68 164.449 920.352 159.934 859.008 c 222.621
 859.008 l 228.859 892.223 260.637 914.977 308.156 914.977 c 358.461 914.977
 387.836 891.359 387.836 855.457 c 387.836 826.367 368.348 810.625 326.684
 800.547 c 263.707 784.805 l 205.148 770.691 169.82 735.844 169.82 681.316
 c 169.82 613.539 227.133 567.652 308.445 567.652 c 390.332 567.652 441.5
 613.254 446.301 672.004 c 384.379 672.004 l 378.234 641.285 350.586 619.973
 307.867 619.973 c 262.555 619.973 233.945 643.59 233.945 677.574 c 233.945
 702.629 252.762 719.527 287.035 727.688 c 349.82 743.145 l 414.43 758.887
 451.582 789.898 451.582 849.703 c 451.582 920.359 396.477 967.59 303.359
 967.59 c h
632.352 630.719 m 632.352 960 l 568.512 960 l 568.512 630.719 l 456.289
 630.719 l 456.289 576 l 744.863 576 l 744.863 630.527 l 632.352 630.527
 l h
1060.32 742.078 m 1060.32 794.301 l 1060.32 902.875 999.266 967.582 900.863
 967.582 c 802.367 967.582 741.121 902.879 741.121 794.301 c 741.121 742.078
 l 741.121 633.023 802.367 568.605 900.863 568.605 c 999.359 568.605 1060.223
 633.309 1060.223 742.078 c h
1105.922 576 m 1253.281 576 l 1332 576 1379.617 628.801 1379.617 700.031
 c 1379.617 771.742 1331.52 823.773 1252.801 823.773 c 1169.762 823.773 
l 1169.762 960 l 1105.922 960 l h
1105.922 576 m f
Q Q
showpage
%%Trailer
%%EOF
