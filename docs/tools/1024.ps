%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
48 0 m 0 48 l 105.602 195.887 l 114.621 208.523 129.195 216.016 144.719
 216 c 148.078 216 l 160.824 215.988 173.051 221.051 182.062 230.062 c 310.461
 358.461 l 184.844 485.852 l 184.848 485.855 l 141.285 473.031 94.23 481.488
 57.855 508.672 c 21.48 535.855 0.043 578.59 0 624 c 0.059 665.758 18.238
 705.434 49.828 732.738 c 81.418 760.047 123.309 772.297 164.633 766.312
 c 205.957 760.332 242.652 736.703 265.199 701.559 c 287.75 666.414 293.93
 623.211 282.145 583.152 c 409.535 457.535 l 456 504 l 441.359 547.871 l
 438.547 556.328 438.145 565.402 440.195 574.074 c 442.246 582.746 446.672
 590.676 452.977 596.977 c 609.938 753.938 l 618.918 762.969 631.133 768.051
 643.871 768.051 c 656.613 768.051 668.824 762.969 677.809 753.938 c 753.938
 677.809 l 762.969 668.824 768.051 656.613 768.051 643.871 c 768.051 631.133
 762.969 618.918 753.938 609.938 c 596.977 452.977 l 590.676 446.672 582.746
 442.246 574.074 440.195 c 565.402 438.145 556.328 438.547 547.871 441.359
 c 504 456 l 457.922 409.922 l 586.562 283.059 l 586.559 283.055 l 629.812
 294.602 675.973 285.41 711.5 258.18 c 747.031 230.949 767.906 188.766 768
 144 c 768 131.039 766.367 118.609 763.105 106.703 c 660.387 209.473 l 576
 192 l 558.527 107.664 l 661.297 4.895 l 628.555 -3.906 593.754 -0.875 563.027
 13.457 c 532.301 27.793 507.617 52.512 493.324 83.258 c 479.031 114.004
 476.047 148.805 484.895 181.535 c 358.176 310.078 l 230.062 182.062 l 221.062
 173.062 216.004 160.855 216 148.129 c 216 144.719 l 216 129.211 208.512
 114.66 195.887 105.648 c h
511.008 511.008 m 515.512 506.492 521.625 503.957 528 503.957 c 534.375
 503.957 540.488 506.492 544.992 511.008 c 684.863 650.93 l 690.75 657.023
 692.988 665.773 690.746 673.945 c 688.508 682.121 682.121 688.508 673.945
 690.746 c 665.773 692.988 657.023 690.75 650.93 684.863 c 511.008 544.992
 l 506.492 540.488 503.957 534.375 503.957 528 c 503.957 521.625 506.492
 515.512 511.008 511.008 c 144 528 m 166.609 539.617 l 192 540.863 l 205.777
 562.223 l 227.137 576 l 228.383 601.391 l 240 624 l 228.383 646.609 l 227.137
 672 l 205.777 685.777 l 192 707.137 l 166.609 708.383 l 144 720 l 121.391
 708.383 l 96 707.137 l 82.223 685.777 l 60.863 672 l 59.617 646.609 l 48
 624 l 59.617 601.391 l 60.863 576 l 82.223 562.223 l 96 540.863 l 121.391
 539.617 l h
144 528 m f
Q Q
showpage
%%Trailer
%%EOF
