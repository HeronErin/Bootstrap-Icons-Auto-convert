%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:08 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
24 0 m 0 24 l 52.801 97.945 l 57.309 104.262 64.598 108.008 72.359 108 
c 74.039 108 l 80.414 107.996 86.527 110.523 91.031 115.031 c 155.23 179.23
 l 92.422 242.926 l 92.426 242.93 l 70.645 236.516 47.113 240.742 28.926
 254.336 c 10.738 267.926 0.02 289.297 0 312 c 0.027 332.879 9.121 352.715
 24.914 366.371 c 40.711 380.023 61.652 386.148 82.316 383.156 c 102.98 
380.164 121.324 368.352 132.602 350.777 c 143.875 333.207 146.965 311.605
 141.07 291.574 c 204.766 228.766 l 227.996 251.996 l 220.676 273.934 l 
220.68 273.938 l 219.273 278.164 219.07 282.699 220.098 287.035 c 221.125
 291.375 223.336 295.34 226.488 298.488 c 304.969 376.969 l 309.461 381.484
 315.566 384.023 321.938 384.023 c 328.305 384.023 334.414 381.484 338.902
 376.969 c 376.969 338.902 l 381.484 334.414 384.023 328.305 384.023 321.938
 c 384.023 315.566 381.484 309.461 376.969 304.969 c 298.488 226.488 l 295.34
 223.336 291.375 221.125 287.035 220.098 c 282.699 219.07 278.164 219.273
 273.938 220.68 c 252 228 l 228.961 204.961 l 293.281 141.527 l 314.906 
147.301 337.984 142.707 355.75 129.09 c 373.516 115.477 383.953 94.383 384
 72 c 384 65.52 383.184 59.305 381.551 53.352 c 330.191 104.734 l 288 96
 l 279.266 53.832 l 330.648 2.449 l 314.277 -1.953 296.879 -0.438 281.516
 6.73 c 266.152 13.898 253.809 26.254 246.664 41.629 c 239.516 57 238.023
 74.402 242.449 90.77 c 179.09 155.039 l 115.031 91.031 l 110.531 86.531
 108 80.43 108 74.062 c 108 72.359 l 108 64.605 104.254 57.328 97.945 52.824
 c h
255.504 255.504 m 257.754 253.246 260.812 251.98 264 251.98 c 267.188 251.98
 270.246 253.246 272.496 255.504 c 342.434 325.465 l 346.98 330.172 346.914
 337.656 342.285 342.285 c 337.656 346.914 330.172 346.98 325.465 342.434
 c 255.504 272.496 l 253.246 270.246 251.98 267.188 251.98 264 c 251.98 
260.812 253.246 257.754 255.504 255.504 c 72 264 m 83.305 269.809 l 96 270.434
 l 102.887 281.113 l 113.566 288 l 114.191 300.695 l 120 312 l 114.191 323.305
 l 113.566 336 l 102.887 342.887 l 96 353.566 l 83.305 354.191 l 72 360 
l 60.695 354.191 l 48 353.566 l 41.113 342.887 l 30.434 336 l 29.809 323.305
 l 24 312 l 29.809 300.695 l 30.434 288 l 41.113 281.113 l 48 270.434 l 
60.695 269.809 l h
72 264 m f
Q Q
showpage
%%Trailer
%%EOF
