%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 95 0 1296 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 95 0 1296 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 95 0 1201 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1152 288 m 1203.445 288 1250.984 260.555 1276.707 216 c 1302.43 171.445
 1302.43 116.555 1276.707 72 c 1250.984 27.445 1203.445 0 1152 0 c 1100.555
 0 1053.016 27.445 1027.293 72 c 1001.57 116.555 1001.57 171.445 1027.293
 216 c 1053.016 260.555 1100.555 288 1152 288 c 1088.352 494.016 m 1110.145
 461.348 1117.652 421.199 1109.133 382.863 c 1100.613 344.531 1076.809 311.34
 1043.23 290.977 c 803.23 146.207 l 778.645 131.391 750.191 124.258 721.52
 125.73 c 692.852 127.199 665.277 137.207 642.336 154.465 c 418.75 322.465
 l 418.754 322.465 l 396.477 340.918 385.391 369.625 389.488 398.262 c 393.586
 426.895 412.27 451.344 438.828 462.812 c 465.387 474.281 495.996 471.117
 519.648 454.465 c 706.656 323.52 l 795.168 391.68 l 599.52 626.398 l 537.191
 619.762 474.16 626.102 414.402 645.02 c 354.641 663.938 299.445 695.023
 252.289 736.32 c 354.434 838.559 l 414.305 789.438 490.309 764.34 567.66
 768.145 c 645.012 771.949 718.184 804.387 772.945 859.148 c 827.711 913.91
 860.148 987.082 863.953 1064.438 c 867.758 1141.789 842.66 1217.789 793.535
 1277.664 c 895.68 1379.711 l 941.109 1327.875 974.137 1266.375 992.27 1199.879
 c 1010.398 1133.379 1013.152 1063.625 1000.32 995.902 c 1100.449 967.871
 l 1082.496 1255.008 l 1080.859 1277.395 1088.281 1299.496 1103.094 1316.359
 c 1117.906 1333.223 1138.871 1343.43 1161.281 1344.691 c 1183.691 1345.949
 1205.668 1338.16 1222.277 1323.066 c 1238.891 1307.977 1248.746 1286.844
 1249.633 1264.414 c 1269.41 868.797 l 1269.406 868.801 l 1270.723 842.535
 1261.207 816.879 1243.078 797.828 c 1224.953 778.777 1199.801 767.992 1173.504
 768 c 905.664 768 l h
290.207 910.078 m 251.254 970.031 234.07 1041.543 241.535 1112.648 c 249
 1183.754 280.656 1250.137 331.211 1300.691 c 381.766 1351.246 448.152 1382.906
 519.258 1390.371 c 590.363 1397.832 661.871 1380.652 721.824 1341.695 c
 825.215 1445.086 l 825.215 1445.09 l 737.402 1510.949 628.781 1542.922 
519.289 1535.141 c 409.801 1527.359 306.793 1480.344 229.176 1402.73 c 151.559
 1325.113 104.543 1222.102 96.762 1112.613 c 88.98 1003.125 120.957 894.5
 186.816 806.688 c h
290.207 910.078 m f
Q Q
showpage
%%Trailer
%%EOF
