%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:00 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 23 0 324 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 23 0 324 384
384 384 cairo_set_page_size
%%EndPageSetup
q 23 0 301 384 rectclip
1 0 0 -1 0 384 cm q
0 g
288 72 m 300.863 72 312.746 65.137 319.176 54 c 325.609 42.863 325.609 
29.137 319.176 18 c 312.746 6.863 300.863 0 288 0 c 275.137 0 263.254 6.863
 256.824 18 c 250.391 29.137 250.391 42.863 256.824 54 c 263.254 65.137 
275.137 72 288 72 c 272.09 123.504 m 277.535 115.336 279.414 105.301 277.281
 95.715 c 275.152 86.133 269.203 77.836 260.809 72.742 c 200.809 36.551 
l 194.66 32.848 187.547 31.066 180.379 31.434 c 173.215 31.801 166.32 34.301
 160.586 38.617 c 104.691 80.617 l 104.688 80.617 l 99.117 85.23 96.348 
92.406 97.371 99.566 c 98.395 106.723 103.066 112.836 109.707 115.703 c 
116.348 118.57 124 117.781 129.91 113.617 c 176.664 80.879 l 198.793 97.918
 l 149.883 156.598 l 149.879 156.602 l 118.379 153.246 86.906 163.207 63.07
 184.078 c 88.605 209.637 l 88.609 209.641 l 108.746 193.117 135.801 187.738
 160.727 195.301 c 185.652 202.863 205.16 222.371 212.723 247.297 c 220.285
 272.223 214.906 299.277 198.383 319.414 c 223.918 344.926 l 223.922 344.93
 l 246.934 318.668 256.578 283.281 250.078 248.977 c 275.109 241.969 l 270.621
 313.754 l 270.625 313.754 l 270.215 319.348 272.07 324.875 275.773 329.09
 c 279.477 333.305 284.719 335.855 290.32 336.172 c 295.922 336.488 301.418
 334.539 305.57 330.766 c 309.723 326.992 312.188 321.711 312.406 316.105
 c 317.352 217.203 l 317.352 217.199 l 317.68 210.633 315.301 204.219 310.77
 199.457 c 306.238 194.695 299.949 192 293.375 192 c 226.414 192 l h
72.551 227.52 m 59.469 247.656 56.387 272.699 64.203 295.406 c 72.02 318.113
 89.863 335.953 112.57 343.77 c 135.277 351.586 160.32 348.508 180.457 335.426
 c 206.305 361.273 l 176.785 383.41 138.375 389.895 103.227 378.668 c 68.074
 367.445 40.531 339.902 29.309 304.75 c 18.082 269.602 24.566 231.191 46.703
 201.672 c h
72.551 227.52 m f
Q Q
showpage
%%Trailer
%%EOF
