%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:03 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
960 48 m 960 35.27 954.941 23.062 945.941 14.059 c 936.938 5.059 924.73
 0 912 0 c 624 0 l 611.27 0 599.062 5.059 590.059 14.059 c 581.059 23.062
 576 35.27 576 48 c 576 60.73 570.941 72.938 561.941 81.941 c 552.938 90.941
 540.73 96 528 96 c 515.27 96 503.062 101.059 494.059 110.059 c 485.059 
119.062 480 131.27 480 144 c 480 192 l 480 204.73 485.059 216.938 494.059
 225.941 c 503.062 234.941 515.27 240 528 240 c 1008 240 l 1020.73 240 1032.938
 234.941 1041.941 225.941 c 1050.941 216.938 1056 204.73 1056 192 c 1056
 144 l 1056 131.27 1050.941 119.062 1041.941 110.059 c 1032.938 101.059 
1020.73 96 1008 96 c 995.27 96 983.062 90.941 974.059 81.941 c 965.059 72.938
 960 60.73 960 48 c f
392.16 96 m 336 96 l 297.809 96 261.184 111.172 234.176 138.176 c 207.172
 165.184 192 201.809 192 240 c 192 1392 l 192 1430.191 207.172 1466.816 
234.176 1493.824 c 261.184 1520.828 297.809 1536 336 1536 c 1200 1536 l 
1238.191 1536 1274.816 1520.828 1301.824 1493.824 c 1328.828 1466.816 1344
 1430.191 1344 1392 c 1344 240 l 1344 201.809 1328.828 165.184 1301.824 
138.176 c 1274.816 111.172 1238.191 96 1200 96 c 1143.84 96 l 1149.215 111.105
 1151.938 127.105 1152 144 c 1152 192 l 1152 230.191 1136.828 266.816 1109.824
 293.824 c 1082.816 320.828 1046.191 336 1008 336 c 528 336 l 489.809 336
 453.184 320.828 426.176 293.824 c 399.172 266.816 384 230.191 384 192 c
 384 144 l 384.062 127.105 386.785 111.105 392.16 96 c 958.078 514.176 m
 1091.711 960 l 1104 960 l 1121.148 960 1136.996 969.148 1145.57 984 c 1154.145
 998.852 1154.145 1017.148 1145.57 1032 c 1136.996 1046.852 1121.148 1056
 1104 1056 c 1056 1056 l 1045.68 1056.004 1035.633 1052.68 1027.352 1046.523
 c 1019.066 1040.367 1012.988 1031.707 1010.016 1021.824 c 919.777 720.863
 l 814.945 1210.078 l 811.957 1224.078 802.875 1236.016 790.184 1242.629
 c 777.488 1249.246 762.504 1249.848 749.316 1244.277 c 736.129 1238.703
 726.121 1227.539 722.016 1213.824 c 612.77 849.602 l 522.914 1029.41 l 
522.91 1029.406 l 518.934 1037.391 512.812 1044.105 505.234 1048.801 c 497.656
 1053.496 488.918 1055.992 480 1056 c 432 1056 l 414.852 1056 399.004 1046.852
 390.43 1032 c 381.855 1017.148 381.855 998.852 390.43 984 c 399.004 969.148
 414.852 960 432 960 c 450.336 960 l 581.09 698.496 l 586.859 686.965 597.027
 678.242 609.301 674.289 c 621.578 670.336 634.926 671.492 646.34 677.488
 c 657.754 683.488 666.277 693.824 669.984 706.176 c 760.223 1007.137 l 
865.055 517.922 l 868.043 503.922 877.125 491.984 889.816 485.371 c 902.512
 478.754 917.496 478.152 930.684 483.723 c 943.871 489.297 953.879 500.461
 957.984 514.176 c h
958.078 514.176 m f
Q Q
showpage
%%Trailer
%%EOF
