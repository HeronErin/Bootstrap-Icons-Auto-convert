%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:01 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
480 24 m 480 17.637 477.473 11.531 472.969 7.031 c 468.469 2.527 462.363
 0 456 0 c 312 0 l 305.637 0 299.531 2.527 295.031 7.031 c 290.527 11.531
 288 17.637 288 24 c 288 30.363 285.473 36.469 280.969 40.969 c 276.469 
45.473 270.363 48 264 48 c 257.637 48 251.531 50.527 247.031 55.031 c 242.527
 59.531 240 65.637 240 72 c 240 96 l 240 102.363 242.527 108.469 247.031
 112.969 c 251.531 117.473 257.637 120 264 120 c 504 120 l 510.363 120 516.469
 117.473 520.969 112.969 c 525.473 108.469 528 102.363 528 96 c 528 72 l
 528 65.637 525.473 59.531 520.969 55.031 c 516.469 50.527 510.363 48 504
 48 c 497.637 48 491.531 45.473 487.031 40.969 c 482.527 36.469 480 30.363
 480 24 c f
196.078 48 m 168 48 l 148.906 48 130.59 55.586 117.09 69.09 c 103.586 82.59
 96 100.906 96 120 c 96 696 l 96 715.094 103.586 733.41 117.09 746.91 c 
130.59 760.414 148.906 768 168 768 c 600 768 l 619.094 768 637.41 760.414
 650.91 746.91 c 664.414 733.41 672 715.094 672 696 c 672 120 l 672 100.906
 664.414 82.59 650.91 69.09 c 637.41 55.586 619.094 48 600 48 c 571.922 
48 l 574.609 55.551 575.969 63.551 576 72 c 576 96 l 576 115.094 568.414
 133.41 554.91 146.91 c 541.41 160.414 523.094 168 504 168 c 264 168 l 244.906
 168 226.59 160.414 213.09 146.91 c 199.586 133.41 192 115.094 192 96 c 
192 72 l 192.031 63.551 193.391 55.551 196.078 48 c 479.039 257.09 m 545.855
 480 l 552 480 l 560.574 480 568.496 484.574 572.785 492 c 577.07 499.426
 577.07 508.574 572.785 516 c 568.496 523.426 560.574 528 552 528 c 528 
528 l 522.84 528 517.816 526.34 513.676 523.262 c 509.535 520.184 506.492
 515.855 505.008 510.91 c 459.887 360.43 l 407.473 605.039 l 405.977 612.039
 401.438 618.008 395.09 621.316 c 388.742 624.621 381.25 624.926 374.66 
622.137 c 368.066 619.352 363.059 613.77 361.008 606.91 c 306.383 424.801
 l 261.453 514.703 l 261.457 514.703 l 259.469 518.695 256.406 522.051 252.617
 524.402 c 248.828 526.75 244.457 527.996 240 528 c 216 528 l 207.426 528
 199.504 523.426 195.215 516 c 190.93 508.574 190.93 499.426 195.215 492
 c 199.504 484.574 207.426 480 216 480 c 225.168 480 l 290.543 349.246 l
 293.43 343.484 298.516 339.121 304.652 337.145 c 310.789 335.168 317.461
 335.746 323.168 338.746 c 328.879 341.742 333.137 346.914 334.992 353.09
 c 380.113 503.57 l 432.527 258.961 l 434.023 251.961 438.562 245.992 444.91
 242.684 c 451.258 239.379 458.75 239.074 465.34 241.863 c 471.934 244.648
 476.941 250.23 478.992 257.09 c h
479.039 257.09 m f
Q Q
showpage
%%Trailer
%%EOF
