%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 240 0 528 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 240 0 528 768
768 768 cairo_set_page_size
%%EndPageSetup
q 240 0 288 768 rectclip
1 0 0 -1 0 768 cm q
0 g
264 72 m 264 52.906 271.586 34.59 285.09 21.09 c 298.59 7.586 316.906 0
 336 0 c 432 0 l 451.094 0 469.41 7.586 482.91 21.09 c 496.414 34.59 504
 52.906 504 72 c 504 600 l 504 618.297 497.035 635.91 484.516 649.258 c 
472 662.605 454.867 670.684 436.609 671.855 c 453.41 686.496 478.465 704.398
 514.754 722.543 c 521.242 725.797 525.91 731.812 527.453 738.906 c 528.992
 746 527.238 753.41 522.684 759.062 c 518.129 764.715 511.258 768 504 768
 c 264 768 l 256.742 768 249.871 764.715 245.316 759.062 c 240.762 753.41
 239.008 746 240.547 738.906 c 242.09 731.812 246.758 725.797 253.246 722.543
 c 289.535 704.398 314.543 686.543 331.391 671.855 c 313.133 670.684 296
 662.605 283.484 649.258 c 270.965 635.91 264 618.297 264 600 c h
336 48 m 329.637 48 323.531 50.527 319.031 55.031 c 314.527 59.531 312 
65.637 312 72 c 312 600 l 312 606.363 314.527 612.469 319.031 616.969 c 
323.531 621.473 329.637 624 336 624 c 432 624 l 438.363 624 444.469 621.473
 448.969 616.969 c 453.473 612.469 456 606.363 456 600 c 456 72 l 456 65.637
 453.473 59.531 448.969 55.031 c 444.469 50.527 438.363 48 432 48 c h
336 48 m f
408 120 m 408 128.574 403.426 136.496 396 140.785 c 388.574 145.07 379.426
 145.07 372 140.785 c 364.574 136.496 360 128.574 360 120 c 360 111.426 
364.574 103.504 372 99.215 c 379.426 94.93 388.574 94.93 396 99.215 c 403.426
 103.504 408 111.426 408 120 c 408 216 m 408 224.574 403.426 232.496 396
 236.785 c 388.574 241.07 379.426 241.07 372 236.785 c 364.574 232.496 360
 224.574 360 216 c 360 207.426 364.574 199.504 372 195.215 c 379.426 190.93
 388.574 190.93 396 195.215 c 403.426 199.504 408 207.426 408 216 c 408 
312 m 408 320.574 403.426 328.496 396 332.785 c 388.574 337.07 379.426 337.07
 372 332.785 c 364.574 328.496 360 320.574 360 312 c 360 303.426 364.574
 295.504 372 291.215 c 379.426 286.93 388.574 286.93 396 291.215 c 403.426
 295.504 408 303.426 408 312 c 408 408 m 408 416.574 403.426 424.496 396
 428.785 c 388.574 433.07 379.426 433.07 372 428.785 c 364.574 424.496 360
 416.574 360 408 c 360 399.426 364.574 391.504 372 387.215 c 379.426 382.93
 388.574 382.93 396 387.215 c 403.426 391.504 408 399.426 408 408 c f
Q Q
showpage
%%Trailer
%%EOF
