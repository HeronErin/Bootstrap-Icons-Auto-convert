%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:47 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
892.129 0 m 384 0 l 333.078 0 284.242 20.227 248.234 56.234 c 212.227 92.242
 192 141.078 192 192 c 192 1344 l 192 1377.703 200.871 1410.812 217.723 
1440 c 234.574 1469.188 258.812 1493.426 288 1510.277 c 317.188 1527.129
 350.297 1536 384 1536 c 1152 1536 l 1185.703 1536 1218.812 1527.129 1248
 1510.277 c 1277.188 1493.426 1301.426 1469.188 1318.277 1440 c 1335.129
 1410.812 1344 1377.703 1344 1344 c 1344 451.871 l 1343.996 426.414 1333.875
 402 1315.871 384 c 960 28.129 l 942 10.125 917.586 0.004 892.129 0 c 912
 336 m 912 144 l 1200 432 l 1008 432 l 982.539 432 958.121 421.887 940.117
 403.883 c 922.113 385.879 912 361.461 912 336 c 624 528 m 624 588.863 l
 676.703 558.43 l 676.703 558.434 l 687.734 551.965 700.887 550.168 713.25
 553.434 c 725.609 556.703 736.156 564.77 742.547 575.84 c 748.941 586.914
 750.652 600.078 747.305 612.418 c 743.953 624.758 735.82 635.25 724.703
 641.566 c 672 672 l 724.703 702.434 l 735.82 708.75 743.953 719.242 747.305
 731.582 c 750.652 743.922 748.941 757.086 742.547 768.16 c 736.156 779.23
 725.609 787.297 713.25 790.566 c 700.887 793.832 687.734 792.035 676.703
 785.566 c 624 755.137 l 624 816 l 624 833.148 614.852 848.996 600 857.57
 c 585.148 866.145 566.852 866.145 552 857.57 c 537.148 848.996 528 833.148
 528 816 c 528 755.137 l 475.297 785.57 l 475.297 785.566 l 464.266 792.035
 451.113 793.832 438.75 790.566 c 426.391 787.297 415.844 779.23 409.453
 768.16 c 403.059 757.086 401.348 743.922 404.695 731.582 c 408.047 719.242
 416.18 708.75 427.297 702.434 c 480 672 l 427.297 641.566 l 412.566 632.934
 403.535 617.125 403.57 600.051 c 403.609 582.98 412.715 567.211 427.48 
558.645 c 442.246 550.074 460.453 549.992 475.297 558.434 c 528 588.867 
l 528 528 l 528 510.852 537.148 495.004 552 486.43 c 566.852 477.855 585.148
 477.855 600 486.43 c 614.852 495.004 624 510.852 624 528 c 432 960 m 912
 960 l 929.148 960 944.996 969.148 953.57 984 c 962.145 998.852 962.145 
1017.148 953.57 1032 c 944.996 1046.852 929.148 1056 912 1056 c 432 1056
 l 414.852 1056 399.004 1046.852 390.43 1032 c 381.855 1017.148 381.855 
998.852 390.43 984 c 399.004 969.148 414.852 960 432 960 c 432 1152 m 912
 1152 l 929.148 1152 944.996 1161.148 953.57 1176 c 962.145 1190.852 962.145
 1209.148 953.57 1224 c 944.996 1238.852 929.148 1248 912 1248 c 432 1248
 l 414.852 1248 399.004 1238.852 390.43 1224 c 381.855 1209.148 381.855 
1190.852 390.43 1176 c 399.004 1161.148 414.852 1152 432 1152 c f
Q Q
showpage
%%Trailer
%%EOF
