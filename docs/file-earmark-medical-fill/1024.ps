%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:46 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
446.062 0 m 192 0 l 166.539 0 142.121 10.113 124.117 28.117 c 106.113 46.121
 96 70.539 96 96 c 96 672 l 96 697.461 106.113 721.879 124.117 739.883 c
 142.121 757.887 166.539 768 192 768 c 576 768 l 601.461 768 625.879 757.887
 643.883 739.883 c 661.887 721.879 672 697.461 672 672 c 672 225.938 l 671.996
 213.207 666.938 201 657.938 192 c 480 14.062 l 471 5.062 458.793 0.004 
446.062 0 c 456 168 m 456 72 l 600 216 l 504 216 l 491.27 216 479.062 210.941
 470.059 201.941 c 461.059 192.938 456 180.73 456 168 c 312 264 m 312 294.434
 l 338.352 279.219 l 338.352 279.215 l 343.867 275.984 350.445 275.082 356.625
 276.719 c 362.805 278.352 368.078 282.383 371.273 287.922 c 374.473 293.457
 375.328 300.039 373.652 306.207 c 371.977 312.379 367.91 317.625 362.352
 320.785 c 336 336 l 362.352 351.215 l 367.91 354.375 371.977 359.621 373.652
 365.793 c 375.328 371.961 374.473 378.543 371.273 384.078 c 368.078 389.617
 362.805 393.648 356.625 395.281 c 350.445 396.918 343.867 396.016 338.352
 392.785 c 312 377.566 l 312 408 l 312 416.574 307.426 424.496 300 428.785
 c 292.574 433.07 283.426 433.07 276 428.785 c 268.574 424.496 264 416.574
 264 408 c 264 377.566 l 237.648 392.781 l 237.648 392.785 l 232.133 396.016
 225.555 396.918 219.375 395.281 c 213.195 393.648 207.922 389.617 204.727
 384.078 c 201.527 378.543 200.672 371.961 202.348 365.793 c 204.023 359.621
 208.09 354.375 213.648 351.215 c 240 336 l 213.648 320.785 l 206.285 316.465
 201.766 308.562 201.785 300.027 c 201.805 291.488 206.355 283.605 213.738
 279.32 c 221.125 275.035 230.227 274.996 237.648 279.215 c 264 294.43 l
 264 264 l 264 255.426 268.574 247.504 276 243.215 c 283.426 238.93 292.574
 238.93 300 243.215 c 307.426 247.504 312 255.426 312 264 c 216 480 m 456
 480 l 464.574 480 472.496 484.574 476.785 492 c 481.07 499.426 481.07 508.574
 476.785 516 c 472.496 523.426 464.574 528 456 528 c 216 528 l 207.426 528
 199.504 523.426 195.215 516 c 190.93 508.574 190.93 499.426 195.215 492
 c 199.504 484.574 207.426 480 216 480 c 216 576 m 456 576 l 464.574 576
 472.496 580.574 476.785 588 c 481.07 595.426 481.07 604.574 476.785 612
 c 472.496 619.426 464.574 624 456 624 c 216 624 l 207.426 624 199.504 619.426
 195.215 612 c 190.93 604.574 190.93 595.426 195.215 588 c 199.504 580.574
 207.426 576 216 576 c f
Q Q
showpage
%%Trailer
%%EOF
