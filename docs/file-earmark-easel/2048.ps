%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
816 576 m 816 558.852 806.852 543.004 792 534.43 c 777.148 525.855 758.852
 525.855 744 534.43 c 729.148 543.004 720 558.852 720 576 c 528 576 l 489.809
 576 453.184 591.172 426.176 618.176 c 399.172 645.184 384 681.809 384 720
 c 384 912 l 384 950.191 399.172 986.816 426.176 1013.824 c 453.184 1040.828
 489.809 1056 528 1056 c 573.406 1056 l 530.496 1184.832 l 525.902 1197.043
 526.48 1210.598 532.094 1222.375 c 537.703 1234.152 547.867 1243.141 560.246
 1247.266 c 572.621 1251.391 586.145 1250.301 597.699 1244.246 c 609.258
 1238.191 617.852 1227.691 621.504 1215.168 c 674.594 1056 l 720 1056 l 
720 1152 l 720 1169.148 729.148 1184.996 744 1193.57 c 758.852 1202.145 
777.148 1202.145 792 1193.57 c 806.852 1184.996 816 1169.148 816 1152 c 
816 1056 l 861.406 1056 l 914.496 1215.168 l 918.148 1227.691 926.742 1238.191
 938.301 1244.246 c 949.855 1250.301 963.379 1251.391 975.754 1247.266 c
 988.133 1243.141 998.297 1234.152 1003.906 1222.375 c 1009.52 1210.598 
1010.098 1197.043 1005.504 1184.832 c 962.594 1056 l 1008 1056 l 1046.191
 1056 1082.816 1040.828 1109.824 1013.824 c 1136.828 986.816 1152 950.191
 1152 912 c 1152 720 l 1152 681.809 1136.828 645.184 1109.824 618.176 c 
1082.816 591.172 1046.191 576 1008 576 c h
480 720 m 480 707.27 485.059 695.062 494.059 686.059 c 503.062 677.059 
515.27 672 528 672 c 1008 672 l 1020.73 672 1032.938 677.059 1041.941 686.059
 c 1050.941 695.062 1056 707.27 1056 720 c 1056 912 l 1056 924.73 1050.941
 936.938 1041.941 945.941 c 1032.938 954.941 1020.73 960 1008 960 c 528 
960 l 515.27 960 503.062 954.941 494.059 945.941 c 485.059 936.938 480 924.73
 480 912 c h
480 720 m f
1344 1344 m 1344 432 l 912 0 l 384 0 l 333.078 0 284.242 20.227 248.234
 56.234 c 212.227 92.242 192 141.078 192 192 c 192 1344 l 192 1377.703 200.871
 1410.812 217.723 1440 c 234.574 1469.188 258.812 1493.426 288 1510.277 
c 317.188 1527.129 350.297 1536 384 1536 c 1152 1536 l 1185.703 1536 1218.812
 1527.129 1248 1510.277 c 1277.188 1493.426 1301.426 1469.188 1318.277 1440
 c 1335.129 1410.812 1344 1377.703 1344 1344 c 912 288 m 912 326.191 927.172
 362.816 954.176 389.824 c 981.184 416.828 1017.809 432 1056 432 c 1248 
432 l 1248 1344 l 1248 1369.461 1237.887 1393.879 1219.883 1411.883 c 1201.879
 1429.887 1177.461 1440 1152 1440 c 384 1440 l 358.539 1440 334.121 1429.887
 316.117 1411.883 c 298.113 1393.879 288 1369.461 288 1344 c 288 192 l 288
 166.539 298.113 142.121 316.117 124.117 c 334.121 106.113 358.539 96 384
 96 c 912 96 l h
912 288 m f
Q Q
showpage
%%Trailer
%%EOF
