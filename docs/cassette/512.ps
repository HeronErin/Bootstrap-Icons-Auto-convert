%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:11 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 336
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 288 rectclip
1 0 0 -1 0 384 cm q
0 g
96 192 m 104.574 192 112.496 187.426 116.785 180 c 121.07 172.574 121.07
 163.426 116.785 156 c 112.496 148.574 104.574 144 96 144 c 87.426 144 79.504
 148.574 75.215 156 c 70.93 163.426 70.93 172.574 75.215 180 c 79.504 187.426
 87.426 192 96 192 c 312 168 m 312 176.574 307.426 184.496 300 188.785 c
 292.574 193.07 283.426 193.07 276 188.785 c 268.574 184.496 264 176.574
 264 168 c 264 159.426 268.574 151.504 276 147.215 c 283.426 142.93 292.574
 142.93 300 147.215 c 307.426 151.504 312 159.426 312 168 c 168 144 m 159.426
 144 151.504 148.574 147.215 156 c 142.93 163.426 142.93 172.574 147.215
 180 c 151.504 187.426 159.426 192 168 192 c 216 192 l 224.574 192 232.496
 187.426 236.785 180 c 241.07 172.574 241.07 163.426 236.785 156 c 232.496
 148.574 224.574 144 216 144 c h
168 144 m f
36 48 m 26.453 48 17.297 51.793 10.543 58.543 c 3.793 65.297 0 74.453 0
 84 c 0 300 l 0 309.547 3.793 318.703 10.543 325.457 c 17.297 332.207 26.453
 336 36 336 c 348 336 l 357.547 336 366.703 332.207 373.457 325.457 c 380.207
 318.703 384 309.547 384 300 c 384 84 l 384 74.453 380.207 65.297 373.457
 58.543 c 366.703 51.793 357.547 48 348 48 c h
24 84 m 24 77.371 29.371 72 36 72 c 348 72 l 351.184 72 354.234 73.266 
356.484 75.516 c 358.734 77.766 360 80.816 360 84 c 360 300 l 360 303.184
 358.734 306.234 356.484 308.484 c 354.234 310.734 351.184 312 348 312 c
 331.414 312 l 298.727 246.625 l 296.695 242.562 292.543 240 288 240 c 96
 240 l 91.457 240 87.305 242.562 85.273 246.625 c 52.559 312 l 36 312 l 
29.371 312 24 306.629 24 300 c h
280.586 264 m 304.586 312 l 79.414 312 l 103.414 264 l h
280.586 264 m f
Q Q
showpage
%%Trailer
%%EOF
