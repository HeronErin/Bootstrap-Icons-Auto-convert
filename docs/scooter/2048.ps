%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1536 1248 rectclip
1 0 0 -1 0 1536 cm q
0 g
864 240 m 864 227.27 869.059 215.062 878.059 206.059 c 887.062 197.059 
899.27 192 912 192 c 1200 192 l 1217.148 192 1232.996 201.148 1241.57 216
 c 1250.145 230.852 1250.145 249.148 1241.57 264 c 1232.996 278.852 1217.148
 288 1200 288 c 1162.559 288 l 1296.957 960 l 1296.961 960 l 1356.438 960.285
 1413.691 982.645 1457.621 1022.746 c 1501.547 1062.848 1529.02 1117.832
 1534.711 1177.035 c 1540.402 1236.242 1523.902 1295.453 1488.418 1343.188
 c 1452.93 1390.918 1400.984 1423.773 1342.648 1435.383 c 1284.312 1446.992
 1223.746 1436.523 1172.691 1406.008 c 1121.633 1375.496 1083.727 1327.113
 1066.32 1270.238 c 1048.914 1213.363 1053.246 1152.051 1078.477 1098.188
 c 1103.707 1044.324 1148.043 1001.75 1202.879 978.719 c 1184.734 888.672
 l 951.453 1227.266 l 951.457 1227.266 l 942.504 1240.234 927.758 1247.984
 912 1248 c 475.199 1248 l 463.305 1306.273 430.195 1358.055 382.293 1393.305
 c 334.387 1428.555 275.102 1444.762 215.926 1438.785 c 156.754 1432.809
 101.906 1405.07 62.02 1360.953 c 22.133 1316.832 0.051 1259.477 0.051 1200
 c 0.051 1140.523 22.133 1083.168 62.02 1039.047 c 101.906 994.93 156.754
 967.191 215.926 961.215 c 275.102 955.238 334.387 971.445 382.293 1006.695
 c 430.195 1041.945 463.305 1093.727 475.199 1152 c 886.75 1152 l 1158.527
 757.441 l 1064.641 288 l 912 288 l 899.27 288 887.062 282.941 878.059 273.941
 c 869.059 264.938 864 252.73 864 240 c 375.84 1152 m 360.621 1108.949 325.883
 1075.672 282.223 1062.305 c 238.562 1048.941 191.148 1057.078 154.441 1084.23
 c 117.73 1111.383 96.074 1154.34 96.074 1200 c 96.074 1245.66 117.73 1288.617
 154.441 1315.77 c 191.148 1342.922 238.562 1351.059 282.223 1337.695 c 
325.883 1324.328 360.621 1291.051 375.84 1248 c 240 1248 l 222.852 1248 
207.004 1238.852 198.43 1224 c 189.855 1209.148 189.855 1190.852 198.43 
1176 c 207.004 1161.148 222.852 1152 240 1152 c h
1222.273 1076.258 m 1185.777 1097.855 1160.668 1134.449 1153.648 1176.27
 c 1146.625 1218.094 1158.41 1260.883 1185.848 1293.215 c 1213.289 1325.547
 1253.594 1344.129 1296 1344 c 1345.043 1344.047 1390.738 1319.129 1417.258
 1277.875 c 1443.781 1236.625 1447.488 1184.711 1427.09 1140.109 c 1406.691
 1095.512 1365 1064.359 1316.449 1057.441 c 1343.043 1190.594 l 1343.039
 1190.594 l 1345.758 1207.125 1339.66 1223.879 1326.945 1234.797 c 1314.234
 1245.711 1296.75 1249.211 1280.816 1244.023 c 1264.883 1238.836 1252.809
 1225.715 1248.961 1209.406 c h
1222.273 1076.258 m f*
Q Q
showpage
%%Trailer
%%EOF
