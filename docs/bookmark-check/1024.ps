%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
520.992 247.008 m 525.508 251.512 528.043 257.625 528.043 264 c 528.043
 270.375 525.508 276.488 520.992 280.992 c 376.992 424.992 l 372.488 429.508
 366.375 432.043 360 432.043 c 353.625 432.043 347.512 429.508 343.008 424.992
 c 271.008 352.992 l 264.938 346.922 262.566 338.074 264.789 329.781 c 267.012
 321.488 273.488 315.012 281.781 312.789 c 290.074 310.566 298.922 312.938
 304.992 319.008 c 360 374.062 l 487.008 247.008 l 491.512 242.492 497.625
 239.957 504 239.957 c 510.375 239.957 516.488 242.492 520.992 247.008 c
 f*
96 96 m 96 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539
 0 192 0 c 576 0 l 601.461 0 625.879 10.113 643.883 28.117 c 661.887 46.121
 672 70.539 672 96 c 672 744 l 671.996 749.816 669.883 755.434 666.047 759.809
 c 662.215 764.18 656.926 767.012 651.16 767.777 c 645.395 768.543 639.547
 767.191 634.703 763.969 c 384 628.848 l 133.297 763.969 l 128.453 767.191
 122.605 768.543 116.84 767.777 c 111.074 767.012 105.785 764.18 101.953
 759.809 c 98.117 755.434 96.004 749.816 96 744 c h
192 48 m 179.27 48 167.062 53.059 158.059 62.059 c 149.059 71.062 144 83.27
 144 96 c 144 699.168 l 370.703 580.031 l 374.645 577.41 379.27 576.012 
384 576.012 c 388.73 576.012 393.355 577.41 397.297 580.031 c 624 699.168
 l 624 96 l 624 83.27 618.941 71.062 609.941 62.059 c 600.938 53.059 588.73
 48 576 48 c h
192 48 m f
Q Q
showpage
%%Trailer
%%EOF
