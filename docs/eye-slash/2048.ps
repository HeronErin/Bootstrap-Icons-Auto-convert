%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:04 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 158 1536 1378
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 158 1536 1378
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 158 1536 1220 rectclip
1 0 0 -1 0 1536 cm q
0 g
1282.465 1078.848 m 1445.762 933.121 1536 768 1536 768 c 1536 768 1248 
240 768 240 c 675.793 240.242 584.621 259.457 500.16 296.449 c 574.082 370.465
 l 574.078 370.465 l 636.262 347.926 701.859 336.27 768 336 c 971.52 336
 1140.383 448.129 1264.129 571.871 c 1323.746 631.688 1377.141 697.398 1423.488
 768 c 1417.984 776.32 1411.746 785.535 1404.77 795.648 c 1372.609 841.727
 1325.09 903.168 1264.129 964.129 c 1248.32 980 1231.777 995.555 1214.496
 1010.785 c h
1282.465 1078.848 m f
1084.512 880.895 m 1113.227 800.586 1110.324 712.359 1076.395 634.109 c
 1042.461 555.859 980.043 493.441 901.793 459.512 c 823.543 425.582 735.32
 422.68 655.008 451.391 c 734.016 530.398 l 783.383 523.336 833.723 531.82
 878.039 554.68 c 922.359 577.543 958.457 613.641 981.32 657.961 c 1004.18
 702.277 1012.664 752.617 1005.602 801.984 c h
801.984 1005.598 m 880.895 1084.508 l 880.895 1084.512 l 800.586 1113.227
 712.359 1110.324 634.109 1076.395 c 555.859 1042.461 493.441 980.043 459.512
 901.793 c 425.582 823.543 422.68 735.32 451.391 655.008 c 530.398 734.016
 l 523.336 783.383 531.82 833.723 554.68 878.039 c 577.543 922.359 613.641
 958.457 657.961 981.32 c 702.277 1004.18 752.617 1012.664 801.984 1005.602
 c f
321.602 525.121 m 304.32 540.48 287.746 556.066 271.875 571.875 c 271.871
 571.871 l 212.254 631.688 158.859 697.398 112.512 768 c 131.23 795.648 
l 163.391 841.727 210.91 903.168 271.871 964.129 c 395.617 1087.871 564.574
 1200 768 1200 c 836.734 1200 901.441 1187.23 961.922 1165.441 c 1035.844
 1239.555 l 1035.84 1239.551 l 951.379 1276.543 860.207 1295.758 768 1296
 c 288 1296 0 768 0 768 c 0 768 90.145 602.785 253.535 457.152 c 321.504
 525.215 l h
1310.016 1377.984 m 158.016 225.984 l 225.984 158.016 l 1377.984 1310.016
 l h
1310.016 1377.984 m f
Q Q
showpage
%%Trailer
%%EOF
