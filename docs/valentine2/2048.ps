%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:46 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 192 0 1344 1532
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 192 0 1344 1532
1536 1536 cairo_set_page_size
%%EndPageSetup
q 192 0 1152 1532 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 623.328 m 927.742 459.07 1327.199 746.496 768 1116 c 208.801 746.398
 608.258 459.07 768 623.328 c 408 288 m 401.637 288 395.531 290.527 391.031
 295.031 c 386.527 299.531 384 305.637 384 312 c 384 456 l 384 464.574 388.574
 472.496 396 476.785 c 403.426 481.07 412.574 481.07 420 476.785 c 427.426
 472.496 432 464.574 432 456 c 432 336 l 552 336 l 560.574 336 568.496 331.426
 572.785 324 c 577.07 316.574 577.07 307.426 572.785 300 c 568.496 292.574
 560.574 288 552 288 c h
984 288 m 975.426 288 967.504 292.574 963.215 300 c 958.93 307.426 958.93
 316.574 963.215 324 c 967.504 331.426 975.426 336 984 336 c 1104 336 l 
1104 456 l 1104 464.574 1108.574 472.496 1116 476.785 c 1123.426 481.07 
1132.574 481.07 1140 476.785 c 1147.426 472.496 1152 464.574 1152 456 c 
1152 312 l 1152 305.637 1149.473 299.531 1144.969 295.031 c 1140.469 290.527
 1134.363 288 1128 288 c h
432 1176 m 432 1167.426 427.426 1159.504 420 1155.215 c 412.574 1150.93
 403.426 1150.93 396 1155.215 c 388.574 1159.504 384 1167.426 384 1176 c
 384 1320 l 384 1333.246 394.754 1344 408 1344 c 552 1344 l 560.574 1344
 568.496 1339.426 572.785 1332 c 577.07 1324.574 577.07 1315.426 572.785
 1308 c 568.496 1300.574 560.574 1296 552 1296 c 432 1296 l h
1152 1176 m 1152 1167.426 1147.426 1159.504 1140 1155.215 c 1132.574 1150.93
 1123.426 1150.93 1116 1155.215 c 1108.574 1159.504 1104 1167.426 1104 1176
 c 1104 1296 l 984 1296 l 975.426 1296 967.504 1300.574 963.215 1308 c 958.93
 1315.426 958.93 1324.574 963.215 1332 c 967.504 1339.426 975.426 1344 984
 1344 c 1128 1344 l 1134.363 1344 1140.469 1341.473 1144.969 1336.969 c 
1149.473 1332.469 1152 1326.363 1152 1320 c h
1152 1176 m f
192 191.426 m 192 187.391 l 192 163.594 200.84 140.641 216.805 122.992 
c 232.77 105.344 254.719 94.25 278.398 91.871 c 1142.398 5.473 l 1168.551
 2.809 1194.652 10.984 1214.609 28.094 c 1234.566 45.203 1246.637 69.746
 1248 96 c 1273.461 96 1297.879 106.113 1315.883 124.117 c 1333.887 142.121
 1344 166.539 1344 192 c 1344 1440 l 1344 1465.461 1333.887 1489.879 1315.883
 1507.883 c 1297.879 1525.887 1273.461 1536 1248 1536 c 288 1536 l 262.539
 1536 238.121 1525.887 220.117 1507.883 c 202.113 1489.879 192 1465.461 
192 1440 c h
288 192 m 288 1440 l 1248 1440 l 1248 192 l h
288 192 m f*
Q Q
showpage
%%Trailer
%%EOF
