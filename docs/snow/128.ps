%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 6 0 90 96
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 6 0 90 96
96 96 cairo_set_page_size
%%EndPageSetup
q 6 0 84 96 rectclip
1 0 0 -1 0 96 cm q
0 g
48 96 m 46.344 96 45 94.656 45 93 c 45 85.242 l 41.125 89.125 l 39.949 
90.297 38.051 90.293 36.879 89.121 c 35.707 87.949 35.707 86.047 36.883 
84.875 c 45 76.758 l 45 53.195 l 24.602 64.973 l 21.625 76.074 l 21.191 
77.676 19.547 78.621 17.945 78.191 c 16.344 77.762 15.398 76.113 15.828 
74.516 c 17.25 69.223 l 10.531 73.098 l 9.098 73.914 7.273 73.418 6.449 
71.988 c 5.625 70.562 6.105 68.734 7.531 67.902 c 14.25 64.027 l 8.945 62.605
 l 7.344 62.172 6.398 60.527 6.828 58.926 c 7.258 57.324 8.906 56.379 10.508
 56.809 c 21.598 59.777 l 42 48 l 21.602 36.223 l 10.5 39.191 l 8.91 39.59
 7.297 38.637 6.875 37.055 c 6.453 35.473 7.379 33.844 8.953 33.395 c 14.25
 31.973 l 7.531 28.098 l 6.836 27.703 6.328 27.047 6.117 26.277 c 5.906 
25.504 6.016 24.684 6.414 23.988 c 6.812 23.297 7.473 22.793 8.246 22.59
 c 9.02 22.387 9.84 22.496 10.531 22.902 c 17.25 26.777 l 15.828 21.48 l
 15.609 20.707 15.707 19.875 16.105 19.176 c 16.5 18.477 17.16 17.965 17.938
 17.758 c 18.715 17.551 19.543 17.664 20.238 18.074 c 20.93 18.48 21.43 
19.152 21.625 19.934 c 24.594 31.027 l 45 42.805 l 45 19.242 l 36.883 11.125
 l 36.32 10.562 36 9.797 36 9.004 c 36 8.207 36.316 7.441 36.879 6.879 c
 38.051 5.707 39.949 5.703 41.125 6.875 c 45 10.758 l 45 3 l 45 1.344 46.344
 0 48 0 c 49.656 0 51 1.344 51 3 c 51 10.758 l 54.883 6.875 l 56.055 5.703
 57.957 5.707 59.129 6.879 c 60.297 8.051 60.297 9.953 59.125 11.125 c 51
 19.242 l 51 42.805 l 71.398 31.027 l 74.375 19.926 l 74.809 18.324 76.453
 17.379 78.055 17.809 c 79.656 18.238 80.602 19.887 80.172 21.484 c 78.758
 26.777 l 85.477 22.902 l 86.91 22.086 88.73 22.582 89.559 24.012 c 90.383
 25.438 89.898 27.266 88.477 28.098 c 81.758 31.973 l 87.055 33.395 l 88.656
 33.828 89.602 35.473 89.172 37.074 c 88.742 38.676 87.094 39.621 85.492
 39.191 c 74.402 36.223 l 54 48 l 74.398 59.777 l 85.492 56.809 l 87.094
 56.379 88.738 57.328 89.168 58.93 c 89.598 60.531 88.648 62.176 87.047 
62.605 c 81.75 64.027 l 88.469 67.902 l 89.895 68.734 90.375 70.562 89.551
 71.988 c 88.727 73.418 86.902 73.914 85.469 73.098 c 78.75 69.223 l 80.164
 74.52 l 80.387 75.293 80.289 76.125 79.891 76.824 c 79.492 77.523 78.832
 78.035 78.055 78.242 c 77.277 78.449 76.449 78.336 75.758 77.926 c 75.062
 77.52 74.566 76.848 74.371 76.066 c 71.402 64.973 l 51.004 53.195 l 51.004
 76.758 l 59.121 84.875 l 59.117 84.875 l 60.293 86.047 60.293 87.949 59.121
 89.121 c 57.949 90.293 56.051 90.297 54.875 89.125 c 50.992 85.242 l 50.992
 93 l 50.992 93.797 50.68 94.559 50.117 95.121 c 49.551 95.684 48.789 96
 47.992 96 c h
48 96 m f
Q Q
showpage
%%Trailer
%%EOF
