%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:37 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 1 0 767 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 1 0 767 768
768 768 cairo_set_page_size
%%EndPageSetup
q 1 0 766 768 rectclip
1 0 0 -1 0 768 cm q
0 g
120 24 m 120 17.637 122.527 11.531 127.031 7.031 c 131.531 2.527 137.637
 0 144 0 c 624 0 l 630.363 0 636.469 2.527 640.969 7.031 c 645.473 11.531
 648 17.637 648 24 c 648 49.824 647.457 74.398 646.367 97.727 c 684.684 
104.074 718.812 125.625 741.012 157.496 c 763.207 189.371 771.586 228.855
 764.25 266.996 c 756.914 305.133 734.484 338.691 702.047 360.055 c 669.609
 381.418 629.922 388.77 591.984 380.449 c 554.062 469.969 501.84 513.746
 456 524.977 c 456 629.281 l 524.398 646.371 l 533.711 648.676 542.496 652.852
 550.176 658.609 c 638.398 724.801 l 643.809 728.855 647.254 735.004 647.895
 741.734 c 648.531 748.461 646.301 755.148 641.754 760.148 c 637.207 765.148
 630.758 768 624 768 c 144 768 l 137.242 768 130.793 765.148 126.246 760.148
 c 121.699 755.148 119.469 748.461 120.105 741.734 c 120.746 735.004 124.191
 728.855 129.602 724.801 c 217.824 658.609 l 225.504 652.848 234.289 648.672
 243.602 646.371 c 312 629.281 l 312 524.977 l 266.16 513.746 213.938 469.969
 176.016 380.402 c 176.016 380.398 l 138.059 388.77 98.332 381.438 65.863
 360.074 c 33.391 338.707 10.938 305.125 3.602 266.953 c -3.734 228.785 
4.672 189.27 26.91 157.391 c 49.145 125.512 83.324 103.977 121.68 97.68 
c 120.547 73.137 119.988 48.57 120 24 c 124.754 145.922 m 91.012 152.094
 63.129 175.797 51.605 208.105 c 40.082 240.41 46.668 276.41 68.883 302.543
 c 91.102 328.68 125.57 340.973 159.312 334.801 c 143.328 284.402 131.09
 222.191 124.754 145.922 c 608.738 334.801 m 608.734 334.801 l 642.477 340.973
 676.945 328.68 699.164 302.543 c 721.379 276.41 727.969 240.41 716.445 
208.105 c 704.918 175.797 677.035 152.094 643.297 145.922 c 636.914 222.242
 624.672 284.402 608.738 334.801 c 168.191 48 m 168.512 72.801 169.406 96.305
 170.879 118.512 c 177.117 215.855 192.816 288.719 212.641 342.527 c 254.113
 455.039 311.23 480 336 480 c 342.363 480 348.469 482.527 352.969 487.031
 c 357.473 491.531 360 497.637 360 504 c 360 629.281 l 360 639.98 356.426
 650.375 349.84 658.809 c 343.258 667.246 334.043 673.238 323.664 675.84
 c 255.215 692.93 l 252.109 693.703 249.188 695.09 246.625 697.008 c 216
 720 l 552 720 l 521.375 697.008 l 518.797 695.082 515.859 693.695 512.734
 692.93 c 444.336 675.84 l 433.957 673.238 424.742 667.246 418.16 658.809
 c 411.574 650.375 408 639.98 408 629.281 c 408 504 l 408 497.637 410.527
 491.531 415.031 487.031 c 419.531 482.527 425.637 480 432 480 c 456.77 
480 513.887 455.039 555.359 342.527 c 575.184 288.766 590.879 215.809 597.121
 118.512 c 598.562 96.305 599.457 72.801 599.809 48 c h
168.191 48 m f
Q Q
showpage
%%Trailer
%%EOF
