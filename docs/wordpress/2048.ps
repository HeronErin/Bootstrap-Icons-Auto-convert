%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:46 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1212.77 734.688 m 1212.77 653.281 1183.488 596.926 1158.434 553.055 c 1150.754
 540.574 l 1120.32 491.613 1093.73 448.605 1093.73 398.496 c 1093.73 338.016
 1139.617 281.566 1204.324 281.566 c 1206.246 281.566 1208.102 281.664 1209.891
 281.855 c 1212.867 282.145 l 1212.863 282.145 l 1091.527 170.719 932.738
 108.969 768 109.152 c 658.824 109.141 551.359 136.27 455.27 188.098 c 359.184
 239.93 277.488 314.836 217.535 406.078 c 232.895 406.559 247.582 406.941
 259.969 406.941 c 328.801 406.941 435.457 398.59 435.457 398.59 c 470.977
 396.477 475.199 448.605 439.68 452.828 c 439.68 452.828 404.062 457.051
 364.32 459.066 c 604.32 1172.73 l 748.32 740.156 l 645.602 458.973 l 610.176
 456.859 576.578 452.734 576.578 452.734 c 541.059 450.621 545.281 396.285
 580.707 398.398 c 580.707 398.398 689.57 406.75 754.273 406.75 c 823.203
 406.75 929.953 398.398 929.953 398.398 c 965.473 396.285 969.602 448.512
 934.082 452.734 c 934.082 452.734 898.371 456.863 858.723 458.973 c 1096.801
 1167.164 l 1162.465 947.613 l 1167.648 931.004 l 1193.57 848.445 1212.672
 787.484 1212.672 734.59 c h
109.152 768 m 109.102 891.73 143.906 1012.969 209.578 1117.832 c 275.254
 1222.691 369.141 1306.93 480.48 1360.895 c 166.078 499.777 l 128.328 584.145
 108.926 675.57 109.152 768 c f
581.855 1399.969 m 779.617 825.602 l 982.082 1380.48 l 983.363 1383.68 
984.93 1386.688 986.785 1389.504 c 856.27 1435.512 714.57 1439.172 581.855
 1399.969 c 1346.016 451.871 m 1348.961 472.863 1350.465 495.457 1350.527
 519.648 c 1350.527 586.465 1338.047 661.633 1300.414 755.617 c 1099.199
 1337.379 l 1099.199 1337.375 l 1247.684 1251.105 1356.598 1110.25 1402.723
 944.832 c 1448.848 779.418 1428.531 602.527 1346.113 451.871 c h
1346.016 451.871 m f
0 768 m 0 344.543 344.543 0 768 0 c 1191.457 0 1536 344.543 1536 768 c 
1536 1191.457 1191.359 1536 768 1536 c 344.641 1536 0 1191.457 0 768 c 35.23
 768 m 35.23 1172.062 363.934 1500.77 768 1500.77 c 1172.062 1500.77 1500.672
 1172.062 1500.672 768 c 1500.672 363.84 1171.969 35.23 768 35.23 c 363.84
 35.23 35.23 363.84 35.23 768 c f*
Q Q
showpage
%%Trailer
%%EOF
