%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:48 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 48 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 48 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 48 48 672 672 rectclip
1 0 0 -1 0 768 cm q
0 g
168 96 m 187.094 96 205.41 103.586 218.91 117.09 c 232.414 130.59 240 148.906
 240 168 c 240 240 l 168 240 l 142.277 240 118.508 226.277 105.645 204 c
 92.785 181.723 92.785 154.277 105.645 132 c 118.508 109.723 142.277 96 
168 96 c 288 240 m 288 168 l 288 136.176 275.355 105.652 252.852 83.148 
c 230.348 60.645 199.824 48 168 48 c 136.176 48 105.652 60.645 83.148 83.148
 c 60.645 105.652 48 136.176 48 168 c 48 199.824 60.645 230.348 83.148 252.852
 c 105.652 275.355 136.176 288 168 288 c 240 288 l 240 480 l 168 480 l 136.176
 480 105.652 492.645 83.148 515.148 c 60.645 537.652 48 568.176 48 600 c
 48 631.824 60.645 662.348 83.148 684.852 c 105.652 707.355 136.176 720 
168 720 c 199.824 720 230.348 707.355 252.852 684.852 c 275.355 662.348 
288 631.824 288 600 c 288 528 l 480 528 l 480 600 l 480 631.824 492.645 
662.348 515.148 684.852 c 537.652 707.355 568.176 720 600 720 c 631.824 
720 662.348 707.355 684.852 684.852 c 707.355 662.348 720 631.824 720 600
 c 720 568.176 707.355 537.652 684.852 515.148 c 662.348 492.645 631.824
 480 600 480 c 528 480 l 528 288 l 600 288 l 631.824 288 662.348 275.355
 684.852 252.852 c 707.355 230.348 720 199.824 720 168 c 720 136.176 707.355
 105.652 684.852 83.148 c 662.348 60.645 631.824 48 600 48 c 568.176 48 
537.652 60.645 515.148 83.148 c 492.645 105.652 480 136.176 480 168 c 480
 240 l h
480 288 m 480 480 l 288 480 l 288 288 l h
528 240 m 528 168 l 528 148.906 535.586 130.59 549.09 117.09 c 562.59 103.586
 580.906 96 600 96 c 619.094 96 637.41 103.586 650.91 117.09 c 664.414 130.59
 672 148.906 672 168 c 672 187.094 664.414 205.41 650.91 218.91 c 637.41
 232.414 619.094 240 600 240 c h
528 528 m 600 528 l 619.094 528 637.41 535.586 650.91 549.09 c 664.414 
562.59 672 580.906 672 600 c 672 619.094 664.414 637.41 650.91 650.91 c 
637.41 664.414 619.094 672 600 672 c 580.906 672 562.59 664.414 549.09 650.91
 c 535.586 637.41 528 619.094 528 600 c h
240 528 m 240 600 l 240 619.094 232.414 637.41 218.91 650.91 c 205.41 664.414
 187.094 672 168 672 c 148.906 672 130.59 664.414 117.09 650.91 c 103.586
 637.41 96 619.094 96 600 c 96 580.906 103.586 562.59 117.09 549.09 c 130.59
 535.586 148.906 528 168 528 c h
240 528 m f
Q Q
showpage
%%Trailer
%%EOF
