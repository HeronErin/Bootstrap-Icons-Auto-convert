%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:30 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 2x2mm 6 6 0 () ()
%%BoundingBox: 0 0 6 6
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 2x2mm
%%PageBoundingBox: 0 0 6 6
6 6 cairo_set_page_size
%%EndPageSetup
q 0 0 6 6 rectclip
1 0 0 -1 0 6 cm q
0 g
0.188 2.25 m 0.066 2.25 -0.02 2.359 0.004 2.477 c 0.625 5.266 l 0.719 5.695
 1.102 6 1.539 6 c 3.711 6 l 4.148 6 4.531 5.695 4.625 5.266 c 4.676 5.043
 l 5.27 5.156 5.848 4.773 5.98 4.184 c 6.113 3.59 5.75 3 5.164 2.848 c 5.246
 2.477 l 5.27 2.359 5.184 2.25 5.062 2.25 c h
4.875 4.688 m 4.836 4.688 4.797 4.684 4.758 4.68 c 5.082 3.219 l 5.082 
3.215 l 5.441 3.32 5.668 3.672 5.617 4.043 c 5.562 4.41 5.25 4.688 4.875
 4.688 c 0.988 5.184 m 0.422 2.625 l 4.828 2.625 l 4.258 5.184 l 4.262 5.184
 l 4.203 5.441 3.977 5.625 3.711 5.625 c 1.539 5.625 l 1.273 5.625 1.047
 5.441 0.988 5.184 c f*
1.648 0.301 m 1.645 0.309 l 1.617 0.348 1.59 0.387 1.566 0.426 c 1.547 
0.457 1.531 0.492 1.516 0.523 c 1.508 0.547 1.504 0.559 1.5 0.562 c 1.5 
0.566 l 1.504 0.598 1.516 0.629 1.535 0.656 c 1.562 0.707 1.602 0.758 1.652
 0.824 c 1.656 0.828 l 1.699 0.887 1.754 0.957 1.797 1.031 c 1.84 1.105 
1.879 1.203 1.879 1.312 c 1.879 1.383 1.855 1.449 1.836 1.496 c 1.832 1.496
 l 1.809 1.547 1.785 1.598 1.754 1.645 c 1.727 1.691 1.695 1.738 1.66 1.785
 c 1.652 1.793 l 1.652 1.797 l 1.648 1.801 l 1.5 2 1.199 1.773 1.352 1.574
 c 1.355 1.566 l 1.383 1.527 1.41 1.488 1.434 1.449 c 1.453 1.418 1.469 
1.383 1.484 1.352 c 1.492 1.328 1.496 1.316 1.5 1.312 c 1.496 1.277 1.484
 1.246 1.465 1.219 c 1.43 1.16 1.391 1.102 1.352 1.051 c 1.348 1.047 l 1.297
 0.98 1.25 0.914 1.207 0.844 c 1.156 0.758 1.129 0.66 1.125 0.562 c 1.125
 0.492 1.148 0.426 1.168 0.379 c 1.191 0.328 1.219 0.277 1.242 0.234 c 1.246
 0.23 l 1.273 0.184 1.309 0.137 1.34 0.09 c 1.348 0.078 l 1.352 0.074 l 
1.5 -0.125 1.801 0.102 1.648 0.301 c 2.773 0.301 m 2.77 0.309 l 2.742 0.348
 2.715 0.387 2.691 0.426 c 2.672 0.457 2.656 0.492 2.641 0.523 c 2.633 0.547
 2.629 0.559 2.625 0.562 c 2.625 0.566 l 2.629 0.598 2.641 0.629 2.66 0.656
 c 2.688 0.707 2.727 0.758 2.777 0.824 c 2.781 0.828 l 2.824 0.887 2.879
 0.957 2.922 1.031 c 2.965 1.105 3.004 1.203 3.004 1.312 c 3.004 1.383 2.98
 1.449 2.961 1.496 c 2.957 1.496 l 2.934 1.547 2.91 1.598 2.879 1.645 c 
2.852 1.691 2.82 1.738 2.785 1.785 c 2.777 1.793 l 2.777 1.797 l 2.773 1.801
 l 2.625 2 2.324 1.773 2.477 1.574 c 2.48 1.566 l 2.508 1.527 2.535 1.488
 2.559 1.449 c 2.578 1.418 2.594 1.383 2.609 1.352 c 2.617 1.328 2.621 1.316
 2.625 1.312 c 2.621 1.277 2.609 1.246 2.59 1.219 c 2.555 1.16 2.516 1.102
 2.477 1.051 c 2.473 1.047 l 2.422 0.98 2.375 0.914 2.332 0.844 c 2.281 
0.758 2.254 0.66 2.25 0.562 c 2.25 0.492 2.273 0.426 2.293 0.379 c 2.316
 0.328 2.344 0.277 2.367 0.234 c 2.371 0.23 l 2.398 0.184 2.434 0.137 2.465
 0.09 c 2.473 0.078 l 2.477 0.074 l 2.625 -0.125 2.926 0.102 2.773 0.301
 c 3.898 0.301 m 3.895 0.309 l 3.867 0.348 3.84 0.387 3.816 0.426 c 3.797
 0.457 3.781 0.492 3.766 0.523 c 3.758 0.547 3.754 0.559 3.75 0.562 c 3.75
 0.566 l 3.754 0.598 3.766 0.629 3.785 0.656 c 3.812 0.707 3.852 0.758 3.902
 0.824 c 3.906 0.828 l 3.949 0.887 4.004 0.957 4.047 1.031 c 4.09 1.105 
4.129 1.203 4.129 1.312 c 4.129 1.383 4.105 1.449 4.086 1.496 c 4.082 1.496
 l 4.059 1.547 4.035 1.598 4.004 1.645 c 3.977 1.691 3.945 1.738 3.91 1.785
 c 3.902 1.793 l 3.902 1.797 l 3.898 1.801 l 3.75 2 3.449 1.773 3.602 1.574
 c 3.605 1.566 l 3.633 1.527 3.66 1.488 3.684 1.449 c 3.703 1.418 3.719 
1.383 3.734 1.352 c 3.742 1.328 3.746 1.316 3.75 1.312 c 3.746 1.277 3.734
 1.246 3.715 1.219 c 3.68 1.16 3.641 1.102 3.602 1.051 c 3.598 1.047 l 3.547
 0.98 3.5 0.914 3.457 0.844 c 3.406 0.758 3.379 0.66 3.375 0.562 c 3.375
 0.492 3.398 0.426 3.418 0.379 c 3.441 0.328 3.469 0.277 3.492 0.234 c 3.496
 0.23 l 3.523 0.184 3.559 0.137 3.59 0.09 c 3.598 0.078 l 3.602 0.074 l 
3.75 -0.125 4.051 0.102 3.898 0.301 c f
Q Q
showpage
%%Trailer
%%EOF
