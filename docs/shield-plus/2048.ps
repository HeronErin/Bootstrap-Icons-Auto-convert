%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:25 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 0 1440 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 0 1440 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 0 1344 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
512.449 152.641 m 421.012 177.824 330.199 205.223 240.098 234.816 c 231.863
 237.473 224.543 242.391 218.973 249.012 c 213.406 255.633 209.812 263.688
 208.609 272.258 c 155.426 671.328 278.305 962.496 424.898 1154.305 c 424.895
 1154.305 l 486.934 1236.348 560.945 1308.613 644.449 1368.672 c 677.664
 1392.098 707.043 1408.992 730.176 1419.84 c 741.695 1425.281 751.07 1429.055
 758.305 1431.168 c 761.492 1432.137 764.73 1432.938 768 1433.566 c 771.238
 1432.934 774.445 1432.133 777.602 1431.168 c 784.898 1428.992 794.305 1425.215
 805.824 1419.84 c 828.863 1408.992 858.336 1392 891.551 1368.672 c 975.055
 1308.613 1049.066 1236.348 1111.105 1154.305 c 1257.699 962.594 1380.578
 671.328 1327.395 272.258 c 1327.391 272.258 l 1326.188 263.688 1322.594
 255.633 1317.027 249.012 c 1311.457 242.391 1304.137 237.473 1295.902 234.816
 c 1233.406 214.367 1127.902 181.055 1023.551 152.738 c 916.992 123.84 818.977
 102.434 768 102.434 c 717.121 102.434 619.008 123.84 512.449 152.738 c 
h
486.91 53.762 m 591.07 25.441 701.762 0 768 0 c 834.238 0 944.93 25.441
 1049.09 53.762 c 1155.648 82.562 1263.074 116.641 1326.242 137.281 c 1326.238
 137.281 l 1352.652 146 1376.066 161.996 1393.793 183.426 c 1411.523 204.859
 1422.848 230.855 1426.465 258.434 c 1483.68 688.227 1350.914 1006.754 1189.824
 1217.473 c 1121.488 1307.59 1040.039 1386.965 948.191 1452.961 c 916.465
 1475.852 882.801 1495.926 847.586 1512.961 c 820.707 1525.633 791.809 1536
 768 1536 c 744.191 1536 715.391 1525.633 688.414 1512.961 c 653.199 1495.926
 619.535 1475.852 587.809 1452.961 c 495.961 1386.965 414.512 1307.59 346.176
 1217.473 c 185.09 1006.754 52.32 688.223 109.535 258.434 c 113.152 230.855
 124.477 204.859 142.207 183.426 c 159.934 161.996 183.348 146 209.762 137.281
 c 301.465 107.234 393.875 79.387 486.91 53.762 c f
768 432 m 780.73 432 792.938 437.059 801.941 446.059 c 810.941 455.062 
816 467.27 816 480 c 816 624 l 960 624 l 977.148 624 992.996 633.148 1001.57
 648 c 1010.145 662.852 1010.145 681.148 1001.57 696 c 992.996 710.852 977.148
 720 960 720 c 816 720 l 816 864 l 816 881.148 806.852 896.996 792 905.57
 c 777.148 914.145 758.852 914.145 744 905.57 c 729.148 896.996 720 881.148
 720 864 c 720 720 l 576 720 l 558.852 720 543.004 710.852 534.43 696 c 
525.855 681.148 525.855 662.852 534.43 648 c 543.004 633.148 558.852 624
 576 624 c 720 624 l 720 480 l 720 467.27 725.059 455.062 734.059 446.059
 c 743.062 437.059 755.27 432 768 432 c f
Q Q
showpage
%%Trailer
%%EOF
