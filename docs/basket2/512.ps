%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:55 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 24 384 361
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 24 384 361
384 384 cairo_set_page_size
%%EndPageSetup
q 0 24 384 337 rectclip
1 0 0 -1 0 384 cm q
0 g
96 240 m 96 231.426 100.574 223.504 108 219.215 c 115.426 214.93 124.574
 214.93 132 219.215 c 139.426 223.504 144 231.426 144 240 c 144 288 l 144
 296.574 139.426 304.496 132 308.785 c 124.574 313.07 115.426 313.07 108
 308.785 c 100.574 304.496 96 296.574 96 288 c h
168 240 m 168 231.426 172.574 223.504 180 219.215 c 187.426 214.93 196.574
 214.93 204 219.215 c 211.426 223.504 216 231.426 216 240 c 216 288 l 216
 296.574 211.426 304.496 204 308.785 c 196.574 313.07 187.426 313.07 180
 308.785 c 172.574 304.496 168 296.574 168 288 c h
240 240 m 240 231.426 244.574 223.504 252 219.215 c 259.426 214.93 268.574
 214.93 276 219.215 c 283.426 223.504 288 231.426 288 240 c 288 288 l 288
 296.574 283.426 304.496 276 308.785 c 268.574 313.07 259.426 313.07 252
 308.785 c 244.574 304.496 240 296.574 240 288 c h
240 240 m f
138.168 25.703 m 140.898 27.34 142.867 29.992 143.645 33.082 c 144.418 
36.168 143.934 39.438 142.297 42.168 c 81.191 144 l 302.809 144 l 241.68
 42.168 l 238.273 36.48 240.121 29.109 245.809 25.703 c 251.496 22.297 258.867
 24.145 262.273 29.832 c 330.793 144 l 372 144 l 375.184 144 378.234 145.266
 380.484 147.516 c 382.734 149.766 384 152.816 384 156 c 384 180 l 384 183.184
 382.734 186.234 380.484 188.484 c 378.234 190.734 375.184 192 372 192 c
 357.047 192 l 312.789 346.945 l 312.793 346.945 l 311.715 350.707 309.441
 354.02 306.316 356.375 c 303.188 358.73 299.379 360.004 295.465 360 c 88.559
 360 l 84.645 360.004 80.836 358.73 77.707 356.375 c 74.582 354.02 72.309
 350.707 71.23 346.945 c 26.953 192 l 12 192 l 5.371 192 0 186.629 0 180
 c 0 156 l 0 149.371 5.371 144 12 144 c 53.207 144 l 121.68 29.832 l 123.316
 27.102 125.969 25.133 129.059 24.355 c 132.145 23.582 135.414 24.066 138.145
 25.703 c h
51.91 192 m 93.047 336 l 290.949 336 l 332.086 192 l h
51.91 192 m f
Q Q
showpage
%%Trailer
%%EOF
