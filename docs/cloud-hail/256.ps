%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 68x68mm 192 192 0 () ()
%%BoundingBox: 0 0 192 187
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 68x68mm
%%PageBoundingBox: 0 0 192 187
192 192 cairo_set_page_size
%%EndPageSetup
q 0 0 192 187 rectclip
1 0 0 -1 0 192 cm q
0 g
160.859 54.324 m 157.516 37.465 147.102 22.848 132.258 14.18 c 117.414 
5.512 99.562 3.625 83.234 8.996 c 66.906 14.371 53.668 26.488 46.871 42.277
 c 35.398 40.953 23.883 44.418 15.039 51.848 c 6.199 59.281 0.809 70.027
 0.137 81.559 c -0.535 93.094 3.574 104.391 11.492 112.801 c 19.414 121.207
 30.449 125.98 42 126 c 156 126 l 168.293 126.016 179.742 119.754 186.367
 109.398 c 192.992 99.047 193.875 86.027 188.707 74.871 c 183.543 63.719
 173.043 55.969 160.859 54.324 c 102 18 m 113.809 17.996 125.203 22.348 
134.004 30.219 c 142.805 38.086 148.398 48.926 149.711 60.66 c 150.051 63.715
 152.641 66.02 155.711 66 c 156 66 l 164.574 66.004 172.496 70.578 176.781
 78.004 c 181.066 85.434 181.066 94.582 176.777 102.004 c 172.488 109.43
 164.562 114.004 155.988 114 c 42 114 l 33.41 113.996 25.23 110.309 19.539
 103.871 c 13.852 97.438 11.191 88.871 12.238 80.344 c 13.285 71.816 17.938
 64.148 25.02 59.281 c 32.098 54.414 40.922 52.812 49.262 54.887 c 52.309
 55.648 55.43 53.926 56.41 50.941 c 59.582 41.352 65.691 33.008 73.875 27.094
 c 82.062 21.18 91.902 17.996 102 18 c 45 183 m 45 187.969 40.969 192 36
 192 c 31.031 192 27 187.969 27 183 c 27 178.031 31.031 174 36 174 c 40.969
 174 45 178.031 45 183 c 49.895 138.312 m 53.035 139.359 54.734 142.754 
53.688 145.895 c 47.688 163.895 l 47.23 165.461 46.156 166.773 44.711 167.531
 c 43.27 168.289 41.578 168.422 40.031 167.906 c 38.484 167.391 37.215 166.27
 36.512 164.797 c 35.809 163.324 35.738 161.629 36.312 160.105 c 42.312 
142.105 l 43.359 138.965 46.754 137.266 49.895 138.312 c 93 183 m 93 187.969
 88.969 192 84 192 c 79.031 192 75 187.969 75 183 c 75 178.031 79.031 174
 84 174 c 88.969 174 93 178.031 93 183 c 97.895 138.312 m 101.035 139.359
 102.734 142.754 101.688 145.895 c 95.688 163.895 l 95.23 165.461 94.156
 166.773 92.711 167.531 c 91.27 168.289 89.578 168.422 88.031 167.906 c 
86.484 167.391 85.215 166.27 84.512 164.797 c 83.809 163.324 83.738 161.629
 84.312 160.105 c 90.312 142.105 l 91.359 138.965 94.754 137.266 97.895 
138.312 c 141 183 m 141 187.969 136.969 192 132 192 c 127.031 192 123 187.969
 123 183 c 123 178.031 127.031 174 132 174 c 136.969 174 141 178.031 141
 183 c 145.895 138.312 m 149.035 139.359 150.734 142.754 149.688 145.895
 c 143.688 163.895 l 143.23 165.461 142.156 166.773 140.711 167.531 c 139.27
 168.289 137.578 168.422 136.031 167.906 c 134.484 167.391 133.215 166.27
 132.512 164.797 c 131.809 163.324 131.738 161.629 132.312 160.105 c 138.312
 142.105 l 139.359 138.965 142.754 137.266 145.895 138.312 c f
Q Q
showpage
%%Trailer
%%EOF
