%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:54 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 0 384 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 0 384 384
384 384 cairo_set_page_size
%%EndPageSetup
q 0 0 384 384 rectclip
1 0 0 -1 0 384 cm q
0 g
144 6.672 m 146.336 9.523 147.77 13.004 148.109 16.676 c 148.453 20.344
 147.691 24.031 145.922 27.266 c 132.035 52.738 124.789 81.293 124.848 110.305
 c 124.848 206.809 203.52 284.953 300.48 284.953 c 313.152 284.938 325.418
 283.656 337.273 281.113 c 340.898 280.336 344.672 280.641 348.129 281.988
 c 351.586 283.336 354.57 285.668 356.711 288.695 c 358.98 291.848 360.137
 295.66 360.004 299.539 c 359.867 303.418 358.449 307.145 355.969 310.129
 c 337.145 333.25 313.398 351.879 286.457 364.656 c 259.52 377.438 230.07
 384.047 200.258 384 c 89.617 384 0 294.863 0 185.039 c 0 102.383 50.734
 31.488 122.977 1.441 c 126.574 -0.09 130.57 -0.406 134.363 0.539 c 138.156
 1.484 141.539 3.637 144 6.672 c 116.594 31.465 m 88.816 46.367 65.598 68.516
 49.398 95.555 c 33.199 122.594 24.633 153.52 24.602 185.039 c 24.602 281.52
 103.297 359.664 200.258 359.664 c 223.473 359.699 246.469 355.133 267.91
 346.227 c 289.352 337.32 308.816 324.25 325.176 307.777 c 317.078 308.785
 308.848 309.289 300.48 309.289 c 189.84 309.289 100.25 220.152 100.25 110.328
 c 100.25 82.32 106.059 55.656 116.594 31.465 c f
259.055 75.551 m 259.762 73.422 261.754 71.98 264 71.98 c 266.246 71.98
 268.238 73.422 268.945 75.551 c 278.234 103.438 l 282.387 115.871 292.129
 125.613 304.562 129.766 c 332.449 139.055 l 334.578 139.762 336.02 141.754
 336.02 144 c 336.02 146.246 334.578 148.238 332.449 148.945 c 304.562 158.234
 l 304.559 158.23 l 292.121 162.359 282.359 172.121 278.23 184.559 c 268.941
 212.445 l 268.945 212.449 l 268.238 214.578 266.246 216.02 264 216.02 c
 261.754 216.02 259.762 214.578 259.055 212.449 c 249.766 184.562 l 249.77
 184.559 l 245.641 172.121 235.879 162.359 223.441 158.23 c 195.555 148.941
 l 195.551 148.945 l 193.422 148.238 191.98 146.246 191.98 144 c 191.98 
141.754 193.422 139.762 195.551 139.055 c 223.438 129.766 l 223.441 129.77
 l 235.879 125.641 245.641 115.879 249.77 103.441 c h
332.711 2.375 m 333.199 0.977 334.516 0.035 336 0.035 c 337.484 0.035 338.801
 0.977 339.289 2.375 c 345.48 20.949 l 348.242 29.254 354.746 35.758 363.047
 38.516 c 381.621 44.707 l 381.625 44.711 l 383.023 45.199 383.965 46.516
 383.965 48 c 383.965 49.484 383.023 50.801 381.625 51.289 c 363.051 57.48
 l 363.047 57.48 l 354.758 60.254 348.254 66.758 345.48 75.047 c 339.289
 93.621 l 339.289 93.625 l 338.801 95.023 337.484 95.965 336 95.965 c 334.516
 95.965 333.199 95.023 332.711 93.625 c 326.52 75.051 l 326.52 75.047 l 
323.746 66.758 317.242 60.254 308.953 57.48 c 290.379 51.289 l 290.375 51.289
 l 288.977 50.801 288.035 49.484 288.035 48 c 288.035 46.516 288.977 45.199
 290.375 44.711 c 308.949 38.52 l 317.254 35.758 323.758 29.254 326.516 
20.953 c h
332.711 2.375 m f
Q Q
showpage
%%Trailer
%%EOF
