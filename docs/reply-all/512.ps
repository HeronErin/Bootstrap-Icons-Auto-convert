%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:29 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 48 384 288
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 48 384 288
384 384 cairo_set_page_size
%%EndPageSetup
q 0 48 384 240 rectclip
1 0 0 -1 0 384 cm q
0 g
194.352 120.312 m 195.43 119.836 196.676 119.945 197.656 120.594 c 198.637
 121.246 199.219 122.352 199.199 123.527 c 199.199 151.199 l 199.199 154.383
 200.465 157.434 202.715 159.684 c 204.965 161.938 208.016 163.199 211.199
 163.199 c 227.207 163.199 259.512 163.32 290.398 182.926 c 314.016 197.902
 338.16 225.164 352.68 275.949 c 328.199 252.355 300.238 239.566 275.758
 232.773 c 275.762 232.777 l 260.715 228.613 245.25 226.148 229.656 225.434
 c 223.273 225.133 216.879 225.195 210.504 225.625 c 210.191 225.625 l 210.07
 225.648 l 210.047 225.648 l 211.199 237.602 l 210 225.648 l 203.863 226.266
 199.195 231.434 199.199 237.602 c 199.199 265.273 l 199.199 267.867 196.559
 269.496 194.352 268.488 c 98.734 198.098 l 97.727 197.426 l 96.668 196.785
 96.016 195.637 96.016 194.398 c 96.016 193.16 96.668 192.016 97.727 191.375
 c 98.734 190.703 l h
223.199 249.266 m 224.832 249.266 226.613 249.312 228.551 249.41 c 238.965
 249.891 253.367 251.473 269.352 255.914 c 301.176 264.746 338.855 284.762
 363.91 329.836 c 363.91 329.832 l 366.707 334.852 372.664 337.184 378.125
 335.398 c 383.582 333.613 387.012 328.211 386.305 322.512 c 375.168 233.473
 341.039 186.625 303.266 162.672 c 273.387 143.711 242.617 140.062 223.203
 139.367 c 223.203 123.527 l 223.199 123.527 l 223.203 116.906 220.812 110.508
 216.473 105.508 c 212.129 100.512 206.125 97.25 199.57 96.328 c 193.016
 95.406 186.344 96.883 180.793 100.488 c 84.938 171.047 l 76.879 176.078
 71.984 184.902 71.984 194.398 c 71.984 203.898 76.879 212.723 84.938 217.754
 c 180.793 288.312 l 186.344 291.918 193.016 293.395 199.57 292.473 c 206.125
 291.551 212.129 288.289 216.473 283.289 c 220.812 278.293 223.203 271.895
 223.199 265.273 c h
223.199 249.266 m f
125.566 103.031 m 123.68 100.465 120.848 98.75 117.695 98.273 c 114.543
 97.797 111.332 98.594 108.77 100.488 c 12.961 171.047 l 4.902 176.078 0.008
 184.902 0.008 194.398 c 0.008 203.898 4.902 212.723 12.961 217.754 c 108.816
 288.312 l 111.375 290.27 114.609 291.113 117.797 290.66 c 120.988 290.207
 123.859 288.492 125.77 285.898 c 127.68 283.305 128.465 280.055 127.953
 276.875 c 127.441 273.695 125.676 270.855 123.047 268.992 c 26.734 198.098
 l 25.727 197.426 l 24.668 196.785 24.016 195.637 24.016 194.398 c 24.016
 193.16 24.668 192.016 25.727 191.375 c 26.734 190.703 l 123.023 119.809
 l 128.359 115.879 129.496 108.367 125.566 103.031 c f
Q Q
showpage
%%Trailer
%%EOF
