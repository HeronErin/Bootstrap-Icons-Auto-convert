%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:33 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1152
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1152
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 960 rectclip
1 0 0 -1 0 1536 cm q
0 g
777.406 481.246 m 781.719 479.352 786.695 479.777 790.621 482.379 c 794.543
 484.984 796.871 489.402 796.801 494.113 c 796.801 604.801 l 796.801 617.531
 801.855 629.738 810.859 638.742 c 819.859 647.742 832.07 652.801 844.801
 652.801 c 908.832 652.801 1038.047 653.281 1161.602 731.711 c 1256.066 
791.613 1352.641 900.672 1410.723 1103.809 c 1312.801 1009.441 1200.961 
958.273 1103.043 931.105 c 1103.039 931.105 l 1042.859 914.449 981 904.594
 918.625 901.727 c 893.094 900.527 867.516 900.785 842.016 902.496 c 840.77
 902.496 l 840.289 902.594 l 840.191 902.594 l 844.801 950.398 l 840 902.59
 l 840 902.594 l 828.152 903.781 817.168 909.336 809.188 918.172 c 801.203
 927.004 796.789 938.492 796.801 950.398 c 796.801 1061.086 l 796.801 1071.453
 786.242 1077.98 777.41 1073.949 c 394.945 792.383 l 390.914 789.695 l 390.91
 789.695 l 386.668 787.145 384.07 782.555 384.07 777.602 c 384.07 772.645
 386.668 768.055 390.91 765.504 c 394.941 762.816 l h
892.801 997.055 m 899.328 997.055 906.465 997.246 914.207 997.629 c 955.871
 999.551 1013.473 1005.887 1077.406 1023.645 c 1204.703 1058.973 1355.422
 1139.035 1455.645 1319.324 c 1455.648 1319.328 l 1462.93 1332.406 1475.898
 1341.336 1490.715 1343.48 c 1505.531 1345.621 1520.496 1340.73 1531.188
 1330.25 c 1541.875 1319.77 1547.062 1304.902 1545.215 1290.047 c 1500.672
 933.887 1364.16 746.496 1213.055 650.688 c 1093.535 574.848 970.461 560.254
 892.797 557.473 c 892.797 494.113 l 892.801 494.113 l 892.812 467.629 883.254
 442.031 865.883 422.039 c 848.516 402.043 824.508 389 798.281 385.309 c
 772.055 381.617 745.379 387.531 723.168 401.953 c 339.742 684.191 l 307.52
 704.309 287.938 739.613 287.938 777.602 c 287.938 815.586 307.52 850.895
 339.742 871.008 c 723.168 1153.246 l 745.379 1167.672 772.055 1173.582 
798.281 1169.891 c 824.508 1166.199 848.516 1153.156 865.883 1133.16 c 883.254
 1113.168 892.812 1087.57 892.801 1061.09 c h
892.801 997.055 m f
502.273 412.129 m 494.719 401.855 483.391 395.008 470.785 393.098 c 458.176
 391.188 445.328 394.375 435.07 401.953 c 51.84 684.191 l 19.613 704.309
 0.035 739.613 0.035 777.602 c 0.035 815.586 19.613 850.895 51.84 871.008
 c 435.266 1153.246 l 445.496 1161.074 458.441 1164.457 471.195 1162.641
 c 483.945 1160.828 495.434 1153.961 503.07 1143.59 c 510.711 1133.219 513.863
 1120.215 511.816 1107.496 c 509.77 1094.781 502.699 1083.418 492.191 1075.969
 c 106.945 792.383 l 102.914 789.695 l 102.91 789.695 l 98.668 787.145 96.07
 782.555 96.07 777.602 c 96.07 772.645 98.668 768.055 102.91 765.504 c 106.941
 762.816 l 492.094 479.23 l 492.098 479.23 l 502.344 471.68 509.172 460.371
 511.078 447.785 c 512.988 435.203 509.82 422.375 502.273 412.129 c f
Q Q
showpage
%%Trailer
%%EOF
