%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:31 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 96 768 576
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 96 768 576
768 768 cairo_set_page_size
%%EndPageSetup
q 0 96 768 480 rectclip
1 0 0 -1 0 768 cm q
0 g
388.703 240.625 m 390.859 239.676 393.348 239.891 395.309 241.191 c 397.273
 242.492 398.438 244.703 398.398 247.055 c 398.398 302.398 l 398.398 308.766
 400.93 314.871 405.43 319.371 c 409.93 323.871 416.035 326.398 422.398 
326.398 c 454.414 326.398 519.023 326.637 580.797 365.855 c 628.027 395.809
 676.316 450.336 705.355 551.902 c 656.395 504.719 600.477 479.133 551.516
 465.551 c 551.52 465.551 l 521.43 457.223 490.5 452.297 459.312 450.863
 c 446.547 450.262 433.758 450.391 421.008 451.246 c 420.383 451.246 l 420.145
 451.293 l 420.098 451.293 l 422.398 475.199 l 420 451.297 l 414.074 451.891
 408.586 454.668 404.594 459.086 c 400.602 463.504 398.395 469.246 398.398
 475.199 c 398.398 530.543 l 398.398 535.727 393.117 538.992 388.703 536.977
 c 197.473 396.191 l 195.457 394.848 l 193.332 393.57 192.035 391.277 192.035
 388.801 c 192.035 386.324 193.332 384.027 195.457 382.754 c 197.473 381.41
 l h
446.398 498.527 m 449.664 498.527 453.23 498.625 457.102 498.816 c 477.934
 499.777 506.734 502.945 538.703 511.824 c 602.352 529.488 677.711 569.52
 727.824 659.664 c 731.465 666.203 737.949 670.668 745.355 671.738 c 752.766
 672.812 760.25 670.363 765.594 665.125 c 770.938 659.887 773.531 652.453
 772.609 645.023 c 750.336 466.945 682.082 373.246 606.531 325.344 c 546.77
 287.422 485.234 280.129 446.402 278.734 c 446.402 247.055 l 446.398 247.055
 l 446.406 233.812 441.625 221.016 432.941 211.02 c 424.258 201.023 412.254
 194.5 399.141 192.656 c 386.027 190.809 372.691 193.766 361.586 200.977
 c 169.875 342.098 l 169.871 342.098 l 153.758 352.152 143.969 369.805 143.969
 388.801 c 143.969 407.793 153.758 425.445 169.871 435.504 c 361.582 576.625
 l 361.586 576.625 l 372.691 583.836 386.027 586.789 399.141 584.945 c 412.254
 583.098 424.258 576.578 432.941 566.582 c 441.625 556.586 446.406 543.785
 446.398 530.543 c h
446.398 498.527 m f
251.137 206.062 m 247.359 200.926 241.695 197.504 235.391 196.551 c 229.09
 195.594 222.664 197.188 217.535 200.977 c 25.922 342.098 l 9.809 352.152
 0.016 369.805 0.016 388.801 c 0.016 407.793 9.809 425.445 25.922 435.504
 c 217.633 576.625 l 222.746 580.535 229.223 582.23 235.598 581.32 c 241.973
 580.414 247.715 576.98 251.535 571.797 c 255.355 566.609 256.93 560.105
 255.906 553.75 c 254.887 547.391 251.348 541.711 246.098 537.984 c 53.473
 396.191 l 51.457 394.848 l 49.332 393.57 48.035 391.277 48.035 388.801 
c 48.035 386.324 49.332 384.027 51.457 382.754 c 53.473 381.41 l 246.047
 239.617 l 251.172 235.84 254.586 230.184 255.539 223.895 c 256.492 217.602
 254.91 211.188 251.137 206.062 c f
Q Q
showpage
%%Trailer
%%EOF
