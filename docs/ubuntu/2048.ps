%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:15 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 58 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 58 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 58 1536 1478 rectclip
1 0 0 -1 0 1536 cm q
0 g
218.207 914.879 m 276.082 914.879 331.582 891.891 372.504 850.969 c 413.426
 810.047 436.414 754.543 436.414 696.672 c 436.414 638.801 413.426 583.297
 372.504 542.375 c 331.582 501.453 276.082 478.465 218.207 478.465 c 160.324
 478.465 104.809 501.457 63.879 542.391 c 22.945 583.32 -0.047 638.836 -0.047
 696.719 c -0.047 754.605 22.945 810.121 63.879 851.051 c 104.809 891.98
 160.324 914.977 218.207 914.977 c h
1127.039 436.414 m 1184.914 436.414 1240.414 413.426 1281.336 372.504 c
 1322.258 331.582 1345.246 276.082 1345.246 218.207 c 1345.246 160.336 1322.258
 104.832 1281.336 63.91 c 1240.414 22.988 1184.914 0 1127.039 0 c 1069.168
 0 1013.664 22.988 972.742 63.91 c 931.82 104.832 908.832 160.336 908.832
 218.207 c 908.832 276.082 931.82 331.582 972.742 372.504 c 1013.664 413.426
 1069.168 436.414 1127.039 436.414 c 710.398 1258.367 m 633.277 1242.023
 560.754 1208.738 498.078 1160.922 c 435.402 1113.105 384.141 1051.949 348
 981.887 c 289.609 1008.457 224.477 1016.496 161.375 1004.93 c 205.008 1112.801
 274.469 1208.305 363.656 1283.047 c 452.84 1357.789 559.023 1409.477 672.863
 1433.566 c 723.742 1444.414 775.773 1449.789 827.809 1449.504 c 787.727
 1397.004 765.34 1333.141 763.871 1267.105 c 745.922 1265.031 728.078 1262.117
 710.398 1258.367 c 1077.887 1477.727 m 1135.762 1477.727 1191.262 1454.738
 1232.184 1413.816 c 1273.105 1372.895 1296.098 1317.391 1296.098 1259.52
 c 1296.098 1201.648 1273.105 1146.145 1232.184 1105.223 c 1191.262 1064.301
 1135.762 1041.312 1077.887 1041.312 c 1020.016 1041.312 964.512 1064.301
 923.59 1105.223 c 882.668 1146.145 859.68 1201.648 859.68 1259.52 c 859.68
 1317.391 882.668 1372.895 923.59 1413.816 c 964.512 1454.738 1020.016 1477.727
 1077.887 1477.727 c 1381.535 1179.359 m 1475.047 1061.332 1528.863 916.766
 1535.297 766.32 c 1541.727 615.871 1500.445 467.242 1417.344 341.664 c 
1392.035 400.969 1349.234 451.137 1294.656 485.473 c 1338.32 567.883 1359.672
 660.277 1356.59 753.488 c 1353.508 846.703 1326.102 937.488 1277.09 1016.832
 c 1328.172 1058.637 1364.73 1115.523 1381.535 1179.359 c 201.406 383.809
 m 265.434 380.574 328.934 396.844 383.52 430.465 c 431.598 360.949 495.547
 303.895 570.074 264.027 c 644.602 224.156 727.555 202.625 812.062 201.215
 c 815.613 136.895 838.656 75.168 878.301 24.285 c 878.305 24.289 l 743.023
 14.047 607.613 42.395 487.797 106.031 c 367.98 169.668 268.672 265.988 
201.406 383.809 c f
Q Q
showpage
%%Trailer
%%EOF
