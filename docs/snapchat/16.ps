%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 4x4mm 12 12 0 () ()
%%BoundingBox: 0 0 12 12
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 4x4mm
%%PageBoundingBox: 0 0 12 12
12 12 cairo_set_page_size
%%EndPageSetup
q 0 0 12 12 rectclip
1 0 0 -1 0 12 cm q
0 g
11.957 8.645 m 11.875 8.418 11.715 8.297 11.535 8.195 c 11.504 8.176 11.473
 8.16 11.441 8.148 c 11.277 8.066 l 10.715 7.766 10.273 7.391 9.969 6.941
 c 9.883 6.816 9.805 6.68 9.742 6.543 c 9.715 6.469 9.719 6.426 9.734 6.387
 c 9.738 6.387 l 9.754 6.355 9.781 6.332 9.809 6.312 c 9.906 6.246 10.004
 6.184 10.074 6.141 c 10.195 6.062 10.289 6 10.352 5.957 c 10.582 5.797 
10.746 5.621 10.848 5.43 c 10.988 5.16 11.008 4.844 10.898 4.559 c 10.746
 4.156 10.363 3.906 9.902 3.906 c 9.777 3.902 9.656 3.922 9.535 3.953 c 
9.539 3.676 9.535 3.387 9.508 3.098 c 9.422 2.09 9.066 1.562 8.699 1.141
 c 8.703 1.141 l 8.469 0.879 8.191 0.656 7.883 0.48 c 7.324 0.16 6.691 0
 6 0 c 5.309 0 4.68 0.16 4.121 0.48 c 3.812 0.656 3.535 0.879 3.297 1.145
 c 2.93 1.566 2.578 2.094 2.488 3.102 c 2.465 3.387 2.457 3.68 2.461 3.953
 c 2.465 3.953 l 2.344 3.922 2.223 3.906 2.098 3.906 c 1.637 3.906 1.254
 4.156 1.102 4.562 c 1.102 4.559 l 0.992 4.844 1.012 5.16 1.152 5.43 c 1.254
 5.621 1.418 5.793 1.648 5.957 c 1.711 6 1.805 6.062 1.926 6.141 c 2.18 
6.305 l 2.18 6.309 l 2.211 6.328 2.238 6.355 2.262 6.391 c 2.281 6.43 2.281
 6.473 2.254 6.555 c 2.254 6.551 l 2.191 6.688 2.117 6.82 2.031 6.941 c 
1.734 7.379 1.305 7.75 0.758 8.047 c 0.469 8.199 0.168 8.301 0.043 8.648
 c -0.055 8.91 0.012 9.207 0.254 9.453 c 0.344 9.547 0.445 9.625 0.562 9.688
 c 0.559 9.684 l 0.797 9.816 1.047 9.914 1.309 9.984 c 1.363 10 1.414 10.023
 1.461 10.051 c 1.551 10.129 1.539 10.246 1.656 10.418 c 1.715 10.508 1.789
 10.582 1.879 10.645 c 2.125 10.816 2.406 10.828 2.699 10.84 c 2.965 10.852
 3.27 10.863 3.613 10.977 c 3.754 11.023 3.906 11.117 4.078 11.223 c 4.492
 11.477 5.059 11.824 6.004 11.824 c 6.949 11.824 7.52 11.477 7.938 11.219
 c 8.109 11.113 8.254 11.023 8.395 10.977 c 8.738 10.863 9.043 10.852 9.309
 10.84 c 9.602 10.828 9.883 10.816 10.129 10.645 c 10.121 10.645 l 10.227
 10.574 10.312 10.477 10.375 10.367 c 10.461 10.223 10.457 10.121 10.539
 10.051 c 10.539 10.055 l 10.582 10.023 10.629 10 10.68 9.988 c 10.945 9.918
 11.199 9.816 11.441 9.684 c 11.562 9.617 11.672 9.535 11.762 9.43 c 11.766
 9.426 l 11.992 9.184 12.051 8.895 11.957 8.641 c 11.117 9.094 m 10.605 
9.379 10.262 9.348 9.996 9.516 c 9.77 9.66 9.906 9.973 9.742 10.086 c 9.539
 10.227 8.945 10.078 8.18 10.332 c 7.547 10.543 7.141 11.145 6.004 11.145
 c 4.863 11.145 4.469 10.543 3.824 10.332 c 3.059 10.078 2.461 10.227 2.262
 10.09 c 2.098 9.977 2.23 9.664 2.008 9.52 c 1.742 9.348 1.402 9.379 0.891
 9.098 c 0.562 8.918 0.75 8.805 0.859 8.754 c 2.719 7.855 3.016 6.465 3.027
 6.363 c 3.043 6.238 3.062 6.141 2.926 6.016 c 2.793 5.895 2.203 5.527 2.039
 5.414 c 1.77 5.227 1.648 5.035 1.738 4.805 c 1.801 4.645 1.949 4.582 2.105
 4.582 c 2.098 4.578 l 2.148 4.578 2.195 4.586 2.246 4.594 c 2.543 4.66 
2.832 4.809 2.996 4.848 c 3.016 4.852 3.035 4.855 3.059 4.855 c 3.148 4.855
 3.18 4.809 3.172 4.711 c 3.152 4.387 3.105 3.754 3.156 3.16 c 3.227 2.348
 3.488 1.945 3.801 1.586 c 3.949 1.414 4.652 0.672 6 0.672 c 7.344 0.672
 8.051 1.414 8.199 1.582 c 8.512 1.938 8.773 2.34 8.844 3.156 c 8.895 3.746
 8.852 4.379 8.828 4.703 c 8.82 4.809 8.855 4.848 8.941 4.848 c 8.941 4.852
 l 8.961 4.852 8.984 4.852 9.004 4.848 c 9.172 4.809 9.461 4.656 9.754 4.594
 c 9.805 4.582 9.852 4.574 9.902 4.574 c 10.059 4.574 10.211 4.637 10.27
 4.797 c 10.355 5.027 10.238 5.219 9.969 5.406 c 9.805 5.52 9.215 5.883 
9.082 6.008 c 8.945 6.133 8.961 6.234 8.977 6.355 c 8.988 6.461 9.285 7.848
 11.145 8.746 c 11.254 8.801 11.441 8.914 11.113 9.094 c f
Q Q
showpage
%%Trailer
%%EOF
