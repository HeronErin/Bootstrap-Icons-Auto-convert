%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:20 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
1440 1152 m 1440 1177.461 1429.887 1201.879 1411.883 1219.883 c 1393.879
 1237.887 1369.461 1248 1344 1248 c 192 1248 l 166.539 1248 142.121 1237.887
 124.117 1219.883 c 106.113 1201.879 96 1177.461 96 1152 c 96 576 l 96 550.539
 106.113 526.121 124.117 508.117 c 142.121 490.113 166.539 480 192 480 c
 304.512 480 l 380.855 479.957 454.059 449.605 508.031 395.617 c 587.711
 316.129 l 605.664 298.172 630 288.055 655.391 288 c 880.414 288 l 905.875
 288.004 930.289 298.125 948.289 316.129 c 1027.777 395.617 l 1054.523 422.371
 1086.281 443.598 1121.238 458.074 c 1156.191 472.555 1193.652 480.004 1231.488
 480 c 1344 480 l 1369.461 480 1393.879 490.113 1411.883 508.117 c 1429.887
 526.121 1440 550.539 1440 576 c h
192 384 m 141.078 384 92.242 404.227 56.234 440.234 c 20.227 476.242 0 
525.078 0 576 c 0 1152 l 0 1185.703 8.871 1218.812 25.723 1248 c 42.574 
1277.188 66.812 1301.426 96 1318.277 c 125.188 1335.129 158.297 1344 192
 1344 c 1344 1344 l 1377.703 1344 1410.812 1335.129 1440 1318.277 c 1469.188
 1301.426 1493.426 1277.188 1510.277 1248 c 1527.129 1218.812 1536 1185.703
 1536 1152 c 1536 576 l 1536 542.297 1527.129 509.188 1510.277 480 c 1493.426
 450.812 1469.188 426.574 1440 409.723 c 1410.812 392.871 1377.703 384 1344
 384 c 1231.488 384 l 1180.57 383.988 1131.742 363.754 1095.742 327.742 
c 1016.254 248.254 l 1016.258 248.258 l 980.258 212.246 931.43 192.012 880.512
 192 c 655.488 192 l 604.57 192.012 555.742 212.246 519.742 248.258 c 440.254
 327.746 l 440.258 327.742 l 404.258 363.754 355.43 383.988 304.512 384 
c h
192 384 m f
768 1056 m 704.348 1056 643.305 1030.715 598.293 985.707 c 553.285 940.695
 528 879.652 528 816 c 528 752.348 553.285 691.305 598.293 646.293 c 643.305
 601.285 704.348 576 768 576 c 831.652 576 892.695 601.285 937.707 646.293
 c 982.715 691.305 1008 752.348 1008 816 c 1008 879.652 982.715 940.695 
937.707 985.707 c 892.695 1030.715 831.652 1056 768 1056 c 768 1152 m 857.113
 1152 942.574 1116.602 1005.586 1053.586 c 1068.602 990.574 1104 905.113
 1104 816 c 1104 726.887 1068.602 641.426 1005.586 578.414 c 942.574 515.398
 857.113 480 768 480 c 678.887 480 593.426 515.398 530.414 578.414 c 467.398
 641.426 432 726.887 432 816 c 432 905.113 467.398 990.574 530.414 1053.586
 c 593.426 1116.602 678.887 1152 768 1152 c 288 624 m 288 641.148 278.852
 656.996 264 665.57 c 249.148 674.145 230.852 674.145 216 665.57 c 201.148
 656.996 192 641.148 192 624 c 192 606.852 201.148 591.004 216 582.43 c 
230.852 573.855 249.148 573.855 264 582.43 c 278.852 591.004 288 606.852
 288 624 c f
Q Q
showpage
%%Trailer
%%EOF
