%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:23:07 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 6 48 378 336
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 6 48 378 336
384 384 cairo_set_page_size
%%EndPageSetup
q 6 48 372 288 rectclip
1 0 0 -1 0 384 cm q
0 g
276.816 168 m 371.184 168 l 373.512 168 375.629 169.348 376.617 171.457
 c 377.602 173.562 377.281 176.051 375.793 177.84 c 328.609 234.48 l 327.469
 235.848 325.781 236.637 324 236.637 c 322.219 236.637 320.531 235.848 319.391
 234.48 c 272.207 177.84 l 270.719 176.051 270.398 173.562 271.383 171.457
 c 272.371 169.348 274.488 168 276.816 168 c 12.816 216 m 107.184 216 l 
109.512 216 111.629 214.652 112.617 212.543 c 113.602 210.438 113.281 207.949
 111.793 206.16 c 64.609 149.52 l 63.469 148.152 61.781 147.363 60 147.363
 c 58.219 147.363 56.531 148.152 55.391 149.52 c 8.207 206.16 l 6.719 207.949
 6.398 210.438 7.383 212.543 c 8.371 214.652 10.488 216 12.816 216 c f
192 72 m 154.754 72 121.441 88.969 99.434 115.633 c 97.445 118.207 94.5
 119.863 91.273 120.227 c 88.043 120.59 84.801 119.629 82.297 117.559 c 
79.789 115.492 78.227 112.492 77.969 109.254 c 77.711 106.012 78.777 102.809
 80.93 100.367 c 104.484 71.848 138.109 53.484 174.832 49.078 c 211.559 
44.672 248.574 54.562 278.207 76.703 c 307.84 98.844 327.82 131.531 334.008
 168 c 309.602 168 l 304.066 140.895 289.34 116.535 267.91 99.039 c 246.48
 81.547 219.664 71.996 192 72 c 74.398 216 m 80.488 245.742 97.621 272.07
 122.348 289.688 c 147.07 307.305 177.551 314.902 207.652 310.945 c 237.75
 306.988 265.234 291.777 284.566 268.367 c 286.555 265.793 289.5 264.137
 292.727 263.773 c 295.957 263.41 299.199 264.371 301.703 266.441 c 304.211
 268.508 305.773 271.508 306.031 274.746 c 306.289 277.988 305.223 281.191
 303.07 283.633 c 279.516 312.152 245.891 330.516 209.168 334.922 c 172.441
 339.328 135.426 329.438 105.793 307.297 c 76.16 285.156 56.18 252.469 49.992
 216 c h
74.398 216 m f*
Q Q
showpage
%%Trailer
%%EOF
