%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:08 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 48 768 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 48 768 720
768 768 cairo_set_page_size
%%EndPageSetup
q 0 48 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
362.977 354.719 m 384 337.922 l 384 430.082 l 362.977 413.281 l 358.727
 409.871 353.445 408.008 348 408 c 312 408 l 312 360 l 348 360 l 353.445
 359.992 358.727 358.129 362.977 354.719 c f
24 48 m 15.426 48 7.504 52.574 3.215 60 c -1.07 67.426 -1.07 76.574 3.215
 84 c 7.504 91.426 15.426 96 24 96 c 48 96 l 48 696 l 48 704.574 52.574 
712.496 60 716.785 c 67.426 721.07 76.574 721.07 84 716.785 c 91.426 712.496
 96 704.574 96 696 c 96 576 l 744 576 l 750.363 576 756.469 573.473 760.969
 568.969 c 765.473 564.469 768 558.363 768 552 c 768 216 l 768 209.637 765.473
 203.531 760.969 199.031 c 756.469 194.527 750.363 192 744 192 c 96 192 
l 96 72 l 96 65.637 93.473 59.531 88.969 55.031 c 84.469 50.527 78.363 48
 72 48 c h
581.711 234.289 m 586.512 239.824 590.992 245.695 595.152 251.906 c 618.383
 286.754 632.016 333.508 632.016 384.004 c 632.016 434.5 618.383 481.25 
595.152 516.102 c 590.992 522.34 586.512 528.215 581.711 533.719 c 547.633
 499.641 l 550.258 496.57 552.785 493.176 555.219 489.465 c 572.5 463.543
 584.02 426.344 584.02 384.008 c 584.02 341.672 572.5 304.473 555.219 278.504
 c 555.215 278.496 l 552.855 274.996 550.34 271.602 547.68 268.32 c h
515.711 467.715 m 480 432 l 482.734 432 488.16 430.32 493.969 421.586 c
 499.73 413.043 504 399.793 504 384 c 504 368.16 499.68 354.961 493.969 
346.414 c 488.16 337.68 482.734 336 480 336 c 515.711 300.289 l 522.91 305.715
 529.055 312.48 533.949 319.777 c 545.566 337.25 551.996 360.051 551.996
 384 c 551.996 407.953 545.562 430.754 533.898 448.223 c 533.902 448.223
 l 528.949 455.672 522.805 462.258 515.711 467.711 c 432 288 m 432 480 l
 431.992 486.051 429.695 491.879 425.574 496.309 c 421.453 500.742 415.809
 503.453 409.773 503.898 c 403.734 504.348 397.754 502.496 393.023 498.719
 c 339.602 456 l 288 456 l 281.637 456 275.531 453.473 271.031 448.969 c
 266.527 444.469 264 438.363 264 432 c 264 336 l 264 329.637 266.527 323.531
 271.031 319.031 c 275.531 314.527 281.637 312 288 312 c 339.602 312 l 393.027
 269.281 l 393.023 269.281 l 397.754 265.504 403.734 263.652 409.773 264.102
 c 415.809 264.547 421.453 267.258 425.574 271.691 c 429.695 276.121 431.992
 281.949 432 288 c f
312 600 m 144 600 l 144 648 l 144 654.363 146.527 660.469 151.031 664.969
 c 155.531 669.473 161.637 672 168 672 c 288 672 l 294.363 672 300.469 669.473
 304.969 664.969 c 309.473 660.469 312 654.363 312 648 c h
336 648 m 336 600 l 528 600 l 528 648 l 528 654.363 525.473 660.469 520.969
 664.969 c 516.469 669.473 510.363 672 504 672 c 360 672 l 353.637 672 347.531
 669.473 343.031 664.969 c 338.527 660.469 336 654.363 336 648 c f
Q Q
showpage
%%Trailer
%%EOF
