%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:09 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1536 768 m 1536 971.688 1455.086 1167.031 1311.059 1311.059 c 1167.031 
1455.086 971.688 1536 768 1536 c 564.312 1536 368.969 1455.086 224.941 1311.059
 c 80.914 1167.031 0 971.688 0 768 c 0 564.312 80.914 368.969 224.941 224.941
 c 368.969 80.914 564.312 0 768 0 c 971.688 0 1167.031 80.914 1311.059 224.941
 c 1455.086 368.969 1536 564.312 1536 768 c 1067.137 386.113 m 1085.59 394.137
 1102.742 404.879 1118.016 417.984 c 1130.156 430.125 1147.855 434.867 1164.438
 430.422 c 1181.023 425.98 1193.98 413.023 1198.422 396.438 c 1202.867 379.855
 1198.125 362.156 1185.984 350.016 c 1185.887 350.016 l 1185.887 349.918
 l 1185.887 349.922 l 1178.801 343.039 1171.195 336.719 1163.137 331.008
 c 1145.098 317.742 1125.574 306.629 1104.961 297.887 c 1038.934 269.547
 964.703 266.91 896.832 290.496 c 884.309 294.148 873.809 302.742 867.754
 314.301 c 861.699 325.855 860.609 339.379 864.734 351.754 c 868.859 364.133
 877.848 374.297 889.625 379.906 c 901.402 385.52 914.957 386.098 927.168
 381.504 c 972.738 365.363 1022.723 367.008 1067.137 386.113 c 608.832 381.504
 m 624.879 386.184 642.207 382.18 654.57 370.934 c 666.938 359.684 672.559
 342.812 669.414 326.398 c 666.273 309.98 654.812 296.379 639.168 290.496
 c 571.328 266.938 497.133 269.574 431.137 297.887 c 404.281 309.457 379.273
 324.918 356.93 343.777 c 354.625 345.699 352.387 347.746 350.211 349.922
 c 350.02 350.02 l 350.016 350.016 l 338.199 362.5 333.941 380.34 338.848
 396.812 c 343.75 413.289 357.07 425.895 373.789 429.887 c 390.512 433.875
 408.09 428.645 419.902 416.16 c 434.625 403.746 451.129 393.617 468.863
 386.113 c 513.277 367.008 563.262 365.363 608.832 381.504 c 672 624 m 672
 544.512 628.992 480 576 480 c 523.008 480 480 544.512 480 624 c 480 703.488
 523.008 768 576 768 c 628.992 768 672 703.488 672 624 c 1056 624 m 1056
 544.512 1012.992 480 960 480 c 907.008 480 864 544.512 864 624 c 864 703.488
 907.008 768 960 768 c 1012.992 768 1056 703.488 1056 624 c 552.289 1079.617
 m 515.52 1125.504 559.969 1181.379 618.242 1173.695 c 718.082 1160.766 
817.922 1160.766 917.762 1173.695 c 975.938 1181.375 1020.48 1125.504 983.715
 1079.617 c 935.711 1019.809 863.809 960 768 960 c 672.191 960 600.289 1019.809
 552.289 1079.617 c f
Q Q
showpage
%%Trailer
%%EOF
