%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:56 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 34x34mm 96 96 0 () ()
%%BoundingBox: 1 6 95 90
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 34x34mm
%%PageBoundingBox: 1 6 95 90
96 96 cairo_set_page_size
%%EndPageSetup
q 1 6 94 84 rectclip
1 0 0 -1 0 96 cm q
0 g
51 9 m 51 7.344 49.656 6 48 6 c 46.344 6 45 7.344 45 9 c 45 40.457 l 42
 42.602 l 42 28.32 l 42 22.621 37.379 18 31.68 18 c 28.535 18 25.543 19.621
 23.023 21.551 c 20.438 23.543 17.941 26.188 15.727 28.926 c 11.312 34.375
 7.645 40.602 6.246 43.805 c 5.191 46.234 3.887 50.766 2.91 55.871 c 1.922
 61.012 1.211 67.012 1.465 72.426 c 1.703 77.629 2.863 83.164 6.492 86.406
 c 10.512 90.008 16.223 89.742 22.938 86.383 c 33.707 81 l 36.199 79.754
 38.297 77.84 39.758 75.469 c 41.223 73.102 42 70.371 42 67.586 c 42 63 
l 42 61.344 40.656 60 39 60 c 37.344 60 36 61.344 36 63 c 36 67.586 l 36
 70.996 34.07 74.113 31.02 75.637 c 20.254 81.02 l 14.387 83.953 11.766 
83.078 10.484 81.93 c 8.805 80.43 7.684 77.125 7.453 72.148 c 7.23 67.379
 7.859 61.887 8.797 57 c 9.738 52.078 10.938 48.055 11.742 46.199 c 12.883
 43.57 16.242 37.801 20.383 32.699 c 22.434 30.168 24.602 27.906 26.676 
26.309 c 28.824 24.652 30.512 24 31.672 24 c 31.68 24 l 34.066 24 36 25.934
 36 28.32 c 36 46.883 l 25.262 54.562 l 24.008 55.559 23.754 57.355 24.684
 58.656 c 25.609 59.957 27.395 60.301 28.738 59.441 c 48 45.684 l 67.262
 59.441 l 67.906 59.934 68.723 60.145 69.527 60.02 c 70.328 59.898 71.051
 59.457 71.52 58.797 c 71.992 58.133 72.176 57.309 72.027 56.512 c 71.879
 55.715 71.414 55.008 70.738 54.559 c 60 46.883 l 60 28.32 l 60 25.934 61.934
 24 64.32 24 c 65.484 24 67.172 24.66 69.316 26.309 c 71.391 27.906 73.551
 30.168 75.617 32.703 c 79.746 37.805 83.105 43.57 84.25 46.195 c 85.055
 48.051 86.254 52.074 87.195 56.996 c 88.133 61.879 88.754 67.375 88.539
 72.145 c 88.312 77.117 87.195 80.426 85.508 81.926 c 84.23 83.066 81.609
 83.949 75.738 81.016 c 64.969 75.633 l 64.973 75.637 l 61.926 74.109 60
 70.992 60 67.586 c 60 63 l 60 61.344 58.656 60 57 60 c 55.344 60 54 61.344
 54 63 c 54 67.586 l 54 70.371 54.777 73.102 56.242 75.469 c 57.703 77.84
 59.801 79.754 62.293 81 c 73.062 86.383 l 79.781 89.742 85.484 90 89.508
 86.406 c 93.137 83.168 94.297 77.629 94.535 72.426 c 94.789 67.016 94.078
 61.016 93.094 55.871 c 92.109 50.758 90.812 46.234 89.746 43.801 c 88.355
 40.602 84.688 34.375 80.273 28.926 c 78.055 26.191 75.562 23.543 72.977
 21.551 c 70.457 19.621 67.465 18 64.32 18 c 58.621 18 54 22.621 54 28.32
 c 54 42.602 l 51 40.461 l h
51 9 m f
Q Q
showpage
%%Trailer
%%EOF
