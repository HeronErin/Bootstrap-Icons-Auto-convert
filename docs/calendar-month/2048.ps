%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:14 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
245.762 1087.871 m 297.602 934.078 l 488.066 934.078 l 539.906 1087.871
 l 608.836 1087.871 l 426.625 576 l 359.809 576 l 177.602 1087.871 l h
393.984 653.277 m 470.398 881.281 l 315.266 881.281 l 392.066 653.281 l
 h
945.602 693.789 m 880.707 693.789 l 880.703 937.922 l 880.703 1000.516 
840.961 1036.129 784.32 1036.129 c 732.578 1036.129 690.242 1012.512 690.242
 938.977 c 690.238 693.793 l 625.344 693.793 l 625.344 957.41 l 625.344 
1047.746 683.52 1094.211 764.832 1094.211 c 827.809 1094.211 864.961 1067.332
 878.879 1036.133 c 881.473 1036.133 l 881.473 1087.875 l 945.602 1087.875
 l h
1162.371 1178.203 m 1108.324 1178.203 1075.012 1149.02 1067.812 1117.148
 c 1001.859 1117.148 l 1010.883 1182.715 1061.859 1232.254 1161.988 1232.254
 c 1251.27 1232.254 1329.605 1181.66 1329.605 1080.766 c 1329.602 693.793
 l 1267.297 693.793 l 1267.297 749.281 l 1265.473 749.281 l 1247.137 715.875
 1204.32 687.84 1150.754 687.84 c 1058.113 687.84 993.312 753.023 993.312
 868.895 c 993.312 901.535 l 993.312 1019.613 1058.879 1084.129 1150.754
 1084.129 c 1204.32 1084.129 1247.523 1056 1263.266 1021.922 c 1265.188 
1021.922 l 1265.188 1080 l 1265.188 1141.922 1224.578 1178.207 1162.371 
1178.207 c 1163.141 743.328 m 1225.348 743.328 1265.094 793.922 1265.094
 873.793 c 1265.094 898.082 l 1265.094 979.488 1227.652 1029.027 1163.141
 1029.027 c 1096.707 1029.027 1057.734 979.875 1057.734 898.082 c 1057.734
 873.793 l 1057.734 790.465 1096.711 743.234 1163.141 743.234 c h
1163.141 743.328 m f
336 0 m 348.73 0 360.938 5.059 369.941 14.059 c 378.941 23.062 384 35.27
 384 48 c 384 96 l 1152 96 l 1152 48 l 1152 30.852 1161.148 15.004 1176 
6.43 c 1190.852 -2.145 1209.148 -2.145 1224 6.43 c 1238.852 15.004 1248 
30.852 1248 48 c 1248 96 l 1344 96 l 1377.703 96 1410.812 104.871 1440 121.723
 c 1469.188 138.574 1493.426 162.812 1510.277 192 c 1527.129 221.188 1536
 254.297 1536 288 c 1536 1344 l 1536 1377.703 1527.129 1410.812 1510.277
 1440 c 1493.426 1469.188 1469.188 1493.426 1440 1510.277 c 1410.812 1527.129
 1377.703 1536 1344 1536 c 192 1536 l 141.078 1536 92.242 1515.773 56.234
 1479.766 c 20.227 1443.758 0 1394.922 0 1344 c 0 288 l 0 237.078 20.227
 188.242 56.234 152.234 c 92.242 116.227 141.078 96 192 96 c 288 96 l 288
 48 l 288 35.27 293.059 23.062 302.059 14.059 c 311.062 5.059 323.27 0 336
 0 c 96 384 m 96 1344 l 96 1369.461 106.113 1393.879 124.117 1411.883 c 
142.121 1429.887 166.539 1440 192 1440 c 1344 1440 l 1369.461 1440 1393.879
 1429.887 1411.883 1411.883 c 1429.887 1393.879 1440 1369.461 1440 1344 
c 1440 384 l h
96 384 m f
Q Q
showpage
%%Trailer
%%EOF
