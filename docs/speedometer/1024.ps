%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:32:29 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
384 96 m 390.363 96 396.469 98.527 400.969 103.031 c 405.473 107.531 408
 113.637 408 120 c 408 192 l 408 200.574 403.426 208.496 396 212.785 c 388.574
 217.07 379.426 217.07 372 212.785 c 364.574 208.496 360 200.574 360 192
 c 360 120 l 360 113.637 362.527 107.531 367.031 103.031 c 371.531 98.527
 377.637 96 384 96 c 179.137 179.137 m 183.637 174.637 189.738 172.109 196.105
 172.109 c 202.469 172.109 208.57 174.637 213.07 179.137 c 256.992 223.008
 l 263.062 229.078 265.434 237.926 263.211 246.219 c 260.988 254.512 254.512
 260.988 246.219 263.211 c 237.926 265.434 229.078 263.062 223.008 256.992
 c 179.137 213.07 l 174.637 208.57 172.109 202.469 172.109 196.105 c 172.109
 189.738 174.637 183.637 179.137 179.137 c 96 384 m 96 377.637 98.527 371.531
 103.031 367.031 c 107.531 362.527 113.637 360 120 360 c 196.129 360 l 204.703
 360 212.625 364.574 216.914 372 c 221.199 379.426 221.199 388.574 216.914
 396 c 212.625 403.426 204.703 408 196.129 408 c 120 408 l 113.637 408 107.531
 405.473 103.031 400.969 c 98.527 396.469 96 390.363 96 384 c 552 384 m 
552 377.637 554.527 371.531 559.031 367.031 c 563.531 362.527 569.637 360
 576 360 c 648 360 l 656.574 360 664.496 364.574 668.785 372 c 673.07 379.426
 673.07 388.574 668.785 396 c 664.496 403.426 656.574 408 648 408 c 576 
408 l 569.637 408 563.531 405.473 559.031 400.969 c 554.527 396.469 552 
390.363 552 384 c 588.191 180.191 m 584.859 176.895 580.414 174.965 575.73
 174.789 c 571.047 174.609 566.469 176.195 562.895 179.23 c 362.258 350.879
 l 352.91 358.879 347.375 370.449 347.004 382.746 c 346.633 395.043 351.465
 406.926 360.312 415.473 c 369.16 424.02 381.199 428.441 393.477 427.648
 c 405.754 426.859 417.125 420.926 424.801 411.312 c 589.633 205.055 l 592.488
 201.461 593.926 196.941 593.672 192.359 c 593.414 187.773 591.48 183.445
 588.238 180.191 c h
588.191 180.191 m f
319.871 762.672 m 219.438 745.664 129.867 689.453 70.875 606.41 c 11.883
 523.363 -11.703 420.285 5.305 319.848 c 22.312 219.41 78.52 129.844 161.566
 70.852 c 244.613 11.859 347.691 -11.727 448.129 5.281 c 548.57 22.289 638.145
 78.5 697.141 161.551 c 756.137 244.602 779.727 347.684 762.719 448.129 
c 745.711 548.57 689.5 638.145 606.449 697.141 c 523.398 756.137 420.316
 779.727 319.871 762.719 c h
95.949 557.086 m 95.953 557.09 l 183.492 506.449 282.867 479.852 384 480
 c 488.93 480 587.328 508.078 672.047 557.09 c 713.059 488.797 728.473 408.16
 715.543 329.559 c 702.613 250.957 662.176 179.508 601.449 127.953 c 540.723
 76.402 463.656 48.102 384 48.102 c 304.344 48.102 227.277 76.402 166.551
 127.953 c 105.824 179.508 65.387 250.957 52.457 329.559 c 39.527 408.16
 54.941 488.797 95.953 557.09 c f*
Q Q
showpage
%%Trailer
%%EOF
