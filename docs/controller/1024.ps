%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:59 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 18 116 750 667
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 18 116 750 667
768 768 cairo_set_page_size
%%EndPageSetup
q 18 116 732 551 rectclip
1 0 0 -1 0 768 cm q
0 g
552 289.297 m 552 297.871 547.426 305.793 540 310.082 c 532.574 314.367
 523.426 314.367 516 310.082 c 508.574 305.793 504 297.871 504 289.297 c
 504 280.723 508.574 272.797 516 268.512 c 523.426 264.223 532.574 264.223
 540 268.512 c 547.426 272.797 552 280.723 552 289.297 c 480 361.297 m 488.574
 361.297 496.496 356.723 500.785 349.297 c 505.07 341.871 505.07 332.723
 500.785 325.297 c 496.496 317.871 488.574 313.297 480 313.297 c 471.426
 313.297 463.504 317.871 459.215 325.297 c 454.93 332.723 454.93 341.871
 459.215 349.297 c 463.504 356.723 471.426 361.297 480 361.297 c 600 337.297
 m 600 345.871 595.426 353.793 588 358.082 c 580.574 362.367 571.426 362.367
 564 358.082 c 556.574 353.793 552 345.871 552 337.297 c 552 328.723 556.574
 320.797 564 316.512 c 571.426 312.223 580.574 312.223 588 316.512 c 595.426
 320.797 600 328.723 600 337.297 c 528 409.297 m 536.574 409.297 544.496
 404.723 548.785 397.297 c 553.07 389.871 553.07 380.723 548.785 373.297
 c 544.496 365.871 536.574 361.297 528 361.297 c 519.426 361.297 511.504
 365.871 507.215 373.297 c 502.93 380.723 502.93 389.871 507.215 397.297
 c 511.504 404.723 519.426 409.297 528 409.297 c 216 265.297 m 264 265.297
 l 264 313.297 l 312 313.297 l 312 361.297 l 264 361.297 l 264 409.297 l
 216 409.297 l 216 361.297 l 168 361.297 l 168 313.297 l 216 313.297 l h
216 265.297 m f
146.449 156.48 m 144.793 150.324 145.652 143.762 148.84 138.242 c 152.027
 132.723 157.281 128.699 163.441 127.055 c 256.176 102.191 l 262.621 100.473
 269.488 101.516 275.137 105.066 c 280.781 108.617 284.695 114.359 285.938
 120.91 c 317.379 117.117 350.738 115.293 384 115.293 c 418.559 115.293 
453.266 117.262 485.762 121.34 c 485.762 121.344 l 486.895 114.691 490.777
 108.82 496.461 105.176 c 502.141 101.531 509.094 100.449 515.617 102.191
 c 608.352 127.055 l 615.523 128.977 621.402 134.105 624.277 140.949 c 627.148
 147.797 626.691 155.586 623.039 162.047 c 629.793 166.398 635.758 171.152
 640.941 176.305 c 660.527 195.891 678.383 226.703 693.5 261.359 c 708.859
 296.543 722.254 337.727 732.141 379.727 c 742.027 421.727 748.461 465.168
 749.613 504.816 c 750.766 543.984 746.781 581.711 733.871 610.895 c 727.984
 624 718.105 634.906 705.652 642.059 c 693.195 649.215 678.797 652.25 664.512
 650.734 c 633.984 647.52 610.992 631.824 591.887 613.629 c 580.125 602.492
 568.078 588.383 556.414 574.844 c 550.367 567.738 544.414 560.828 538.75
 554.539 c 503.805 515.945 462.094 481.242 383.996 481.242 c 305.898 481.242
 264.188 515.945 229.242 554.539 c 223.531 560.828 217.625 567.738 211.578
 574.844 c 199.914 588.379 187.867 602.445 176.105 613.629 c 157 631.867
 134.008 647.516 103.48 650.734 c 103.488 650.734 l 89.203 652.25 74.805
 649.215 62.348 642.059 c 49.895 634.906 40.016 624 34.129 610.895 c 21.168
 581.711 17.234 543.934 18.336 504.816 c 19.488 465.168 26.016 421.777 35.855
 379.727 c 45.742 337.727 59.184 296.543 74.496 261.359 c 89.617 226.703
 107.473 195.887 127.008 176.305 c 133.27 170.137 140.25 164.738 147.793
 160.223 c 146.449 156.43 l h
244.176 176.258 m 202.078 185.137 173.664 197.523 160.992 210.242 c 147.746
 223.488 132.816 247.828 118.512 280.562 c 118.512 280.559 l 103.395 316.18
 91.383 353.035 82.609 390.719 c 73.418 428.59 67.965 467.273 66.336 506.207
 c 65.281 542.445 69.312 571.871 78 591.453 c 78 591.457 l 79.777 595.27
 82.707 598.434 86.375 600.5 c 90.043 602.562 94.262 603.43 98.449 602.977
 c 114.145 601.344 127.73 593.426 143.043 578.879 c 153.219 569.184 162.242
 558.574 172.562 546.527 c 178.945 539.039 185.809 531.023 193.684 522.336
 c 233.328 478.512 286.945 433.297 384 433.297 c 481.055 433.297 534.672
 478.512 574.32 522.336 c 582.191 531.023 589.055 539.039 595.441 546.527
 c 605.715 558.574 614.785 569.184 624.961 578.879 c 640.227 593.422 653.809
 601.344 669.555 603.023 c 669.551 603.023 l 673.742 603.477 677.969 602.602
 681.637 600.527 c 685.305 598.453 688.227 595.281 690 591.457 c 698.641
 571.871 702.719 542.496 701.664 506.211 c 701.664 506.207 l 700.035 467.273
 694.582 428.59 685.391 390.719 c 676.617 353.035 664.605 316.18 649.488
 280.559 c 635.184 247.824 620.207 223.438 607.008 210.238 c 594.336 197.52
 565.918 185.133 523.824 176.254 c 483.023 167.66 433.727 163.293 384 163.293
 c 334.273 163.293 284.977 167.66 244.176 176.254 c f
Q Q
showpage
%%Trailer
%%EOF
