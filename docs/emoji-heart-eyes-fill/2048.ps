%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:26:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 0 m 564.312 0 368.969 80.914 224.941 224.941 c 80.914 368.969 0 564.312
 0 768 c 0 971.688 80.914 1167.031 224.941 1311.059 c 368.969 1455.086 564.312
 1536 768 1536 c 971.688 1536 1167.031 1455.086 1311.059 1311.059 c 1455.086
 1167.031 1536 971.688 1536 768 c 1536 564.312 1455.086 368.969 1311.059
 224.941 c 1167.031 80.914 971.688 0 768 0 c 456.574 438.336 m 529.82 301.633
 842.496 426.816 547.965 768 c 116.348 614.785 322.363 355.391 456.574 438.336
 c 1086.238 961.344 m 1098.457 958.469 1111.316 960.492 1122.062 966.98 
c 1132.805 973.473 1140.578 983.914 1143.715 996.066 c 1146.855 1008.219
 1145.105 1021.121 1138.848 1032 c 1100.926 1097.684 1046.375 1152.227 980.688
 1190.145 c 915 1228.062 840.484 1248.016 764.641 1248 c 688.793 1248.016
 614.281 1228.062 548.59 1190.145 c 482.902 1152.227 428.355 1097.684 390.434
 1032 c 384.172 1021.121 382.426 1008.219 385.562 996.066 c 388.703 983.914
 396.477 973.473 407.219 966.98 c 417.965 960.492 430.82 958.469 443.039
 961.344 c 443.52 961.344 l 445.152 961.824 l 451.586 963.266 l 475.777 
968.547 l 496.418 972.961 525.219 978.914 558.051 984.77 c 624.578 996.672
 704.164 1008 764.645 1008 c 825.125 1008 904.805 996.672 971.238 984.77
 c 971.23 984.77 l 1006.867 978.344 1042.363 971.176 1077.695 963.266 c 
1084.129 961.824 l 1085.762 961.441 l 1086.242 961.25 l h
1079.52 438.336 m 1213.633 355.391 1419.648 614.785 988.031 768 c 693.598
 426.816 1006.27 301.633 1079.422 438.336 c h
1079.52 438.336 m f
Q Q
showpage
%%Trailer
%%EOF
