%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:27:11 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 47 721 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 47 721 720
768 768 cairo_set_page_size
%%EndPageSetup
q 48 47 673 673 rectclip
1 0 0 -1 0 768 cm q
0 g
462.527 648 m 462.527 654.363 460 660.469 455.5 664.969 c 450.996 669.473
 444.895 672 438.527 672 c 120 672 l 100.906 672 82.59 664.414 69.09 650.91
 c 55.586 637.41 48 619.094 48 600 c 48 120 l 48 100.906 55.586 82.59 69.09
 69.09 c 82.59 55.586 100.906 48 120 48 c 600 48 l 619.094 48 637.41 55.586
 650.91 69.09 c 664.414 82.59 672 100.906 672 120 c 672 438.527 l 672 447.102
 667.426 455.027 660 459.312 c 652.574 463.602 643.426 463.602 636 459.312
 c 628.574 455.027 624 447.102 624 438.527 c 624 120 l 624 113.637 621.473
 107.531 616.969 103.031 c 612.469 98.527 606.363 96 600 96 c 120 96 l 113.637
 96 107.531 98.527 103.031 103.031 c 98.527 107.531 96 113.637 96 120 c 
96 600 l 96 606.363 98.527 612.469 103.031 616.969 c 107.531 621.473 113.637
 624 120 624 c 438.527 624 l 444.895 624 450.996 626.527 455.5 631.031 c
 460 635.531 462.527 641.637 462.527 648 c f*
240 264 m 240 257.637 242.527 251.531 247.031 247.031 c 251.531 242.527
 257.637 240 264 240 c 504 240 l 512.574 240 520.496 244.574 524.785 252
 c 529.07 259.426 529.07 268.574 524.785 276 c 520.496 283.426 512.574 288
 504 288 c 321.938 288 l 712.992 679.008 l 719.062 685.078 721.434 693.926
 719.211 702.219 c 716.988 710.512 710.512 716.988 702.219 719.211 c 693.926
 721.434 685.078 719.062 679.008 712.992 c 288 321.938 l 288 504 l 288 512.574
 283.426 520.496 276 524.785 c 268.574 529.07 259.426 529.07 252 524.785
 c 244.574 520.496 240 512.574 240 504 c h
240 264 m f*
Q Q
showpage
%%Trailer
%%EOF
