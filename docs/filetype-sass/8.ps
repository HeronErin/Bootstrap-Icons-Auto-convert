%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:19:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 2x2mm 6 6 0 () ()
%%BoundingBox: 0 0 6 6
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 2x2mm
%%PageBoundingBox: 0 0 6 6
6 6 cairo_set_page_size
%%EndPageSetup
q 0 0 6 6 rectclip
1 0 0 -1 0 6 cm q
0 g
5.25 1.688 m 5.25 4.125 l 4.875 4.125 l 4.875 1.688 l 4.125 1.688 l 3.812
 1.688 3.562 1.438 3.562 1.125 c 3.562 0.375 l 1.5 0.375 l 1.293 0.375 1.125
 0.543 1.125 0.75 c 1.125 4.125 l 0.75 4.125 l 0.75 0.75 l 0.75 0.336 1.086
 0 1.5 0 c 3.562 0 l h
0.527 5.734 m 0.504 5.68 0.488 5.625 0.488 5.566 c 0.773 5.566 l 0.785 
5.625 0.82 5.676 0.871 5.711 c 0.898 5.73 0.93 5.742 0.965 5.754 c 1 5.766
 1.039 5.77 1.086 5.77 c 1.148 5.77 1.199 5.762 1.242 5.742 c 1.238 5.742
 l 1.277 5.727 1.309 5.703 1.332 5.668 c 1.355 5.637 1.367 5.598 1.363 5.559
 c 1.367 5.512 1.344 5.469 1.309 5.438 c 1.27 5.406 1.211 5.383 1.137 5.363
 c 0.906 5.309 l 0.902 5.312 l 0.832 5.297 0.762 5.27 0.699 5.23 c 0.645
 5.199 0.598 5.152 0.566 5.094 c 0.535 5.035 0.52 4.965 0.523 4.898 c 0.523
 4.809 0.547 4.727 0.594 4.66 c 0.641 4.594 0.707 4.539 0.793 4.5 c 0.879
 4.461 0.973 4.445 1.086 4.445 c 1.199 4.445 1.297 4.465 1.379 4.504 c 1.461
 4.543 1.523 4.594 1.566 4.656 c 1.613 4.719 1.637 4.789 1.641 4.867 c 1.355
 4.867 l 1.348 4.832 1.336 4.797 1.312 4.77 c 1.285 4.738 1.254 4.715 1.219
 4.703 c 1.176 4.684 1.129 4.676 1.078 4.676 c 0.996 4.676 0.934 4.695 0.887
 4.734 c 0.844 4.77 0.816 4.82 0.82 4.879 c 0.82 4.926 0.84 4.961 0.875 
4.992 c 0.871 4.988 l 0.918 5.023 0.969 5.047 1.023 5.055 c 1.258 5.109 
l 1.34 5.129 1.41 5.156 1.469 5.188 c 1.527 5.223 1.574 5.266 1.609 5.32
 c 1.645 5.375 1.66 5.445 1.66 5.531 c 1.66 5.625 1.637 5.707 1.59 5.777
 c 1.539 5.852 1.469 5.91 1.387 5.945 c 1.301 5.984 1.191 6.004 1.066 6.004
 c 0.973 6.004 0.887 5.992 0.816 5.969 c 0.75 5.949 0.691 5.918 0.637 5.875
 c 0.59 5.836 0.555 5.789 0.527 5.734 c 2.098 5.59 m 1.98 5.977 l 1.68 5.977
 l 2.184 4.477 l 2.531 4.477 l 3.031 5.977 l 2.715 5.977 l 2.598 5.59 l 
h
2.539 5.367 m 2.355 4.762 l 2.344 4.762 l 2.16 5.367 l h
3.047 5.566 m 3.051 5.684 3.105 5.797 3.199 5.875 c 3.246 5.914 3.309 5.945
 3.379 5.969 c 3.449 5.992 3.531 6.004 3.629 6.004 c 3.754 6.004 3.863 5.984
 3.949 5.945 c 4.039 5.906 4.105 5.852 4.152 5.781 c 4.199 5.711 4.223 5.629
 4.223 5.535 c 4.223 5.449 4.207 5.383 4.172 5.324 c 4.137 5.266 4.09 5.219
 4.031 5.188 c 3.965 5.152 3.891 5.125 3.816 5.109 c 3.582 5.055 l 3.586
 5.055 l 3.531 5.047 3.48 5.023 3.434 4.988 c 3.398 4.965 3.379 4.922 3.379
 4.879 c 3.379 4.82 3.402 4.773 3.449 4.734 c 3.496 4.695 3.559 4.676 3.641
 4.676 c 3.695 4.676 3.742 4.684 3.781 4.703 c 3.816 4.715 3.848 4.738 3.871
 4.77 c 3.895 4.797 3.91 4.832 3.918 4.867 c 4.199 4.867 l 4.195 4.789 4.168
 4.719 4.125 4.656 c 4.078 4.586 4.012 4.535 3.938 4.5 c 3.844 4.461 3.742
 4.441 3.645 4.445 c 3.535 4.445 3.438 4.465 3.355 4.5 c 3.27 4.539 3.207
 4.59 3.156 4.656 c 3.109 4.723 3.086 4.805 3.086 4.895 c 3.086 4.969 3.102
 5.035 3.133 5.09 c 3.164 5.145 3.207 5.191 3.266 5.227 c 3.324 5.262 3.391
 5.289 3.469 5.305 c 3.699 5.359 l 3.777 5.379 3.836 5.402 3.871 5.434 c
 3.867 5.438 l 3.906 5.469 3.93 5.512 3.926 5.559 c 3.926 5.598 3.914 5.637
 3.895 5.668 c 3.871 5.703 3.836 5.727 3.797 5.742 c 3.754 5.758 3.703 5.77
 3.641 5.77 c 3.598 5.77 3.559 5.766 3.52 5.754 c 3.523 5.754 l 3.492 5.742
 3.457 5.73 3.43 5.711 c 3.379 5.676 3.344 5.625 3.336 5.566 c h
4.359 5.734 m 4.363 5.734 l 4.336 5.68 4.324 5.625 4.32 5.566 c 4.605 5.566
 l 4.617 5.625 4.652 5.676 4.703 5.711 c 4.73 5.73 4.762 5.742 4.797 5.754
 c 4.832 5.766 4.871 5.77 4.918 5.77 c 4.98 5.77 5.031 5.762 5.074 5.742
 c 5.07 5.742 l 5.109 5.727 5.141 5.703 5.164 5.668 c 5.188 5.637 5.199 
5.598 5.199 5.559 c 5.199 5.512 5.18 5.469 5.141 5.438 c 5.102 5.406 5.043
 5.383 4.969 5.363 c 4.738 5.309 l 4.734 5.312 l 4.664 5.297 4.594 5.27 
4.531 5.23 c 4.477 5.199 4.434 5.152 4.402 5.094 c 4.371 5.035 4.355 4.965
 4.355 4.898 c 4.355 4.809 4.379 4.727 4.426 4.66 c 4.473 4.594 4.539 4.539
 4.625 4.5 c 4.711 4.461 4.805 4.445 4.918 4.445 c 5.031 4.445 5.129 4.465
 5.211 4.504 c 5.293 4.543 5.355 4.594 5.398 4.656 c 5.445 4.719 5.469 4.789
 5.473 4.867 c 5.188 4.867 l 5.184 4.832 5.168 4.797 5.145 4.77 c 5.121 
4.738 5.086 4.715 5.051 4.703 c 5.008 4.684 4.961 4.676 4.914 4.676 c 4.832
 4.676 4.77 4.695 4.723 4.734 c 4.676 4.77 4.652 4.82 4.652 4.879 c 4.652
 4.926 4.672 4.961 4.707 4.992 c 4.707 4.988 l 4.75 5.023 4.801 5.047 4.855
 5.055 c 5.09 5.109 l 5.172 5.129 5.242 5.156 5.301 5.188 c 5.359 5.223 
5.406 5.266 5.441 5.32 c 5.477 5.375 5.492 5.445 5.492 5.531 c 5.492 5.625
 5.469 5.707 5.422 5.777 c 5.375 5.852 5.305 5.91 5.223 5.945 c 5.137 5.984
 5.027 6.004 4.902 6.004 c 4.898 6.004 l 4.816 6.004 4.73 5.992 4.648 5.969
 c 4.586 5.949 4.523 5.918 4.469 5.875 c 4.426 5.836 4.387 5.789 4.363 5.734
 c f*
Q Q
showpage
%%Trailer
%%EOF
