%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:11 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
1056 624 m 1056 611.27 1061.059 599.062 1070.059 590.059 c 1079.062 581.059
 1091.27 576 1104 576 c 1200 576 l 1212.73 576 1224.938 581.059 1233.941
 590.059 c 1242.941 599.062 1248 611.27 1248 624 c 1248 720 l 1248 732.73
 1242.941 744.938 1233.941 753.941 c 1224.938 762.941 1212.73 768 1200 768
 c 1104 768 l 1091.27 768 1079.062 762.941 1070.059 753.941 c 1061.059 744.938
 1056 732.73 1056 720 c h
768 624 m 768 611.27 773.059 599.062 782.059 590.059 c 791.062 581.059 
803.27 576 816 576 c 912 576 l 924.73 576 936.938 581.059 945.941 590.059
 c 954.941 599.062 960 611.27 960 624 c 960 720 l 960 732.73 954.941 744.938
 945.941 753.941 c 936.938 762.941 924.73 768 912 768 c 816 768 l 803.27
 768 791.062 762.941 782.059 753.941 c 773.059 744.938 768 732.73 768 720
 c h
288 912 m 288 899.27 293.059 887.062 302.059 878.059 c 311.062 869.059 
323.27 864 336 864 c 432 864 l 444.73 864 456.938 869.059 465.941 878.059
 c 474.941 887.062 480 899.27 480 912 c 480 1008 l 480 1020.73 474.941 1032.938
 465.941 1041.941 c 456.938 1050.941 444.73 1056 432 1056 c 336 1056 l 323.27
 1056 311.062 1050.941 302.059 1041.941 c 293.059 1032.938 288 1020.73 288
 1008 c h
576 912 m 576 899.27 581.059 887.062 590.059 878.059 c 599.062 869.059 
611.27 864 624 864 c 720 864 l 732.73 864 744.938 869.059 753.941 878.059
 c 762.941 887.062 768 899.27 768 912 c 768 1008 l 768 1020.73 762.941 1032.938
 753.941 1041.941 c 744.938 1050.941 732.73 1056 720 1056 c 624 1056 l 611.27
 1056 599.062 1050.941 590.059 1041.941 c 581.059 1032.938 576 1020.73 576
 1008 c h
576 912 m f
336 0 m 348.73 0 360.938 5.059 369.941 14.059 c 378.941 23.062 384 35.27
 384 48 c 384 96 l 1152 96 l 1152 48 l 1152 30.852 1161.148 15.004 1176 
6.43 c 1190.852 -2.145 1209.148 -2.145 1224 6.43 c 1238.852 15.004 1248 
30.852 1248 48 c 1248 96 l 1344 96 l 1377.703 96 1410.812 104.871 1440 121.723
 c 1469.188 138.574 1493.426 162.812 1510.277 192 c 1527.129 221.188 1536
 254.297 1536 288 c 1536 1344 l 1536 1377.703 1527.129 1410.812 1510.277
 1440 c 1493.426 1469.188 1469.188 1493.426 1440 1510.277 c 1410.812 1527.129
 1377.703 1536 1344 1536 c 192 1536 l 141.078 1536 92.242 1515.773 56.234
 1479.766 c 20.227 1443.758 0 1394.922 0 1344 c 0 288 l 0 237.078 20.227
 188.242 56.234 152.234 c 92.242 116.227 141.078 96 192 96 c 288 96 l 288
 48 l 288 35.27 293.059 23.062 302.059 14.059 c 311.062 5.059 323.27 0 336
 0 c 96 384 m 96 1344 l 96 1369.461 106.113 1393.879 124.117 1411.883 c 
142.121 1429.887 166.539 1440 192 1440 c 1344 1440 l 1369.461 1440 1393.879
 1429.887 1411.883 1411.883 c 1429.887 1393.879 1440 1369.461 1440 1344 
c 1440 384 l h
96 384 m f
Q Q
showpage
%%Trailer
%%EOF
