%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:28 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 47 1440 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 47 1440 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 47 1344 1489 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 0 m 777.996 -0.008 787.742 3.109 795.883 8.906 c 804.023 14.707 810.148
 22.902 813.406 32.352 c 868.414 192 l 1344 192 l 1369.461 192 1393.879 
202.113 1411.883 220.117 c 1429.887 238.121 1440 262.539 1440 288 c 1440
 960 l 1440 985.461 1429.887 1009.879 1411.883 1027.883 c 1393.879 1045.887
 1369.461 1056 1344 1056 c 1166.398 1056 l 1293.406 1424.352 l 1299 1440.574
 1295.508 1458.547 1284.254 1471.5 c 1273 1484.453 1255.691 1490.418 1238.848
 1487.148 c 1222.004 1483.879 1208.184 1471.871 1202.594 1455.648 c 1064.832
 1056 l 816 1056 l 816 1344 l 816 1361.148 806.852 1376.996 792 1385.57 
c 777.148 1394.145 758.852 1394.145 744 1385.57 c 729.148 1376.996 720 1361.148
 720 1344 c 720 1056 l 471.168 1056 l 333.406 1455.648 l 327.816 1471.871
 313.996 1483.879 297.152 1487.148 c 280.309 1490.418 263 1484.453 251.746
 1471.5 c 240.492 1458.547 237 1440.574 242.594 1424.352 c 369.602 1056 
l 192 1056 l 166.539 1056 142.121 1045.887 124.117 1027.883 c 106.113 1009.879
 96 985.461 96 960 c 96 288 l 96 262.539 106.113 238.121 124.117 220.117
 c 142.121 202.113 166.539 192 192 192 c 667.586 192 l 722.594 32.352 l 
725.852 22.902 731.977 14.707 740.117 8.906 c 748.258 3.109 758.004 -0.008
 768 0 c 192 288 m 192 960 l 1344 960 l 1344 288 l h
192 288 m f
Q Q
showpage
%%Trailer
%%EOF
