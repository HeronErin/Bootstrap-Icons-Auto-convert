%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 672
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 672
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 672 rectclip
1 0 0 -1 0 768 cm q
0 g
96 96 m 70.539 96 46.121 106.113 28.117 124.117 c 10.113 142.121 0 166.539
 0 192 c 0 576.48 l 0.125 601.859 10.297 626.152 28.285 644.051 c 46.277
 661.953 70.621 672 96 672 c 360 672 l 368.574 672 376.496 667.426 380.785
 660 c 385.07 652.574 385.07 643.426 380.785 636 c 376.496 628.574 368.574
 624 360 624 c 96 624 l 85.434 624 75.164 620.516 66.781 614.086 c 58.395
 607.656 52.367 598.637 49.633 588.434 c 320.352 421.824 l 384 459.984 l
 720 258.383 l 720 408 l 720 416.574 724.574 424.496 732 428.785 c 739.426
 433.07 748.574 433.07 756 428.785 c 763.426 424.496 768 416.574 768 408
 c 768 192 l 768 166.539 757.887 142.121 739.883 124.117 c 721.879 106.113
 697.461 96 672 96 c h
273.984 393.984 m 48 533.039 l 48 258.383 l h
48 202.414 m 48 192 l 48 179.27 53.059 167.062 62.059 158.059 c 71.062 
149.059 83.27 144 96 144 c 672 144 l 684.73 144 696.938 149.059 705.941 
158.059 c 714.941 167.062 720 179.27 720 192 c 720 202.414 l 384 404.016
 l h
48 202.414 m f
683.855 684.91 m 732.336 684.91 760.031 643.773 760.031 587.711 c 760.031
 577.633 l 760.031 500.641 702.719 432 600.961 432 c 599.281 432 l 500.16
 432 432 497.281 432 596.734 c 432 607.008 l 432 711.359 501.023 768 593.184
 768 c 595.297 768 l 623.809 768 644.16 764.449 654.672 759.602 c 654.672
 724.562 l 642.91 729.844 622.367 733.203 598.031 733.203 c 595.918 733.203
 l 531.887 733.203 472.512 695.379 472.512 605.762 c 472.512 598.227 l 472.512
 518.691 523.297 467.473 599.23 467.473 c 601.152 467.473 l 674.832 467.473
 720.383 517.871 720.383 579.121 c 720.383 584.785 l 720.383 631.586 704.832
 651.504 689.711 651.504 c 678.574 651.504 670.031 644.398 670.031 631.344
 c 670.031 526.223 l 626.543 526.223 l 626.543 553.535 l 625.102 553.535
 l 621.07 539.23 607.438 523.297 579.309 523.297 c 541.965 523.297 518.875
 549.938 518.875 590.496 c 518.875 615.84 l 518.875 658.656 542.395 684.672
 579.355 684.672 c 601.965 684.672 622.363 673.777 628.027 653.809 c 630.09
 653.809 l 635.754 673.969 659.707 684.914 683.852 684.914 c 566.109 608.691
 m 566.109 597.797 l 566.109 571.59 577.004 559.828 593.613 559.828 c 607.871
 559.828 621.07 569.043 621.07 593.812 c 621.07 611.43 l 621.07 638.934 
608.926 647.141 594 647.141 c 577.008 647.141 566.113 636.82 566.113 608.742
 c h
566.109 608.691 m f
Q Q
showpage
%%Trailer
%%EOF
