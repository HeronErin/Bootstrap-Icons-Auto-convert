%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:06 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 47 47 720 720
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 47 47 720 720
768 768 cairo_set_page_size
%%EndPageSetup
q 47 47 673 673 rectclip
1 0 0 -1 0 768 cm q
0 g
305.473 648 m 305.473 654.363 308 660.469 312.5 664.969 c 317.004 669.473
 323.105 672 329.473 672 c 648 672 l 667.094 672 685.41 664.414 698.91 650.91
 c 712.414 637.41 720 619.094 720 600 c 720 120 l 720 100.906 712.414 82.59
 698.91 69.09 c 685.41 55.586 667.094 48 648 48 c 168 48 l 148.906 48 130.59
 55.586 117.09 69.09 c 103.586 82.59 96 100.906 96 120 c 96 438.527 l 96
 447.102 100.574 455.027 108 459.312 c 115.426 463.602 124.574 463.602 132
 459.312 c 139.426 455.027 144 447.102 144 438.527 c 144 120 l 144 113.637
 146.527 107.531 151.031 103.031 c 155.531 98.527 161.637 96 168 96 c 648
 96 l 654.363 96 660.469 98.527 664.969 103.031 c 669.473 107.531 672 113.637
 672 120 c 672 600 l 672 606.363 669.473 612.469 664.969 616.969 c 660.469
 621.473 654.363 624 648 624 c 329.473 624 l 323.105 624 317.004 626.527
 312.5 631.031 c 308 635.531 305.473 641.637 305.473 648 c f*
528 264 m 528 257.637 525.473 251.531 520.969 247.031 c 516.469 242.527
 510.363 240 504 240 c 264 240 l 255.426 240 247.504 244.574 243.215 252
 c 238.93 259.426 238.93 268.574 243.215 276 c 247.504 283.426 255.426 288
 264 288 c 446.062 288 l 55.008 679.008 l 48.938 685.078 46.566 693.926 
48.789 702.219 c 51.012 710.512 57.488 716.988 65.781 719.211 c 74.074 721.434
 82.922 719.062 88.992 712.992 c 480 321.938 l 480 504 l 480 512.574 484.574
 520.496 492 524.785 c 499.426 529.07 508.574 529.07 516 524.785 c 523.426
 520.496 528 512.574 528 504 c h
528 264 m f*
Q Q
showpage
%%Trailer
%%EOF
