%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:08 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 95 95 1440 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 95 95 1440 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 95 95 1345 1345 rectclip
1 0 0 -1 0 1536 cm q
0 g
610.945 1296 m 610.945 1308.73 616 1320.938 625.004 1329.941 c 634.004 
1338.941 646.215 1344 658.945 1344 c 1296 1344 l 1334.191 1344 1370.816 
1328.828 1397.824 1301.824 c 1424.828 1274.816 1440 1238.191 1440 1200 c
 1440 240 l 1440 201.809 1424.828 165.184 1397.824 138.176 c 1370.816 111.172
 1334.191 96 1296 96 c 336 96 l 297.809 96 261.184 111.172 234.176 138.176
 c 207.172 165.184 192 201.809 192 240 c 192 877.055 l 192 894.203 201.148
 910.051 216 918.625 c 230.852 927.199 249.148 927.199 264 918.625 c 278.852
 910.051 288 894.203 288 877.055 c 288 240 l 288 227.27 293.059 215.062 
302.059 206.059 c 311.062 197.059 323.27 192 336 192 c 1296 192 l 1308.73
 192 1320.938 197.059 1329.941 206.059 c 1338.941 215.062 1344 227.27 1344
 240 c 1344 1200 l 1344 1212.73 1338.941 1224.938 1329.941 1233.941 c 1320.938
 1242.941 1308.73 1248 1296 1248 c 658.945 1248 l 646.215 1248 634.004 1253.059
 625.004 1262.059 c 616 1271.062 610.945 1283.27 610.945 1296 c f*
1056 528 m 1056 515.27 1050.941 503.062 1041.941 494.059 c 1032.938 485.059
 1020.73 480 1008 480 c 528 480 l 510.852 480 495.004 489.148 486.43 504
 c 477.855 518.852 477.855 537.148 486.43 552 c 495.004 566.852 510.852 
576 528 576 c 892.129 576 l 110.016 1358.016 l 97.875 1370.156 93.133 1387.855
 97.578 1404.438 c 102.02 1421.023 114.977 1433.98 131.562 1438.422 c 148.145
 1442.867 165.844 1438.125 177.984 1425.984 c 960 643.871 l 960 1008 l 960
 1025.148 969.148 1040.996 984 1049.57 c 998.852 1058.145 1017.148 1058.145
 1032 1049.57 c 1046.852 1040.996 1056 1025.148 1056 1008 c h
1056 528 m f*
Q Q
showpage
%%Trailer
%%EOF
