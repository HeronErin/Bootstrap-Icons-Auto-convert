%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 96 720 710
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 96 720 710
768 768 cairo_set_page_size
%%EndPageSetup
q 48 96 672 614 rectclip
1 0 0 -1 0 768 cm q
0 g
227.328 94.465 m 184.512 251.375 l 183.84 254.16 l 101.426 267.266 48 288.289
 48 312 c 48 351.742 198.434 384 384 384 c 569.566 384 720 351.742 720 312
 c 720 288.289 666.574 267.266 584.16 254.16 c 583.488 251.375 l 540.672
 94.414 l 533.664 68.828 507.168 53.66 481.199 59.184 c 451.727 65.426 413.762
 72 384 72 c 354.238 72 316.273 65.473 286.801 59.184 c 260.832 53.664 234.336
 68.785 227.328 94.465 c 228.047 280.082 m 228.047 280.078 l 228.363 276.91
 229.926 273.992 232.395 271.977 c 234.859 269.961 238.031 269.008 241.199
 269.328 c 284.398 273.742 332.879 276.191 384 276.191 c 431.684 276.27 
479.344 273.98 526.801 269.328 c 533.402 268.664 539.289 273.48 539.953 
280.078 c 540.613 286.68 535.801 292.57 529.199 293.23 c 485.137 297.695
 435.887 300.191 384 300.191 c 332.113 300.191 282.863 297.695 238.801 293.23
 c 235.629 292.918 232.715 291.352 230.695 288.887 c 228.68 286.418 227.727
 283.25 228.047 280.078 c 168 480 m 264 480 l 270.363 480 276.469 482.527
 280.969 487.031 c 285.473 491.531 288 497.637 288 504 c 288 552 l 288 577.723
 274.277 601.492 252 614.355 c 229.723 627.215 202.277 627.215 180 614.355
 c 157.723 601.492 144 577.723 144 552 c 144 504 l 144 497.637 146.527 491.531
 151.031 487.031 c 155.531 482.527 161.637 480 168 480 c 96 504 m 96.031
 495.551 97.391 487.551 100.078 480 c 96 480 l 87.426 480 79.504 475.426
 75.215 468 c 70.93 460.574 70.93 451.426 75.215 444 c 79.504 436.574 87.426
 432 96 432 c 264 432 l 281.531 432.004 298.461 438.398 311.609 449.996 
c 324.758 461.59 333.227 477.582 335.426 494.977 c 367.102 485.406 400.898
 485.406 432.574 494.977 c 434.773 477.582 443.242 461.59 456.391 449.996
 c 469.539 438.398 486.469 432.004 504 432 c 672 432 l 680.574 432 688.496
 436.574 692.785 444 c 697.07 451.426 697.07 460.574 692.785 468 c 688.496
 475.426 680.574 480 672 480 c 667.922 480 l 670.609 487.551 671.969 495.551
 672 504 c 672 552 l 672 594.871 649.129 634.488 612 655.922 c 574.871 677.359
 529.129 677.359 492 655.922 c 454.871 634.488 432 594.871 432 552 c 432
 545.281 l 421.922 541.922 l 397.305 533.723 370.695 533.723 346.078 541.922
 c 336 545.281 l 336 552 l 336 594.871 313.129 634.488 276 655.922 c 238.871
 677.359 193.129 677.359 156 655.922 c 118.871 634.488 96 594.871 96 552
 c h
504 480 m 600 480 l 606.363 480 612.469 482.527 616.969 487.031 c 621.473
 491.531 624 497.637 624 504 c 624 552 l 624 577.723 610.277 601.492 588
 614.355 c 565.723 627.215 538.277 627.215 516 614.355 c 493.723 601.492
 480 577.723 480 552 c 480 504 l 480 497.637 482.527 491.531 487.031 487.031
 c 491.531 482.527 497.637 480 504 480 c f*
Q Q
showpage
%%Trailer
%%EOF
