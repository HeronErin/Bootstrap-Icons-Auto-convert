%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:16 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
238.465 468 m 235.305 462.441 230.059 458.375 223.887 456.699 c 217.719
 455.027 211.137 455.883 205.602 459.078 c 200.062 462.273 196.031 467.547
 194.398 473.727 c 192.762 479.906 193.664 486.484 196.895 492 c 215.859
 524.844 243.133 552.113 275.977 571.07 c 308.82 590.031 346.078 600.008
 384 600 c 421.922 600.008 459.18 590.031 492.023 571.07 c 524.867 552.113
 552.141 524.844 571.105 492 c 574.336 486.484 575.238 479.906 573.602 473.727
 c 571.969 467.547 567.938 462.273 562.398 459.078 c 556.863 455.883 550.281
 455.027 544.113 456.699 c 537.941 458.375 532.695 462.441 529.535 468 c
 514.789 493.547 493.574 514.758 468.023 529.504 c 442.477 544.25 413.496
 552.008 384 552 c 354.504 552.008 325.523 544.25 299.977 529.504 c 274.426
 514.758 253.211 493.547 238.465 468 c 336 245.566 m 336 240 l 336 227.27
 330.941 215.062 321.941 206.059 c 312.938 197.059 300.73 192 288 192 c 
157.441 192 l 142.656 192 128.695 198.812 119.602 210.469 c 110.504 222.125
 107.289 237.324 110.879 251.664 c 125.809 311.281 l 131 332.047 142.984
 350.484 159.855 363.664 c 176.727 376.84 197.52 383.996 218.93 384 c 240
 384 l 264.129 384.008 287.371 374.926 305.109 358.57 c 322.844 342.211 
333.77 319.777 335.711 295.727 c 351.25 290.418 367.582 287.805 384 288 
c 402.863 288 419.52 291.07 432.289 295.727 c 434.23 319.777 445.156 342.211
 462.891 358.57 c 480.629 374.926 503.871 384.008 528 384 c 549.023 384 
l 570.43 383.996 591.223 376.84 608.098 363.664 c 624.969 350.484 636.953
 332.047 642.145 311.281 c 657.074 251.664 l 657.07 251.664 l 660.664 237.332
 657.453 222.141 648.367 210.488 c 639.281 198.836 625.336 192.016 610.559
 192 c 480 192 l 467.27 192 455.062 197.059 446.059 206.059 c 437.059 215.062
 432 227.27 432 240 c 432 245.566 l 416.281 241.793 400.164 239.926 384 
240 c 367.199 240 350.879 241.922 336 245.566 c f
768 384 m 768 485.844 727.543 583.516 655.527 655.527 c 583.516 727.543
 485.844 768 384 768 c 282.156 768 184.484 727.543 112.473 655.527 c 40.457
 583.516 0 485.844 0 384 c 0 282.156 40.457 184.484 112.473 112.473 c 184.484
 40.457 282.156 0 384 0 c 485.844 0 583.516 40.457 655.527 112.473 c 727.543
 184.484 768 282.156 768 384 c 720 384 m 720 294.887 684.602 209.426 621.586
 146.414 c 558.574 83.398 473.113 48 384 48 c 294.887 48 209.426 83.398 
146.414 146.414 c 83.398 209.426 48 294.887 48 384 c 48 473.113 83.398 558.574
 146.414 621.586 c 209.426 684.602 294.887 720 384 720 c 473.113 720 558.574
 684.602 621.586 621.586 c 684.602 558.574 720 473.113 720 384 c f
Q Q
showpage
%%Trailer
%%EOF
