%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:18 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
476.93 936 m 470.609 924.887 460.117 916.75 447.777 913.402 c 435.438 910.051
 422.273 911.762 411.199 918.156 c 400.129 924.547 392.062 935.094 388.797
 947.457 c 385.527 959.816 387.324 972.969 393.793 984 c 431.715 1049.684
 486.262 1104.227 551.953 1142.145 c 617.641 1180.062 692.152 1200.016 768
 1200 c 843.848 1200.016 918.359 1180.062 984.047 1142.145 c 1049.738 1104.227
 1104.285 1049.684 1142.207 984 c 1148.676 972.969 1150.473 959.816 1147.203
 947.457 c 1143.938 935.094 1135.871 924.547 1124.801 918.156 c 1113.727
 911.762 1100.562 910.051 1088.223 913.402 c 1075.883 916.75 1065.391 924.887
 1059.07 936 c 1029.574 987.09 987.145 1029.516 936.051 1059.008 c 884.953
 1088.496 826.996 1104.016 768 1104 c 709.004 1104.016 651.047 1088.496 
599.949 1059.008 c 548.855 1029.516 506.426 987.09 476.93 936 c 672 491.137
 m 672 480 l 672 454.539 661.887 430.121 643.883 412.117 c 625.879 394.113
 601.461 384 576 384 c 314.879 384 l 285.312 384 257.391 397.629 239.199
 420.941 c 221.008 444.25 214.574 474.645 221.762 503.328 c 251.617 622.559
 l 262 664.098 285.969 700.973 319.711 727.324 c 353.457 753.676 395.039
 767.992 437.855 768 c 480 768 l 528.254 768.012 574.742 749.855 610.215
 717.141 c 645.688 684.426 667.539 639.555 671.426 591.457 c 702.5 580.836
 735.164 575.609 768 576 c 805.727 576 839.039 582.145 864.574 591.457 c
 868.461 639.555 890.312 684.426 925.785 717.141 c 961.258 749.855 1007.746
 768.012 1056 768 c 1098.047 768 l 1140.863 767.992 1182.449 753.676 1216.191
 727.324 c 1249.938 700.973 1273.906 664.098 1284.289 622.559 c 1314.145
 503.328 l 1321.324 474.66 1314.902 444.285 1296.734 420.977 c 1278.562 
397.672 1250.672 384.031 1221.121 384 c 960 384 l 934.539 384 910.121 394.113
 892.117 412.117 c 874.113 430.121 864 454.539 864 480 c 864 491.137 l 832.562
 483.59 800.332 479.852 768 480 c 734.398 480 701.762 483.84 672 491.137
 c f
1536 768 m 1536 971.688 1455.086 1167.031 1311.059 1311.059 c 1167.031 
1455.086 971.688 1536 768 1536 c 564.312 1536 368.969 1455.086 224.941 1311.059
 c 80.914 1167.031 0 971.688 0 768 c 0 564.312 80.914 368.969 224.941 224.941
 c 368.969 80.914 564.312 0 768 0 c 971.688 0 1167.031 80.914 1311.059 224.941
 c 1455.086 368.969 1536 564.312 1536 768 c 1440 768 m 1440 589.773 1369.199
 418.848 1243.176 292.824 c 1117.152 166.801 946.227 96 768 96 c 589.773
 96 418.848 166.801 292.824 292.824 c 166.801 418.848 96 589.773 96 768 
c 96 946.227 166.801 1117.152 292.824 1243.176 c 418.848 1369.199 589.773
 1440 768 1440 c 946.227 1440 1117.152 1369.199 1243.176 1243.176 c 1369.199
 1117.152 1440 946.227 1440 768 c f
Q Q
showpage
%%Trailer
%%EOF
