%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:02 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
241.922 337.441 m 260.438 294.238 291.234 257.43 330.488 231.574 c 369.738
 205.719 415.719 191.957 462.719 192 c 1073.473 192 l 1169.473 192 1256.258
 249.215 1294.082 337.441 c 1370.113 514.848 l 1377.312 531.648 1390.273
 545.473 1406.594 553.633 c 1454.594 577.633 1488.672 622.273 1499.234 674.785
 c 1531.395 835.969 l 1534.594 851.457 1536.164 867.137 1536.098 883.008
 c 1536.098 922.656 l 1536.098 1000.801 1498.656 1070.785 1440.098 1114.367
 c 1440.098 1296 l 1440.098 1308.73 1435.039 1320.938 1426.039 1329.941 
c 1417.035 1338.941 1404.828 1344 1392.098 1344 c 1200.098 1344 l 1187.367
 1344 1175.156 1338.941 1166.156 1329.941 c 1157.152 1320.938 1152.098 1308.73
 1152.098 1296 c 1152.098 1167.551 l 1028.066 1172.16 888.578 1176 768.098
 1176 c 647.617 1176 508.129 1172.16 384.098 1167.551 c 384.098 1296 l 384.098
 1308.73 379.039 1320.938 370.039 1329.941 c 361.035 1338.941 348.828 1344
 336.098 1344 c 144.098 1344 l 131.367 1344 119.156 1338.941 110.156 1329.941
 c 101.152 1320.938 96.098 1308.73 96.098 1296 c 96.098 1114.367 l 37.539
 1070.781 0.098 1000.801 0.098 922.656 c 0.098 883.008 l 0.113 867.211 1.688
 851.453 4.801 835.969 c 36.961 674.688 l 47.52 622.273 81.602 577.535 129.504
 553.633 c 145.938 545.484 158.91 531.73 166.078 514.848 c 242.109 337.441
 l h
889.922 386.402 m 889.922 386.398 l 886.418 384.355 882.32 383.562 878.309
 384.156 c 874.293 384.75 870.602 386.691 867.84 389.664 c 580.801 695.617
 l 577.598 699.059 575.867 703.617 575.977 708.32 c 576.082 713.023 578.023
 717.496 581.383 720.789 c 584.738 724.082 589.25 725.934 593.953 725.953
 c 713.09 725.953 l 648.48 936.672 l 647.309 940.57 647.477 944.75 648.957
 948.543 c 650.434 952.332 653.141 955.523 656.641 957.602 c 663.84 961.73
 672.961 960.48 678.719 954.336 c 955.199 648.383 l 958.402 644.941 960.133
 640.383 960.023 635.68 c 959.918 630.977 957.977 626.504 954.617 623.211
 c 951.262 619.918 946.75 618.066 942.047 618.047 c 822.91 618.047 l 897.98
 407.328 l 897.984 407.328 l 899.152 403.43 898.988 399.25 897.508 395.457
 c 896.027 391.668 893.324 388.477 889.824 386.398 c h
889.922 386.402 m f
Q Q
showpage
%%Trailer
%%EOF
