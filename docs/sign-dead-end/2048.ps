%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:29 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
459.168 576 m 459.168 768 l 525.406 768 l 582.336 768 610.461 733.535 610.461
 671.809 c 610.465 610.078 582.719 576 525.406 576 c h
491.137 602.879 m 521.855 602.879 l 559.777 602.879 577.727 625.918 577.727
 672.191 c 577.727 718.27 559.871 741.121 521.949 741.121 c 491.133 741.121
 l h
750.719 741.121 m 662.59 741.121 l 662.59 683.328 l 745.438 683.328 l 745.441
 657.602 l 662.594 657.602 l 662.594 602.883 l 750.625 602.883 l 750.625
 576 l 630.816 576 l 630.816 768 l 750.719 768 l h
805.727 714.816 m 788.734 768 l 756.094 768 l 822.141 576 l 857.758 576
 l 923.902 768 l 890.109 768 l 873.117 714.816 l h
865.918 690.336 m 840.191 609.215 l 838.75 609.215 l 812.828 690.336 l 
h
935.617 576 m 935.617 768 l 1001.855 768 l 1058.785 768 1086.91 733.535
 1086.91 671.809 c 1086.91 610.078 1059.07 576 1001.855 576 c h
967.586 602.879 m 998.305 602.879 l 1036.129 602.879 1054.176 625.918 1054.176
 672.191 c 1054.176 718.27 1036.32 741.121 998.305 741.121 c 967.586 741.121
 l h
566.977 1029.117 m 655.008 1029.117 l 655.008 1056 l 535.199 1056 l 535.199
 864 l 655.008 864 l 655.008 890.879 l 566.977 890.879 l 566.977 945.598
 l 649.824 945.598 l 649.824 971.324 l 566.977 971.324 l h
709.922 1055.996 m 709.922 917.762 l 711.168 917.762 l 801.023 1056 l 829.055
 1056 l 829.055 864 l 798.336 864 l 798.336 1001.855 l 796.992 1001.855 
l 707.426 864 l 679.297 864 l 679.297 1056 l h
859.684 1055.996 m 859.68 864 l 925.918 864 l 983.133 864 1010.973 898.078
 1010.973 959.809 c 1010.977 1021.535 982.848 1056 925.922 1056 c h
922.371 890.875 m 891.652 890.875 l 891.652 1029.113 l 922.371 1029.113
 l 960.293 1029.113 978.148 1006.168 978.148 960.184 c 978.148 914.008 960.195
 890.871 922.371 890.871 c f
868.801 41.762 m 813.121 -13.918 722.879 -13.918 667.199 41.762 c 41.855
 667.199 l -13.824 722.879 -13.824 813.023 41.855 868.605 c 667.391 1494.141
 l 723.07 1549.82 813.215 1549.82 868.797 1494.141 c 1494.332 868.605 l 
1550.012 812.926 1550.012 722.781 1494.332 667.199 c h
734.402 108.961 m 734.398 108.961 l 743.312 100.051 755.398 95.043 768 
95.043 c 780.602 95.043 792.688 100.051 801.602 108.961 c 1427.137 734.402
 l 1427.137 734.398 l 1436.047 743.312 1441.051 755.398 1441.051 768 c 1441.051
 780.602 1436.047 792.688 1427.137 801.602 c 801.602 1427.137 l 792.688 
1436.047 780.602 1441.051 768 1441.051 c 755.398 1441.051 743.312 1436.047
 734.398 1427.137 c 108.863 801.602 l 99.953 792.688 94.949 780.602 94.949
 768 c 94.949 755.398 99.953 743.312 108.863 734.398 c 734.398 108.863 l
 h
734.402 108.961 m f
Q Q
showpage
%%Trailer
%%EOF
