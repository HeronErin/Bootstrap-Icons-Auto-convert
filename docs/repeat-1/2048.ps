%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 123 1536 1413
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 123 1536 1413
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 123 1536 1290 rectclip
1 0 0 -1 0 1536 cm q
0 g
1056 384 m 1056 524.734 l 1056.004 530.848 1058.336 536.73 1062.527 541.18
 c 1066.719 545.629 1072.449 548.312 1078.551 548.684 c 1084.652 549.051
 1090.664 547.078 1095.359 543.168 c 1321.918 354.434 l 1321.922 354.434
 l 1327.387 349.871 1330.551 343.121 1330.551 336 c 1330.551 328.879 1327.387
 322.129 1321.922 317.566 c 1095.363 128.832 l 1095.359 128.832 l 1090.664
 124.922 1084.652 122.949 1078.551 123.316 c 1072.449 123.688 1066.719 126.371
 1062.527 130.82 c 1058.336 135.27 1056.004 141.152 1056 147.266 c 1056 
288 l 480 288 l 370.59 287.969 264.453 325.32 179.172 393.859 c 93.891 462.398
 34.586 558.016 11.078 664.871 c -12.426 771.727 1.277 883.406 49.922 981.406
 c 57.566 996.773 72.832 1006.891 89.965 1007.949 c 107.094 1009.008 123.488
 1000.848 132.973 986.543 c 142.453 972.234 143.586 953.957 135.938 938.594
 c 97.062 860.199 86.129 770.879 104.945 685.422 c 123.766 599.965 171.203
 523.5 239.41 468.684 c 307.613 413.867 392.496 383.992 480 384 c h
1486.078 554.594 m 1478.434 539.227 1463.168 529.109 1446.035 528.051 c
 1428.906 526.992 1412.512 535.152 1403.027 549.457 c 1393.547 563.766 1392.414
 582.043 1400.062 597.406 c 1438.938 675.801 1449.871 765.121 1431.055 850.578
 c 1412.234 936.035 1364.797 1012.5 1296.59 1067.316 c 1228.387 1122.133
 1143.504 1152.008 1056 1152 c 480.098 1152 l 480.098 1011.266 l 480.094
 1005.152 477.758 999.27 473.57 994.82 c 469.379 990.371 463.648 987.688
 457.547 987.316 c 451.445 986.949 445.434 988.922 440.734 992.832 c 214.176
 1181.566 l 208.707 1186.129 205.547 1192.879 205.547 1200 c 205.547 1207.121
 208.707 1213.871 214.176 1218.434 c 440.734 1407.168 l 445.434 1411.078
 451.445 1413.051 457.547 1412.684 c 463.648 1412.312 469.379 1409.629 473.57
 1405.18 c 477.758 1400.73 480.094 1394.848 480.098 1388.734 c 480.098 1248
 l 1056.098 1248 l 1165.508 1248.031 1271.645 1210.68 1356.922 1142.141 
c 1442.203 1073.602 1501.512 977.984 1525.016 871.129 c 1548.523 764.273
 1534.82 652.594 1486.176 554.594 c h
1486.078 554.594 m f
864 528 m 864.023 515.254 858.973 503.02 849.969 494 c 840.961 484.977 
828.734 479.91 815.988 479.914 c 803.242 479.918 791.02 484.992 782.016 
494.016 c 614.016 662.016 l 601.875 674.156 597.133 691.855 601.578 708.438
 c 606.02 725.023 618.977 737.98 635.562 742.422 c 652.145 746.867 669.844
 742.125 681.984 729.984 c 768 643.871 l 768 1008 l 768 1025.148 777.148
 1040.996 792 1049.57 c 806.852 1058.145 825.148 1058.145 840 1049.57 c 
854.852 1040.996 864 1025.148 864 1008 c h
864 528 m f
Q Q
showpage
%%Trailer
%%EOF
