%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 61 768 707
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 61 768 707
768 768 cairo_set_page_size
%%EndPageSetup
q 0 61 768 646 rectclip
1 0 0 -1 0 768 cm q
0 g
528 192 m 528 262.367 l 528 267.023 530.695 271.258 534.91 273.23 c 539.125
 275.203 544.102 274.562 547.68 271.586 c 660.961 177.219 l 660.961 177.215
 l 663.695 174.938 665.273 171.559 665.273 168 c 665.273 164.441 663.695
 161.062 660.961 158.785 c 547.68 64.418 l 547.68 64.414 l 544.102 61.438
 539.125 60.797 534.91 62.77 c 530.695 64.742 528 68.977 528 73.633 c 528
 144 l 240 144 l 185.297 143.984 132.227 162.66 89.586 196.93 c 46.945 231.199
 17.293 279.008 5.539 332.438 c -6.215 385.863 0.637 441.703 24.961 490.703
 c 28.785 498.387 36.418 503.445 44.98 503.977 c 53.547 504.504 61.746 500.426
 66.484 493.27 c 71.227 486.117 71.793 476.98 67.969 469.297 c 48.531 430.098
 43.066 385.438 52.473 342.711 c 61.883 299.984 85.602 261.75 119.703 234.344
 c 153.809 206.934 196.25 191.996 240 192 c h
743.039 277.297 m 739.215 269.613 731.582 264.555 723.02 264.023 c 714.453
 263.496 706.254 267.574 701.516 274.73 c 696.773 281.883 696.207 291.02
 700.031 298.703 c 719.469 337.902 724.934 382.562 715.527 425.289 c 706.117
 468.016 682.398 506.25 648.297 533.656 c 614.191 561.066 571.75 576.004
 528 576 c 240.047 576 l 240.047 505.633 l 240.047 500.977 237.352 496.742
 233.137 494.77 c 228.922 492.797 223.945 493.438 220.367 496.414 c 107.086
 590.781 l 107.09 590.785 l 104.355 593.062 102.773 596.441 102.773 600 
c 102.773 603.559 104.355 606.938 107.09 609.215 c 220.371 703.582 l 220.367
 703.586 l 223.945 706.562 228.922 707.203 233.137 705.23 c 237.352 703.258
 240.047 699.023 240.047 694.367 c 240.047 624 l 528.047 624 l 582.754 624.016
 635.82 605.34 678.461 571.07 c 721.102 536.801 750.754 488.992 762.508 
435.562 c 774.262 382.137 767.41 326.297 743.09 277.297 c h
743.039 277.297 m f
432 264 m 432.012 257.625 429.488 251.512 424.984 247 c 420.48 242.488 
414.367 239.957 407.992 239.957 c 401.621 239.957 395.508 242.496 391.008
 247.008 c 307.008 331.008 l 300.938 337.078 298.566 345.926 300.789 354.219
 c 303.012 362.512 309.488 368.988 317.781 371.211 c 326.074 373.434 334.922
 371.062 340.992 364.992 c 384 321.938 l 384 504 l 384 512.574 388.574 520.496
 396 524.785 c 403.426 529.07 412.574 529.07 420 524.785 c 427.426 520.496
 432 512.574 432 504 c h
432 264 m f
Q Q
showpage
%%Trailer
%%EOF
