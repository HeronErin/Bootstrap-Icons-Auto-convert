%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:53 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 672 768 rectclip
1 0 0 -1 0 768 cm q
0 g
672 216 m 672 672 l 672 697.461 661.887 721.879 643.883 739.883 c 625.879
 757.887 601.461 768 576 768 c 528 768 l 528 720 l 576 720 l 588.73 720 
600.938 714.941 609.941 705.941 c 618.941 696.938 624 684.73 624 672 c 624
 216 l 528 216 l 508.906 216 490.59 208.414 477.09 194.91 c 463.586 181.41
 456 163.094 456 144 c 456 48 l 192 48 l 179.27 48 167.062 53.059 158.059
 62.059 c 149.059 71.062 144 83.27 144 96 c 144 528 l 96 528 l 96 96 l 96
 70.539 106.113 46.121 124.117 28.117 c 142.121 10.113 166.539 0 192 0 c
 456 0 l h
152.258 712.367 m 152.812 727.66 159.801 742.008 171.504 751.871 c 177.68
 757.055 185.328 761.086 194.449 763.969 c 203.504 766.879 214.145 768.336
 226.371 768.336 c 242.594 768.336 256.324 765.809 267.555 760.75 c 278.883
 755.695 287.523 748.652 293.477 739.629 c 293.473 739.633 l 299.523 730.262
 302.648 719.297 302.449 708.145 c 302.449 697.391 300.289 688.434 295.969
 681.266 c 291.578 674.07 285.367 668.16 277.969 664.129 c 269.473 659.414
 260.312 656.016 250.801 654.047 c 221.039 647.137 l 214.012 645.805 207.371
 642.918 201.602 638.688 c 197.16 635.262 194.598 629.941 194.688 624.336
 c 194.688 616.848 197.648 610.703 203.566 605.902 c 209.582 601.039 217.789
 598.605 228.191 598.605 c 235.008 598.605 240.91 599.695 245.902 601.871
 c 250.523 603.699 254.59 606.695 257.711 610.559 c 260.668 614.125 262.648
 618.391 263.473 622.945 c 299.473 622.945 l 298.852 613.172 295.527 603.766
 289.871 595.777 c 283.824 587.145 275.523 580.336 265.871 576.098 c 254.09
 570.906 241.301 568.414 228.434 568.801 c 214.418 568.801 202 571.199 191.188
 576 c 180.434 580.77 172.004 587.504 165.891 596.207 c 159.812 604.941 
156.77 615.168 156.77 626.879 c 156.77 636.543 158.723 644.926 162.625 652.031
 c 166.594 659.168 172.227 665.039 179.52 669.648 c 186.816 674.223 195.457
 677.633 205.441 679.871 c 235.059 686.781 l 245.012 689.117 252.418 692.207
 257.281 696.047 c 262.117 699.766 264.84 705.602 264.574 711.695 c 264.699
 716.641 263.289 721.504 260.543 725.617 c 257.453 729.828 253.199 733.047
 248.305 734.879 c 241.973 737.258 235.242 738.398 228.48 738.238 c 222.816
 738.238 217.695 737.598 213.121 736.316 c 213.121 736.32 l 208.848 735.184
 204.805 733.312 201.168 730.801 c 194.719 726.609 190.285 719.938 188.93
 712.367 c h
92.547 764.688 m 92.547 604.512 l 147.074 604.512 l 147.074 572.734 l 0
 572.734 l 0 604.512 l 54.434 604.512 l 54.434 764.688 l h
432.195 572.734 m 475.059 572.734 l 413.906 669.07 l 474.098 764.688 l 
430.465 764.688 l 389.664 696.766 l 388.031 696.766 l 347.086 764.688 l 
305.762 764.688 l 365.234 667.918 l 306.289 572.734 l 351.023 572.734 l 
390.961 641.758 l 392.641 641.758 l h
432.195 572.734 m f*
Q Q
showpage
%%Trailer
%%EOF
