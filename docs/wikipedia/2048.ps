%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:22 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 276 1536 1248
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 276 1536 1248
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 276 1536 972 rectclip
1 0 0 -1 0 1536 cm q
0 g
848.16 288.289 m 927.648 287.715 1106.207 288.289 1106.207 288.289 c 1109.375
 291.168 l 1109.375 318.816 l 1109.375 326.496 1105.117 330.336 1096.605
 330.336 c 1055.039 332.258 1046.492 336.383 1031.324 358.176 c 1022.973
 370.273 1006.555 395.902 989.562 424.801 c 843.641 697.73 l 839.512 706.273
 l 1017.879 1071.168 l 1028.727 1074.145 l 1309.621 407.328 l 1319.348 380.449
 1317.941 361.406 1305.398 350.207 c 1292.727 339.262 1283.895 332.926 1251.352
 331.488 c 1224.953 330.145 l 1224.961 330.145 l 1221.602 330.062 1218.367
 328.883 1215.742 326.785 c 1212.996 325.02 1211.332 321.984 1211.328 318.719
 c 1211.328 290.977 l 1215.359 288.098 l 1532.734 288.098 l 1536 290.977
 l 1536 318.816 l 1536 326.305 1531.742 330.047 1523.23 330.047 c 1481.629
 331.969 1450.848 340.957 1430.879 357.023 c 1409.551 375.004 1393.387 398.328
 1384.031 424.609 c 1384.031 424.609 1125.695 1015.969 1037.277 1212.578
 c 1003.391 1277.09 970.078 1271.137 940.895 1210.754 c 883.535 1089.617
 827.309 967.945 772.223 845.762 c 712.414 969.121 630.621 1136.258 590.016
 1211.523 c 550.559 1280.164 518.016 1271.234 492.094 1213.348 c 448.895
 1111.109 383.52 971.523 317.66 831.074 c 247.102 680.449 176.059 528.77
 131.133 420.961 c 115.102 382.562 103.004 357.891 91.582 348.098 c 80.062
 338.496 56.191 332.738 19.965 330.816 c 6.656 329.215 0 325.855 0 320.734
 c 0 291.645 l 3.266 288.766 l 62.305 288.477 348.289 288.766 348.289 288.766
 c 351.555 291.645 l 351.555 319.293 l 351.555 326.91 346.754 330.684 337.156
 330.621 c 301.156 332.156 l 270.246 333.438 254.789 342.652 254.789 359.805
 c 254.66 367.805 258.148 380.605 265.254 398.203 c 334.375 566.492 573.125
 1070.012 573.125 1070.012 c 581.859 1072.219 l 735.746 765.309 l 705.027
 697.148 l 599.039 489.121 l 599.039 489.121 578.59 447.555 571.582 433.73
 c 562.176 414.914 l 525.023 340.992 522.719 336.195 479.137 330.434 c 465.984
 328.801 459.168 327.074 459.168 320.641 c 459.168 291.457 l 463.105 288.578
 l 736.992 288.578 l 744.191 290.883 l 744.191 319.973 l 744.191 326.629
 739.391 329.957 729.793 329.957 c 710.016 332.836 l 659.809 336.676 667.969
 357.219 701.375 423.652 c 802.848 631.301 l 915.168 407.43 l 933.887 366.438
 930.047 356.164 922.273 346.66 c 917.859 341.379 902.883 332.836 870.434
 331.492 c 857.664 330.051 l 857.664 330.047 l 854.32 329.992 851.082 328.848
 848.449 326.785 c 845.707 324.98 844.078 321.902 844.129 318.625 c 844.129
 290.977 l 848.066 288.098 l h
848.16 288.289 m f
Q Q
showpage
%%Trailer
%%EOF
