%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:20 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 0 69 384 312
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 0 69 384 312
384 384 cairo_set_page_size
%%EndPageSetup
q 0 69 384 243 rectclip
1 0 0 -1 0 384 cm q
0 g
212.039 72.07 m 231.91 71.926 276.551 72.07 276.551 72.07 c 277.344 72.789
 l 277.344 79.699 l 277.344 81.621 276.281 82.578 274.152 82.578 c 263.762
 83.059 261.625 84.09 257.832 89.539 c 255.742 92.562 251.641 98.973 247.391
 106.195 c 210.91 174.426 l 209.879 176.562 l 254.473 267.785 l 257.184 
268.527 l 327.406 101.824 l 329.84 95.105 329.484 90.344 326.352 87.543 
c 323.184 84.809 320.977 83.223 312.84 82.863 c 306.238 82.527 l 306.238
 82.535 l 305.402 82.516 304.59 82.219 303.938 81.695 c 303.25 81.254 302.832
 80.496 302.832 79.68 c 302.832 72.742 l 303.84 72.023 l 383.184 72.023 
l 384 72.742 l 384 79.703 l 384 81.574 382.938 82.512 380.809 82.512 c 370.41
 82.992 362.711 85.238 357.719 89.254 c 357.719 89.258 l 352.387 93.75 348.348
 99.582 346.008 106.152 c 346.008 106.152 281.422 253.992 259.32 303.145
 c 250.848 319.273 242.52 317.785 235.223 302.688 c 220.883 272.402 206.828
 241.988 193.055 211.441 c 178.102 242.281 157.656 284.066 147.504 302.883
 c 137.641 320.043 129.504 317.812 123.023 303.34 c 112.223 277.781 95.879
 242.883 79.414 207.773 c 61.773 170.117 44.016 132.199 32.781 105.246 c
 28.773 95.645 25.75 89.477 22.895 87.031 c 20.016 84.633 14.047 83.191 
4.992 82.711 c 1.664 82.305 0 81.465 0 80.184 c 0 72.91 l 0.816 72.191 l
 15.578 72.121 87.074 72.191 87.074 72.191 c 87.891 72.91 l 87.891 79.82
 l 87.891 81.723 86.691 82.668 84.289 82.652 c 75.289 83.035 l 67.562 83.355
 63.695 85.66 63.695 89.945 c 63.664 91.945 64.535 95.145 66.312 99.547 
c 83.594 141.617 143.281 267.5 143.281 267.5 c 145.465 268.051 l 183.938
 191.324 l 176.258 174.285 l 149.762 122.281 l 149.762 122.281 144.648 111.891
 142.898 108.434 c 140.547 103.73 l 131.258 85.25 130.684 84.051 119.785
 82.609 c 116.496 82.203 114.793 81.77 114.793 80.16 c 114.793 72.863 l 
115.777 72.145 l 184.25 72.145 l 186.051 72.719 l 186.051 79.992 l 186.051
 81.656 184.852 82.488 182.449 82.488 c 177.504 83.207 l 164.953 84.168 
166.992 89.305 175.344 105.91 c 200.711 157.82 l 228.789 101.852 l 233.469
 91.605 232.508 89.035 230.566 86.66 c 229.461 85.34 225.719 83.203 217.605
 82.867 c 214.414 82.508 l 214.414 82.512 l 213.578 82.5 212.77 82.211 212.113
 81.695 c 211.426 81.246 211.02 80.477 211.031 79.656 c 211.031 72.746 l
 212.016 72.027 l h
212.039 72.07 m f
Q Q
showpage
%%Trailer
%%EOF
