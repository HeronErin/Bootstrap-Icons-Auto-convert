%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:34:51 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
0 768 m 0 564.312 80.914 368.969 224.941 224.941 c 368.969 80.914 564.312
 0 768 0 c 971.688 0 1167.031 80.914 1311.059 224.941 c 1455.086 368.969
 1536 564.312 1536 768 c 1536 971.688 1455.086 1167.031 1311.059 1311.059
 c 1167.031 1455.086 971.688 1536 768 1536 c 564.312 1536 368.969 1455.086
 224.941 1311.059 c 80.914 1167.031 0 971.688 0 768 c 720 103.391 m 655.68
 122.977 591.84 182.109 538.848 281.469 c 538.848 281.473 l 521.398 314.508
 506.383 348.777 493.922 384 c 720 384 l h
392.641 384 m 408.656 333.012 429.219 283.566 454.078 236.258 c 470.789
 204.934 489.953 174.984 511.391 146.688 c 392.461 196.039 290.133 278.383
 216.48 384 c h
336.77 720 m 339.648 635.809 350.016 555.07 366.723 480 c 160.703 480 l
 124.996 555.398 103.641 636.785 97.727 720 c h
465.312 480 m 446.43 558.699 435.559 639.109 432.863 720 c 720 720 l 720
 480 l h
816 480 m 816 720 l 1103.039 720 l 1100.375 639.113 1089.539 558.703 1070.688
 480 c h
432.961 816 m 435.625 896.887 446.461 977.297 465.312 1056 c 720 1056 l
 720 816 l h
816 816 m 816 1056 l 1070.688 1056 l 1088.641 982.559 1100.062 901.633 
1103.137 816 c h
493.922 1152 m 507.234 1189.121 522.211 1223.297 538.852 1254.527 c 591.844
 1353.887 655.781 1412.926 720.004 1432.605 c 720 1152 l h
511.395 1389.312 m 511.391 1389.312 l 489.953 1361.016 470.789 1331.066
 454.078 1299.742 c 429.219 1252.434 408.656 1202.988 392.641 1152 c 216.48
 1152 l 290.012 1257.73 392.379 1340.102 511.391 1389.312 c 366.719 1056
 m 349.387 977.09 339.359 896.75 336.77 816 c 97.73 816 l 103.684 901.441
 125.668 982.367 160.707 1056 c h
1024.605 1389.312 m 1024.609 1389.312 l 1143.621 1340.102 1245.988 1257.73
 1319.52 1152 c 1143.359 1152 l 1127.344 1202.988 1106.781 1252.434 1081.922
 1299.742 c 1065.211 1331.066 1046.047 1361.016 1024.609 1389.312 c 816 
1152 m 816 1432.609 l 880.32 1413.023 944.16 1353.891 997.152 1254.531 c
 1013.793 1223.363 1028.77 1189.188 1042.082 1152.004 c h
1169.281 1056 m 1375.297 1056 l 1410.336 982.367 1432.32 901.441 1438.273
 816 c 1199.23 816 l 1196.641 896.75 1186.613 977.09 1169.281 1056 c 1438.273
 720 m 1432.359 636.785 1411.004 555.398 1375.297 480 c 1169.281 480 l 1185.984
 555.07 1196.352 635.809 1199.234 720 c h
1081.922 236.258 m 1105.633 280.801 1126.273 330.336 1143.363 384 c 1319.523
 384 l 1319.52 384 l 1245.988 278.27 1143.621 195.898 1024.609 146.688 c
 1045.539 173.953 1064.738 204.094 1081.922 236.254 c 1042.078 384 m 1029.617
 348.777 1014.602 314.508 997.152 281.473 c 944.16 182.113 880.32 123.07
 816 103.391 c 816 384 l h
1042.078 384 m f
Q Q
showpage
%%Trailer
%%EOF
