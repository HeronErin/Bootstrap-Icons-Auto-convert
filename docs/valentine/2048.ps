%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:48 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1529
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1529
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1337 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 575.328 m 927.742 411.07 1327.199 698.496 768 1068 c 208.801 698.398
 608.258 411.07 768 575.328 c 216 384 m 209.637 384 203.531 386.527 199.031
 391.031 c 194.527 395.531 192 401.637 192 408 c 192 552 l 192 560.574 196.574
 568.496 204 572.785 c 211.426 577.07 220.574 577.07 228 572.785 c 235.426
 568.496 240 560.574 240 552 c 240 432 l 360 432 l 368.574 432 376.496 427.426
 380.785 420 c 385.07 412.574 385.07 403.426 380.785 396 c 376.496 388.574
 368.574 384 360 384 c h
1176 384 m 1167.426 384 1159.504 388.574 1155.215 396 c 1150.93 403.426
 1150.93 412.574 1155.215 420 c 1159.504 427.426 1167.426 432 1176 432 c
 1296 432 l 1296 552 l 1296 560.574 1300.574 568.496 1308 572.785 c 1315.426
 577.07 1324.574 577.07 1332 572.785 c 1339.426 568.496 1344 560.574 1344
 552 c 1344 408 l 1344 401.637 1341.473 395.531 1336.969 391.031 c 1332.469
 386.527 1326.363 384 1320 384 c h
240 984 m 240 975.426 235.426 967.504 228 963.215 c 220.574 958.93 211.426
 958.93 204 963.215 c 196.574 967.504 192 975.426 192 984 c 192 1128 l 192
 1141.246 202.754 1152 216 1152 c 360 1152 l 368.574 1152 376.496 1147.426
 380.785 1140 c 385.07 1132.574 385.07 1123.426 380.785 1116 c 376.496 1108.574
 368.574 1104 360 1104 c 240 1104 l h
1344 984 m 1344 975.426 1339.426 967.504 1332 963.215 c 1324.574 958.93
 1315.426 958.93 1308 963.215 c 1300.574 967.504 1296 975.426 1296 984 c
 1296 1104 l 1176 1104 l 1167.426 1104 1159.504 1108.574 1155.215 1116 c
 1150.93 1123.426 1150.93 1132.574 1155.215 1140 c 1159.504 1147.426 1167.426
 1152 1176 1152 c 1320 1152 l 1326.363 1152 1332.469 1149.473 1336.969 1144.969
 c 1341.473 1140.469 1344 1134.363 1344 1128 c h
1344 984 m f
0 287.426 m 0 281.664 l 0 258.547 8.34 236.211 23.488 218.75 c 38.641 201.289
 59.578 189.883 82.465 186.625 c 1330.465 8.352 l 1358.008 4.43 1385.898
 12.648 1406.914 30.883 c 1427.93 49.117 1440 75.57 1440 103.391 c 1440 
192 l 1465.461 192 1489.879 202.113 1507.883 220.117 c 1525.887 238.121 
1536 262.539 1536 288 c 1536 1248 l 1536 1273.461 1525.887 1297.879 1507.883
 1315.883 c 1489.879 1333.887 1465.461 1344 1440 1344 c 96 1344 l 70.539
 1344 46.121 1333.887 28.117 1315.883 c 10.113 1297.879 0 1273.461 0 1248
 c h
96 288 m 96 1248 l 1440 1248 l 1440 288 l h
96 288 m f*
Q Q
showpage
%%Trailer
%%EOF
