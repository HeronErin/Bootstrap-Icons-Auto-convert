%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:20:32 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 96 95 1440 1441
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 96 95 1440 1441
1536 1536 cairo_set_page_size
%%EndPageSetup
q 96 95 1344 1346 rectclip
1 0 0 -1 0 1536 cm q
0 g
350.016 974.016 m 359.02 964.988 371.25 959.914 384 959.914 c 396.75 959.914
 408.98 964.988 417.984 974.016 c 768 1324.129 l 1118.016 974.016 l 1130.156
 961.875 1147.855 957.133 1164.438 961.578 c 1181.023 966.02 1193.98 978.977
 1198.422 995.562 c 1202.867 1012.145 1198.125 1029.844 1185.984 1041.984
 c 801.984 1425.984 l 792.98 1435.012 780.75 1440.086 768 1440.086 c 755.25
 1440.086 743.02 1435.012 734.016 1425.984 c 350.016 1041.984 l 340.988 
1032.98 335.914 1020.75 335.914 1008 c 335.914 995.25 340.988 983.02 350.016
 974.016 c 350.016 561.984 m 359.02 571.012 371.25 576.086 384 576.086 c
 396.75 576.086 408.98 571.012 417.984 561.984 c 768 211.871 l 1118.016 
561.984 l 1130.156 574.125 1147.855 578.867 1164.438 574.422 c 1181.023 
569.98 1193.98 557.023 1198.422 540.438 c 1202.867 523.855 1198.125 506.156
 1185.984 494.016 c 801.984 110.016 l 792.98 100.988 780.75 95.914 768 95.914
 c 755.25 95.914 743.02 100.988 734.016 110.016 c 350.016 494.016 l 340.988
 503.02 335.914 515.25 335.914 528 c 335.914 540.75 340.988 552.98 350.016
 561.984 c 96 768 m 96 755.27 101.059 743.062 110.059 734.059 c 119.062 
725.059 131.27 720 144 720 c 1392 720 l 1409.148 720 1424.996 729.148 1433.57
 744 c 1442.145 758.852 1442.145 777.148 1433.57 792 c 1424.996 806.852 
1409.148 816 1392 816 c 144 816 l 131.27 816 119.062 810.941 110.059 801.941
 c 101.059 792.938 96 780.73 96 768 c f*
Q Q
showpage
%%Trailer
%%EOF
