%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:29:40 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 96 1506 1440
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 96 1506 1440
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 96 1506 1344 rectclip
1 0 0 -1 0 1536 cm q
0 g
1505.566 288 m 1505.566 254.297 1496.695 221.188 1479.844 192 c 1462.992
 162.812 1438.754 138.574 1409.566 121.723 c 1380.379 104.871 1347.27 96
 1313.566 96 c 633.887 96 l 606.188 95.988 578.809 101.973 553.641 113.539
 c 528.469 125.105 506.098 141.98 488.062 163.008 c 23.137 705.602 l 8.211
 723.004 0.008 745.172 0.008 768.098 c 0.008 791.02 8.211 813.191 23.137
 830.594 c 488.066 1372.992 l 488.062 1372.992 l 506.098 1394.02 528.469
 1410.895 553.641 1422.461 c 578.809 1434.027 606.188 1440.012 633.887 1440
 c 1313.566 1440 l 1347.27 1440 1380.379 1431.129 1409.566 1414.277 c 1438.754
 1397.426 1462.992 1373.188 1479.844 1344 c 1496.695 1314.812 1505.566 1281.703
 1505.566 1248 c h
559.586 561.984 m 550.57 552.984 545.504 540.77 545.492 528.035 c 545.484
 515.297 550.535 503.078 559.535 494.062 c 568.535 485.051 580.75 479.98
 593.484 479.973 c 606.223 479.965 618.441 485.016 627.457 494.016 c 833.57
 700.129 l 1039.586 494.016 l 1051.727 481.891 1069.414 477.164 1085.984
 481.617 c 1102.555 486.07 1115.488 499.027 1119.918 515.602 c 1124.348 
532.18 1119.598 549.859 1107.457 561.984 c 901.441 768 l 1107.457 974.016
 l 1119.598 986.141 1124.348 1003.82 1119.918 1020.398 c 1115.488 1036.973
 1102.555 1049.93 1085.984 1054.383 c 1069.414 1058.836 1051.727 1054.109
 1039.586 1041.984 c 833.566 835.871 l 627.453 1041.984 l 627.457 1041.984
 l 615.316 1054.109 597.629 1058.836 581.059 1054.383 c 564.488 1049.93 
551.551 1036.973 547.121 1020.398 c 542.691 1003.82 547.441 986.141 559.586
 974.016 c 765.695 768 l h
559.586 561.984 m f
Q Q
showpage
%%Trailer
%%EOF
