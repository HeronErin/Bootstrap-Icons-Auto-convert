%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:18 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 2 2 1534 1534
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 2 2 1534 1534
1536 1536 cairo_set_page_size
%%EndPageSetup
q 2 2 1532 1532 rectclip
1 0 0 -1 0 1536 cm q
0 g
16.512 1519.488 m 25.512 1528.488 37.719 1533.543 50.449 1533.543 c 63.176
 1533.543 75.383 1528.488 84.383 1519.488 c 477.598 1126.273 l 477.602 1392
 l 477.602 1409.148 486.75 1424.996 501.602 1433.57 c 516.453 1442.145 534.75
 1442.145 549.602 1433.57 c 564.453 1424.996 573.602 1409.148 573.602 1392
 c 573.602 1010.398 l 573.602 997.668 568.543 985.461 559.543 976.457 c 
550.539 967.457 538.332 962.398 525.602 962.398 c 144 962.398 l 126.852 
962.398 111.004 971.547 102.43 986.398 c 93.855 1001.25 93.855 1019.547 
102.43 1034.398 c 111.004 1049.25 126.852 1058.398 144 1058.398 c 409.727
 1058.398 l 16.512 1451.617 l 7.512 1460.617 2.457 1472.824 2.457 1485.551
 c 2.457 1498.281 7.512 1510.488 16.512 1519.488 c 1519.488 16.512 m 1510.488
 7.512 1498.281 2.457 1485.551 2.457 c 1472.824 2.457 1460.617 7.512 1451.617
 16.512 c 1058.402 409.727 l 1058.398 144 l 1058.398 126.852 1049.25 111.004
 1034.398 102.43 c 1019.547 93.855 1001.25 93.855 986.398 102.43 c 971.547
 111.004 962.398 126.852 962.398 144 c 962.398 525.602 l 962.398 538.332
 967.457 550.539 976.457 559.543 c 985.461 568.543 997.668 573.602 1010.398
 573.602 c 1392 573.602 l 1409.148 573.602 1424.996 564.453 1433.57 549.602
 c 1442.145 534.75 1442.145 516.453 1433.57 501.602 c 1424.996 486.75 1409.148
 477.602 1392 477.602 c 1126.273 477.602 l 1519.488 84.383 l 1528.488 75.383
 1533.543 63.176 1533.543 50.449 c 1533.543 37.719 1528.488 25.512 1519.488
 16.512 c f*
Q Q
showpage
%%Trailer
%%EOF
