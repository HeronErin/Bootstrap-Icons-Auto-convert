%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:30:48 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 432 0 1104 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 432 0 1104 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 432 0 672 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
768 1344 m 819.445 1344 866.984 1316.555 892.707 1272 c 918.43 1227.445
 918.43 1172.555 892.707 1128 c 866.984 1083.445 819.445 1056 768 1056 c
 716.555 1056 669.016 1083.445 643.293 1128 c 617.57 1172.555 617.57 1227.445
 643.293 1272 c 669.016 1316.555 716.555 1344 768 1344 c f
768 0 m 704.348 0 643.305 25.285 598.293 70.293 c 553.285 115.305 528 176.348
 528 240 c 528 964.801 l 465.91 1028.168 431.402 1113.523 432.008 1202.238
 c 432.613 1290.953 468.277 1375.828 531.223 1438.344 c 594.168 1500.863
 679.285 1535.949 768 1535.949 c 856.715 1535.949 941.832 1500.863 1004.777
 1438.344 c 1067.723 1375.828 1103.387 1290.953 1103.992 1202.238 c 1104.598
 1113.523 1070.09 1028.168 1008 964.801 c 1008 240 l 1008 197.871 996.91
 156.484 975.848 120 c 954.781 83.516 924.484 53.219 888 32.152 c 851.516
 11.09 810.129 0 768 0 c 624 240 m 624 188.555 651.445 141.016 696 115.293
 c 740.555 89.57 795.445 89.57 840 115.293 c 884.555 141.016 912 188.555
 912 240 c 912 1006.754 l 928.031 1021.152 l 964.266 1053.555 989.805 1096.195
 1001.273 1143.43 c 1012.742 1190.664 1009.594 1240.27 992.254 1285.68 c
 974.91 1331.09 944.188 1370.16 904.152 1397.727 c 864.117 1425.293 816.656
 1440.051 768.047 1440.051 c 719.441 1440.051 671.977 1425.293 631.941 1397.727
 c 591.906 1370.16 561.184 1331.09 543.844 1285.68 c 526.5 1240.27 523.355
 1190.664 534.824 1143.43 c 546.289 1096.195 571.832 1053.555 608.062 1021.152
 c 624 1006.754 l h
624 240 m f
Q Q
showpage
%%Trailer
%%EOF
