%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:24:23 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 0 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 0 1536 1536 rectclip
1 0 0 -1 0 1536 cm q
0 g
9.793 213.406 m -7.598 278.84 -1.414 348.301 27.262 409.633 c 55.938 470.961
 105.277 520.246 166.637 548.855 c 227.996 577.465 297.469 583.574 362.879
 566.113 c 971.613 1166.305 l 971.617 1166.305 l 954.688 1223.809 956.109
 1285.164 975.676 1341.824 c 995.246 1398.484 1031.992 1447.637 1080.801
 1482.441 c 1129.609 1517.242 1188.055 1535.965 1248 1536 c 1303.195 1535.922
 1357.211 1519.984 1403.605 1490.086 c 1450.004 1460.184 1486.832 1417.582
 1509.707 1367.348 c 1532.578 1317.113 1540.535 1261.363 1532.625 1206.734
 c 1524.719 1152.105 1501.277 1100.902 1465.098 1059.219 c 1428.914 1017.531
 1381.516 987.125 1328.543 971.609 c 1275.57 956.098 1219.258 956.133 1166.305
 971.711 c 566.113 362.977 l 583.66 297.539 577.605 228.012 549.02 166.59
 c 520.43 105.168 471.129 55.773 409.762 27.066 c 348.395 -1.637 278.879
 -7.82 213.406 9.602 c 418.941 215.234 l 384 384 l 215.328 418.945 l h
1293.312 1079.23 m 1344 1081.727 l 1371.551 1124.445 l 1414.27 1151.996
 l 1416.766 1202.781 l 1440 1248 l 1416.77 1293.215 l 1414.273 1344 l 1371.555
 1371.551 l 1344.004 1414.27 l 1293.219 1416.766 l 1248 1440 l 1202.785 
1416.77 l 1152 1414.273 l 1124.449 1371.555 l 1081.73 1344.004 l 1079.234
 1293.219 l 1056 1248 l 1079.23 1202.785 l 1081.727 1152 l 1124.445 1124.449
 l 1151.996 1081.73 l 1202.781 1079.234 l 1248 1056 l h
1293.312 1079.23 m f
Q Q
showpage
%%Trailer
%%EOF
