%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:25:21 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 48 1 720 746
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 48 1 720 746
768 768 cairo_set_page_size
%%EndPageSetup
q 48 1 672 745 rectclip
1 0 0 -1 0 768 cm q
0 g
238.945 41.039 m 237.324 34.695 233.176 29.285 227.473 26.07 c 221.766 
22.855 214.992 22.113 208.723 24.016 c 202.457 25.918 197.238 30.297 194.281
 36.141 c 191.32 41.984 190.879 48.781 193.055 54.961 c 212.734 119.855 
l 168.68 164.734 143.996 225.109 144 288 c 624 288 l 624.004 225.109 599.32
 164.734 555.266 119.855 c 574.945 54.961 l 577.121 48.781 576.68 41.984
 573.719 36.141 c 570.762 30.297 565.543 25.918 559.277 24.016 c 553.008
 22.113 546.234 22.855 540.527 26.07 c 534.824 29.285 530.676 34.695 529.055
 41.039 c 515.086 86.926 l 515.09 86.93 l 476.09 61.516 430.547 47.988 384
 48 c 337.453 47.988 291.91 61.516 252.91 86.93 c 238.988 41.043 l h
238.945 41.039 m f
624 288 m 624 336 l 408 336 l 408 766.801 l 467.199 760.852 522.078 733.125
 561.988 689 c 601.902 644.875 624 587.496 624 528 c 648 528 l 654.363 528
 660.469 530.527 664.969 535.031 c 669.473 539.531 672 545.637 672 552 c
 672 576 l 672 584.574 676.574 592.496 684 596.785 c 691.426 601.07 700.574
 601.07 708 596.785 c 715.426 592.496 720 584.574 720 576 c 720 552 l 720
 532.906 712.414 514.59 698.91 501.09 c 685.41 487.586 667.094 480 648 480
 c 624 480 l 624 432 l 696 432 l 704.574 432 712.496 427.426 716.785 420
 c 721.07 412.574 721.07 403.426 716.785 396 c 712.496 388.574 704.574 384
 696 384 c 624 384 l 624 336 l 648 336 l 667.094 336 685.41 328.414 698.91
 314.91 c 712.414 301.41 720 283.094 720 264 c 720 240 l 720 231.426 715.426
 223.504 708 219.215 c 700.574 214.93 691.426 214.93 684 219.215 c 676.574
 223.504 672 231.426 672 240 c 672 264 l 672 270.363 669.473 276.469 664.969
 280.969 c 660.469 285.473 654.363 288 648 288 c h
360 766.801 m 360 336 l 144 336 l 144 288 l 120 288 l 113.637 288 107.531
 285.473 103.031 280.969 c 98.527 276.469 96 270.363 96 264 c 96 240 l 96
 231.426 91.426 223.504 84 219.215 c 76.574 214.93 67.426 214.93 60 219.215
 c 52.574 223.504 48 231.426 48 240 c 48 264 l 48 283.094 55.586 301.41 
69.09 314.91 c 82.59 328.414 100.906 336 120 336 c 144 336 l 144 384 l 72
 384 l 63.426 384 55.504 388.574 51.215 396 c 46.93 403.426 46.93 412.574
 51.215 420 c 55.504 427.426 63.426 432 72 432 c 144 432 l 144 480 l 120
 480 l 100.906 480 82.59 487.586 69.09 501.09 c 55.586 514.59 48 532.906
 48 552 c 48 576 l 48 584.574 52.574 592.496 60 596.785 c 67.426 601.07 
76.574 601.07 84 596.785 c 91.426 592.496 96 584.574 96 576 c 96 552 l 96
 545.637 98.527 539.531 103.031 535.031 c 107.531 530.527 113.637 528 120
 528 c 144 528 l 144 587.496 166.098 644.875 206.012 689 c 245.922 733.125
 300.801 760.852 360 766.801 c f
Q Q
showpage
%%Trailer
%%EOF
