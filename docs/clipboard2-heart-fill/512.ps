%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:35:27 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 135x135mm 384 384 0 () ()
%%BoundingBox: 50 0 339 384
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 135x135mm
%%PageBoundingBox: 50 0 339 384
384 384 cairo_set_page_size
%%EndPageSetup
q 50 0 289 384 rectclip
1 0 0 -1 0 384 cm q
0 g
241.391 12.023 m 241.398 8.836 240.137 5.777 237.887 3.523 c 235.633 1.266
 232.578 0 229.391 0 c 157.871 0 l 151.246 0 145.871 5.398 145.871 12.023
 c 145.859 18.605 140.547 23.949 133.969 24 c 127.379 24 122.039 29.34 122.039
 35.93 c 122.039 48 l 122.039 51.184 123.305 54.234 125.555 56.484 c 127.805
 58.734 130.855 60 134.039 60 c 253.273 60 l 256.453 60 259.508 58.734 261.758
 56.484 c 264.008 54.234 265.273 51.184 265.273 48 c 265.273 35.93 l 265.273
 32.762 264.012 29.723 261.77 27.484 c 259.527 25.246 256.488 23.992 253.32
 24 c 246.73 23.961 241.406 18.613 241.391 12.023 c f*
100.176 24 m 86.496 24 l 76.949 24 67.793 27.793 61.039 34.543 c 54.289
 41.297 50.496 50.453 50.496 60 c 50.496 348 l 50.496 357.547 54.289 366.703
 61.039 373.457 c 67.793 380.207 76.949 384 86.496 384 c 302.496 384 l 312.043
 384 321.199 380.207 327.953 373.457 c 334.703 366.703 338.496 357.547 338.496
 348 c 338.496 60 l 338.496 50.453 334.703 41.297 327.953 34.543 c 321.199
 27.793 312.043 24 302.496 24 c 287.09 24 l 288.434 27.777 289.113 31.777
 289.129 36 c 289.129 48 l 289.129 67.871 273.098 84 253.32 84 c 133.945
 84 l 124.426 83.969 115.309 80.16 108.602 73.406 c 101.891 66.656 98.133
 57.52 98.16 48 c 98.16 36 l 98.176 31.777 98.855 27.777 100.199 24 c h
193.633 155.566 m 233.375 115.414 332.711 185.664 193.633 276 c 54.555 
185.664 153.891 115.441 193.633 155.566 c f*
Q Q
showpage
%%Trailer
%%EOF
