%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:28:13 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 96 0 672 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 96 0 672 768
768 768 cairo_set_page_size
%%EndPageSetup
q 96 0 576 768 rectclip
1 0 0 -1 0 768 cm q
0 g
576 0 m 192 0 l 166.539 0 142.121 10.113 124.117 28.117 c 106.113 46.121
 96 70.539 96 96 c 96 672 l 96 697.461 106.113 721.879 124.117 739.883 c
 142.121 757.887 166.539 768 192 768 c 576 768 l 601.461 768 625.879 757.887
 643.883 739.883 c 661.887 721.879 672 697.461 672 672 c 672 96 l 672 70.539
 661.887 46.121 643.883 28.117 c 625.879 10.113 601.461 0 576 0 c 408 216
 m 408 246.434 l 434.352 231.219 l 434.352 231.215 l 439.867 227.984 446.445
 227.082 452.625 228.719 c 458.805 230.352 464.078 234.383 467.273 239.922
 c 470.473 245.457 471.328 252.039 469.652 258.207 c 467.977 264.379 463.91
 269.625 458.352 272.785 c 432 288 l 458.352 303.215 l 463.91 306.375 467.977
 311.621 469.652 317.793 c 471.328 323.961 470.473 330.543 467.273 336.078
 c 464.078 341.617 458.805 345.648 452.625 347.281 c 446.445 348.918 439.867
 348.016 434.352 344.785 c 408 329.566 l 408 360 l 408 368.574 403.426 376.496
 396 380.785 c 388.574 385.07 379.426 385.07 372 380.785 c 364.574 376.496
 360 368.574 360 360 c 360 329.566 l 333.648 344.781 l 333.648 344.785 l
 328.133 348.016 321.555 348.918 315.375 347.281 c 309.195 345.648 303.922
 341.617 300.727 336.078 c 297.527 330.543 296.672 323.961 298.348 317.793
 c 300.023 311.621 304.09 306.375 309.648 303.215 c 336 288 l 309.648 272.785
 l 302.285 268.465 297.766 260.562 297.785 252.027 c 297.805 243.488 302.355
 235.605 309.738 231.32 c 317.125 227.035 326.227 226.996 333.648 231.215
 c 360 246.43 l 360 216 l 360 207.426 364.574 199.504 372 195.215 c 379.426
 190.93 388.574 190.93 396 195.215 c 403.426 199.504 408 207.426 408 216
 c 264 432 m 504 432 l 512.574 432 520.496 436.574 524.785 444 c 529.07 
451.426 529.07 460.574 524.785 468 c 520.496 475.426 512.574 480 504 480
 c 264 480 l 255.426 480 247.504 475.426 243.215 468 c 238.93 460.574 238.93
 451.426 243.215 444 c 247.504 436.574 255.426 432 264 432 c 264 528 m 504
 528 l 512.574 528 520.496 532.574 524.785 540 c 529.07 547.426 529.07 556.574
 524.785 564 c 520.496 571.426 512.574 576 504 576 c 264 576 l 255.426 576
 247.504 571.426 243.215 564 c 238.93 556.574 238.93 547.426 243.215 540
 c 247.504 532.574 255.426 528 264 528 c f
Q Q
showpage
%%Trailer
%%EOF
