%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:21:05 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
338.543 541.246 m 340.539 537.266 343.602 533.918 347.391 531.578 c 351.18
 529.238 355.547 528 360 528 c 408 528 l 415.711 528.004 422.949 531.715
 427.457 537.973 c 431.961 544.227 433.188 552.27 430.754 559.586 c 417.312
 600 l 456 600 l 462.051 600.008 467.879 602.305 472.309 606.426 c 476.742
 610.547 479.453 616.191 479.898 622.227 c 480.348 628.266 478.496 634.246
 474.719 638.977 c 378.719 758.977 l 374.117 764.691 367.156 767.988 359.816
 767.926 c 352.48 767.863 345.574 764.445 341.07 758.648 c 336.57 752.855
 334.965 745.316 336.719 738.191 c 353.281 672 l 312 672 l 303.68 672 295.949
 667.688 291.578 660.609 c 287.207 653.527 286.816 644.688 290.543 637.246
 c h
643.438 193.293 m 643.441 193.297 l 633.473 143.047 607.691 97.305 569.867
 62.758 c 532.039 28.211 484.156 6.672 433.211 1.285 c 382.27 -4.098 330.938
 6.957 286.727 32.832 c 242.516 58.707 207.742 98.051 187.488 145.105 c 
157.125 141.605 126.379 146.457 98.57 159.137 c 70.758 171.816 46.934 191.844
 29.66 217.059 c 12.387 242.277 2.32 271.727 0.547 302.242 c -1.23 332.754
 5.352 363.172 19.582 390.223 c 33.816 417.273 55.156 439.93 81.309 455.746
 c 107.461 471.566 137.434 479.953 168 480 c 624 480 l 673.172 480.055 718.969
 455.02 745.469 413.602 c 771.965 372.18 775.496 320.102 754.832 275.484
 c 734.168 230.867 692.168 199.879 643.441 193.297 c f
Q Q
showpage
%%Trailer
%%EOF
