%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:31:34 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 192 1536 1344
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 192 1536 1344
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 192 1536 1152 rectclip
1 0 0 -1 0 1536 cm q
0 g
374.398 634.078 m 374.398 683.039 413.277 717.215 465.598 717.215 c 517.918
 717.215 556.316 683.039 556.316 634.078 c 556.316 585.117 517.918 552.285
 465.598 552.285 c 413.277 552.285 374.398 585.215 374.398 634.078 c 355.965
 890.207 m 355.965 946.75 403.195 984.672 465.598 984.672 c 527.613 984.672
 575.324 946.75 575.324 890.207 c 575.328 833.664 527.617 794.879 465.602
 794.879 c 403.203 794.879 355.969 833.664 355.969 890.207 c f
192 192 m 141.078 192 92.242 212.227 56.234 248.234 c 20.227 284.242 0 
333.078 0 384 c 0 1152 l 0 1185.703 8.871 1218.812 25.723 1248 c 42.574 
1277.188 66.812 1301.426 96 1318.277 c 125.188 1335.129 158.297 1344 192
 1344 c 1344 1344 l 1377.703 1344 1410.812 1335.129 1440 1318.277 c 1469.188
 1301.426 1493.426 1277.188 1510.277 1248 c 1527.129 1218.812 1536 1185.703
 1536 1152 c 1536 384 l 1536 350.297 1527.129 317.188 1510.277 288 c 1493.426
 258.812 1469.188 234.574 1440 217.723 c 1410.812 200.871 1377.703 192 1344
 192 c h
688.32 897.406 m 688.32 997.344 599.328 1066.941 464.352 1066.941 c 329.375
 1066.941 242.398 997.82 242.398 897.789 c 242.398 806.203 310.75 764.926
 363.07 754.363 c 363.07 749.273 l 314.109 734.488 265.148 695.707 265.148
 621.496 c 265.148 533.754 344.926 469.145 465.598 469.145 c 585.887 469.145
 665.566 533.754 665.566 621.496 c 665.566 696.566 615.359 734.969 567.645
 749.273 c 567.645 754.363 l 619.965 764.922 688.316 806.684 688.316 897.402
 c 1161.793 480 m 1287.168 480 l 1081.727 728.062 l 1296 1055.902 l 1158.91
 1055.902 l 997.727 804 l 938.688 871.105 l 938.688 1055.906 l 824.641 1055.902
 l 824.641 480 l 938.594 480 l 938.594 737.762 l 944.066 737.762 l h
1161.793 480 m f
Q Q
showpage
%%Trailer
%%EOF
