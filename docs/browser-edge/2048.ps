%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:12 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 542x542mm 1536 1536 0 () ()
%%BoundingBox: 0 4 1536 1536
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 542x542mm
%%PageBoundingBox: 0 4 1536 1536
1536 1536 cairo_set_page_size
%%EndPageSetup
q 0 4 1536 1532 rectclip
1 0 0 -1 0 1536 cm q
0 g
910.273 896.734 m 903.648 902.688 893.953 911.422 893.953 926.398 c 893.953
 941.949 904.227 957.598 922.754 970.176 c 1006.945 1029.023 1164.77 1022.016
 1171.586 1021.824 c 1171.777 1021.824 l 1235.809 1021.824 1298.496 1004.543
 1353.602 972 c 1409.008 939.562 1454.984 893.219 1486.977 837.551 c 1518.969
 781.887 1535.867 718.828 1536 654.625 c 1537.727 528.289 1493.762 441.695
 1472.062 398.883 c 1468.223 391.203 l 1340.449 142.754 1066.176 0 768 0
 c 609.938 0 455.723 48.77 326.402 139.66 c 197.078 230.547 98.953 359.121
 45.406 507.84 c 142.848 388.609 305.566 313.152 480 313.152 c 751.68 313.152
 960.961 494.113 960.961 773.664 c 960.578 773.664 l 960.578 773.855 l 960.578
 806.305 944.449 853.727 913.824 893.281 c 914.398 892.707 l h
910.273 896.734 m f
0.961 744.289 m -2.23 864.816 22.508 984.449 73.246 1093.824 c 130.07 1214.797
 217.477 1318.848 326.832 1395.688 c 436.184 1472.531 563.699 1519.504 696.77
 1531.969 c 670.645 1522.117 645.426 1510.008 621.406 1495.777 c 620.445
 1495.777 l 608.926 1488.578 l 608.93 1488.574 l 550.301 1452.012 499.418
 1404.293 459.168 1348.129 c 397.895 1264.266 362.5 1164.305 357.352 1060.57
 c 352.203 956.836 377.523 853.863 430.195 764.344 c 482.863 674.828 560.582
 602.68 653.762 556.801 c 654.723 556.418 l 657.121 555.266 l 677.09 545.859
 716.641 527.234 769.152 527.906 c 781.566 527.969 793.855 529.027 806.016
 531.074 c 806.016 531.07 l 777.832 504.016 745.688 481.422 710.688 464.062
 c 709.727 463.582 l 609.406 411.07 499.105 409.246 480 409.246 c 245.762
 409.246 16.895 566.109 0.961 744.285 c 986.207 1503.836 m 994.719 1501.277
 1003.199 1498.59 1011.648 1495.773 c 1001.855 1498.781 992.031 1501.535
 982.176 1504.031 c h
986.207 1503.836 m f
981.887 1504.031 m 991.668 1501.586 1001.367 1498.832 1010.977 1495.777
 c 1018.848 1493.379 l 1018.848 1493.375 l 1184.148 1436.223 1325.066 1324.492
 1418.398 1176.574 c 1422.031 1170.543 1422.832 1163.219 1420.59 1156.547
 c 1418.348 1149.871 1413.285 1144.52 1406.746 1141.906 c 1400.207 1139.293
 1392.848 1139.684 1386.625 1142.977 c 1366.016 1153.73 1344.801 1163.137
 1322.977 1171.199 c 1254.074 1196.777 1181.145 1209.781 1107.648 1209.602
 c 823.777 1209.602 576.578 1014.625 576.578 763.777 c 576.77 750.785 578.242
 738.016 580.992 725.473 c 507.172 798.992 462.129 896.523 454.027 1000.395
 c 445.926 1104.266 475.301 1207.602 536.832 1291.68 c 537.121 1292.16 l
 567.359 1334.496 604.992 1370.977 648.289 1399.777 c 648.578 1399.777 l
 662.402 1408.418 l 746.594 1461.219 827.617 1511.906 981.891 1504.035 c
 f
Q Q
showpage
%%Trailer
%%EOF
