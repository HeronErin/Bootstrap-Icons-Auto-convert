%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:33:11 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 2 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 2 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 2 768 766 rectclip
1 0 0 -1 0 768 cm q
0 g
455.137 448.367 m 451.824 451.344 446.977 455.711 446.977 463.199 c 446.977
 470.977 452.113 478.801 461.375 485.086 c 503.473 514.512 582.383 511.008
 585.789 510.91 c 585.887 510.91 l 617.902 510.91 649.246 502.27 676.797
 486 c 676.801 486 l 704.504 469.781 727.492 446.609 743.488 418.777 c 759.484
 390.941 767.934 359.414 768 327.312 c 768.863 264.145 746.879 220.848 736.031
 199.441 c 734.109 195.602 l 670.223 71.375 533.09 0 384 0 c 304.969 0 227.859
 24.387 163.199 69.828 c 98.539 115.273 49.477 179.562 22.703 253.922 c 
71.426 194.305 152.785 156.574 240 156.574 c 375.84 156.574 480.48 247.055
 480.48 386.832 c 480.289 386.832 l 480.289 386.93 l 480.289 403.152 472.227
 426.867 456.914 446.641 c 457.203 446.352 l h
455.137 448.367 m f
0.48 372.145 m -1.117 432.41 11.254 492.223 36.625 546.91 c 65.035 607.398
 108.738 659.422 163.414 697.844 c 218.094 736.266 281.848 759.754 348.383
 765.984 c 335.32 761.059 322.715 755.004 310.703 747.887 c 310.223 747.887
 l 304.461 744.285 l 304.465 744.289 l 275.148 726.004 249.707 702.145 229.586
 674.062 c 198.945 632.133 181.25 582.152 178.676 530.285 c 176.102 478.418
 188.762 426.93 215.098 382.172 c 241.434 337.414 280.289 301.34 326.879
 278.398 c 327.359 278.207 l 328.559 277.633 l 338.543 272.93 358.32 263.617
 384.574 263.953 c 390.781 263.984 396.926 264.512 403.008 265.539 c 403.008
 265.535 l 388.918 252.008 372.844 240.711 355.344 232.031 c 354.863 231.793
 l 304.703 205.535 249.551 204.625 240 204.625 c 122.879 204.625 8.449 283.059
 0.48 372.145 c 493.105 751.922 m 497.363 750.641 501.602 749.297 505.824
 747.891 c 500.93 749.395 496.016 750.77 491.09 752.02 c h
493.105 751.922 m f
490.945 752.016 m 495.836 750.793 500.684 749.418 505.488 747.887 c 509.426
 746.688 l 592.074 718.113 662.531 662.246 709.199 588.289 c 711.98 583.672
 711.344 577.766 707.641 573.852 c 703.938 569.938 698.078 568.969 693.312
 571.488 c 683.008 576.863 672.402 581.566 661.488 585.602 c 627.039 598.387
 590.57 604.891 553.824 604.801 c 411.887 604.801 288.289 507.312 288.289
 381.891 c 288.387 375.395 289.121 369.012 290.496 362.738 c 290.496 362.734
 l 253.586 399.496 231.066 448.262 227.016 500.199 c 222.965 552.133 237.652
 603.801 268.414 645.84 c 268.559 646.078 l 283.68 667.246 302.496 685.484
 324.145 699.887 c 324.289 699.887 l 331.199 704.207 l 373.297 730.605 413.809
 755.949 490.941 752.016 c f
Q Q
showpage
%%Trailer
%%EOF
