%!PS-Adobe-3.0
%%Creator: cairo 1.18.0 (https://cairographics.org)
%%CreationDate: Wed Mar  6 19:22:50 2024
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 271x271mm 768 768 0 () ()
%%BoundingBox: 0 0 768 768
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_data_source {
  CairoDataIndex CairoData length lt
    { CairoData CairoDataIndex get /CairoDataIndex CairoDataIndex 1 add def }
    { () } ifelse
} def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 271x271mm
%%PageBoundingBox: 0 0 768 768
768 768 cairo_set_page_size
%%EndPageSetup
q 0 0 768 768 rectclip
1 0 0 -1 0 768 cm q
0 g
480 168 m 480 161.637 482.527 155.531 487.031 151.031 c 491.531 146.527
 497.637 144 504 144 c 696 144 l 704.574 144 712.496 148.574 716.785 156
 c 721.07 163.426 721.07 172.574 716.785 180 c 712.496 187.426 704.574 192
 696 192 c 504 192 l 497.637 192 491.531 189.473 487.031 184.969 c 482.527
 180.469 480 174.363 480 168 c f*
175.391 63.742 m 169.66 56.371 161.035 51.816 151.715 51.234 c 142.395 
50.656 133.273 54.113 126.672 60.719 c 77.039 110.398 l 53.855 133.629 45.312
 166.512 55.438 195.359 c 55.441 195.359 l 97.523 314.742 165.895 423.141
 255.504 512.543 c 344.91 602.152 453.309 670.523 572.688 712.609 c 601.535
 722.738 634.414 714.195 657.648 691.008 c 707.281 641.375 l 713.887 634.777
 717.344 625.656 716.766 616.332 c 716.184 607.012 711.629 598.387 704.258
 592.656 c 593.523 506.543 l 593.52 506.543 l 585.625 500.438 575.367 498.281
 565.68 500.688 c 460.559 526.945 l 432.02 534.027 401.852 525.672 381.023
 504.91 c 263.137 386.977 l 242.359 366.156 233.984 335.988 241.055 307.441
 c 267.359 202.32 l 269.77 192.633 267.609 182.375 261.504 174.48 c h
90.434 24.527 m 107.422 7.531 130.898 -1.348 154.887 0.148 c 178.871 1.645
 201.062 13.375 215.809 32.352 c 301.922 143.039 l 317.715 163.344 323.281
 189.793 317.043 214.75 c 290.785 319.871 l 288.043 330.945 291.281 342.648
 299.328 350.734 c 417.266 468.672 l 425.363 476.734 437.086 479.977 448.176
 477.215 c 553.246 450.957 l 553.246 450.961 l 578.207 444.758 604.633 450.328
 624.961 466.078 c 735.648 552.191 l 775.441 583.152 779.09 641.953 743.473
 677.52 c 693.84 727.152 l 658.32 762.672 605.23 778.273 555.742 760.848
 c 429.055 716.332 314.043 643.812 219.266 548.688 c 124.145 453.926 51.625
 338.926 7.105 212.258 c -10.27 162.816 5.328 109.684 40.848 74.16 c h
90.434 24.527 m f
Q Q
showpage
%%Trailer
%%EOF
